		MOV AH, 9
		MOV DX, OFFSET AMSG
		INT 21H
		MOV AH, 30H
		INT 21H
		OR AL, AL
		JNZ MAIN
		MOV AH, 9
		MOV DX, OFFSET DOSERR
		INT 21H
		INT 20H
MAIN:		CALL CMDLIN
		JNC MAIN0
		MOV AH, 9
		MOV DX, OFFSET USAGE
		INT 21H
MAIN0:		MOV AX, 4C00H
		INT 21H
CMDLIN:		XOR AX, AX
		MOV [FUNC], AX
		MOV SI, 81H
CMDL:		MOV DI, OFFSET INFILE
		CALL GETFN
		JZ CMDL0
		MOV AX, [INFILE+1]
		CMP AX, 412FH
		JZ CMDA
		CMP AX, 442FH
		JZ CMDD
		MOV AX, [FUNC]
		OR AX, AX
		JNZ CMDF
		MOV AX, 0E05H
		MOV [FUNC], AX
		JMP SHORT CMDF
CMDA:		MOV AX, 0E05H
		JMP SHORT CMDLL
CMDD:		MOV AX, 8CH
CMDLL:		TEST [FUNC], AX
		JNZ CMDL0
		OR [FUNC], AX
		JMP SHORT CMDL
CMDL0:		STC
		RET
CMDF:		MOV DI, OFFSET OUTFILE
		CALL GETFN
		JNZ BOTH
		MOV SI, OFFSET INFILE
		MOV DI, OFFSET OUTFILE
		MOVSB
		DEC SI
		CALL WRM
		MOV DI, OFFSET OUTFILE
		STC
		CALL ADDEXT
BOTH:		MOV AX, OFFSET DOTASM
		MOV BX, OFFSET DOTCOM
		TEST BYTE PTR [FUNC], 80H
		JZ DOASM
		XCHG AX, BX
DOASM:		MOV SI, AX
		MOV DI, OFFSET INFILE
		CLC
		CALL ADDEXT
		MOV SI, BX
		MOV DI, OFFSET OUTFILE
		CLC
		CALL ADDEXT
		CALL CORE
		CLC
		RET
GETFN:		XOR DX, DX
		PUSH DI
		INC DI
		CLD
GETFN1:		LODSB
		CMP AL, 0DH
		JZ GETFN0
		CMP AL, 20H
		JNA GETFN2
		CMP AL, 61H
		JC GETFN3
		CMP AL, 7AH
		JA GETFN3
		AND AL, 0DFH
GETFN3:		INC DX
		STOSB
		JMP SHORT GETFN1
GETFN2:		OR DX, DX
		JZ GETFN1
GETFN0:		DEC SI
		POP DI
		MOV [DI], DL
		OR DX, DX
		RET
ADDEXT:		LAHF
		CLD
		MOV BP, DI
		XOR CH, CH
		MOV CL, [DI]
		INC DI
		MOV AL, 2EH
	REPNZ	SCASB
		JNZ ADDXT2
		SAHF
		JNC ADDXT0
		DEC DI
ADDXT2:		SAHF
		JC ADDXT1
		STOSB
		CALL WRM
ADDXT1:		MOV AX, DI
		SUB AX, BP
		DEC AX
		MOV DI, BP
		STOSB
ADDXT0:		RET
CORE:		MOV DI, 80H
		MOV SI, OFFSET INM
		CALL WRM
		MOV SI, OFFSET INFILE
		CALL WRM
		CALL TEG
PROC:		CALL PROCF
		JC OUTGEN
		MOV AX, [ERRS]
		OR AX, AX
		JNZ ERRORS
		MOV AX, [FUNC]
		XOR AL, AL
		XCHG AL, AH
		MOV [FUNC], AX
		OR AX, AX
		JNZ PROC
		MOV DI, 80H
		MOV SI, OFFSET OUTM
		CALL WRM
		MOV SI, OFFSET OUTFILE
		CALL WRM
OUTGEN:		JMP TEG
ERRORS:		MOV DI, 80H
		MOV SI, OFFSET ERRF
		CALL WRM
		CALL WDA
		CALL DELETE
		JMP TEG
PROCF:		XOR AX, AX
		MOV [PC], AX
		MOV [USIZE], AX
		MOV [ERRS], AX
		MOV [INCLEV], AX
		TEST BYTE PTR [FUNC], 2
		JNZ NOCSYM
		MOV [SYMBS], AX
NOCSYM:		INC AH
		MOV [VORG], AX
		MOV [STK+2], SP
		TEST BYTE PTR [FUNC], 4
		JZ FF
		CALL OPENF
		JC FF
		MOV SI, OFFSET INFILE
		CALL INCF
		JNC ASMFL
		MOV SI, OFFSET INFILE
		JMP FFAIL
ASMFL:		CALL RD
		JC ASMF0
		MOV SI, OFFSET INPUT
		CALL ASM
		JNC ASMNER
		CALL TEG
ASMNER:		CALL WR
		JNC ASMFL
ASMCL:		CALL DECF
		JNC ASMCL
		MOV SI, OFFSET OUTFILE
		JMP FFAIL
ASMF0:		CALL DECF
		JNC ASMFL
ASMEND:		CALL CLOSF
		CLC
FF:		RET
FFAIL:		MOV DI, 80H
		PUSH SI
		MOV SI, OFFSET EMB
		CALL WRM
		POP SI
		CALL WRM
		STC
		RET
DELETE:		MOV AH, 41H
		MOV DX, OFFSET OUTBUF+9
		INT 21H
		RET
OPENF:		TEST BYTE PTR [FUNC], 8
		JZ OPENF0
		MOV SI, OFFSET OUTFILE
		MOV DI, OFFSET OUTBUF
		CALL RESET
		MOV AH, 3CH
		XOR CX, CX
		INT 21H
		JNC OPENF1
		JMP FFAIL
OPENF1:		INC DI
		INC DI
		STOSW
OPENF0:		RET
CLOSF:		TEST BYTE PTR [FUNC], 8
		JZ CLOSF0
		MOV AH, 3EH
		MOV BX, [OUTBUF+2]
		INT 21H
CLOSF0:		CLC
		RET
CALF:		TEST BYTE PTR [FUNC], 4
		JZ CALF0
		MOV AX, [INCLEV]
		OR AX, AX
		JZ CALF0
		DEC AX
		XCHG AL, AH
		SHR AX, 1
		SHR AX, 1
		ADD AX, OFFSET INCLEV+2
		CLC
		RET
CALF0:		STC
		RET
INFN:		CALL CALF
		JC INFN0
		MOV SI, AX
		CLD
		LODSW
		ADD SI, 6
		CALL WRM
		CLC
INFN0:		RET
INCF:		INC WORD PTR [INCLEV]
		CALL CALF
		JC INCF0
		MOV DI, AX
		CALL RESET
		MOV AX, 3D00H
		INT 21H
		JC INCF0
		INC DI
		INC DI
		STOSW
		CLC
		RET
INCF0:		DEC WORD PTR [INCLEV]
		STC
		RET
RESET:		PUSH DI
		XOR AX, AX
		MOV CX, 8
		CLD
	REPZ	STOSB
		MOV AL, [SI]
		STOSB
		PUSH DI
		CALL WRM
		XOR AL, AL
		STOSB
		POP DX
		POP DI
		RET
DECF:		CALL CALF
		JC DECF0
		MOV DI, AX
		MOV AH, 3EH
		MOV BX, [DI+2]
		INT 21H
		DEC WORD PTR [INCLEV]
		CLC
DECF0:		RET
RD:		CALL CALF
		JC RD0
		MOV BP, AX
		INC WORD PTR [BP]
		MOV AX, 4200H
		MOV CX, [BP+6]
		MOV DX, [BP+4]
		MOV BX, [BP+2]
		TEST BYTE PTR [FUNC], 80H
		JZ RDA
		MOV DX, [PC]
RDA:		INT 21H
		JC RD0
		MOV AH, 3FH
		MOV DX, OFFSET INPUT+1
		MOV BX, [BP+2]
		MOV CX, 7FH
		TEST BYTE PTR [FUNC], 80H
		JZ RDD
		MOV CL, 6
RDD:		INT 21H
		JC RD0
		OR AX, AX
		JZ RD0
		TEST BYTE PTR [FUNC], 80H
		JNZ RD1
		MOV CX, AX
		MOV DI, OFFSET INPUT+1
		MOV AL, 0DH
		CLD
	REPNZ	SCASB
		MOV AX, DI
		MOV BYTE PTR [DI], 0
		SUB AX, OFFSET INPUT+1
		CWD
		ADD [BP+4], AX
		ADC [BP+6], DX
RD1:		MOV [INPUT], AL
		CLC
		RET
RD0:		STC
		RET
WR:		OR BYTE PTR [OUTPUT], 0
		JZ WRN
		TEST BYTE PTR [FUNC], 8
		JZ WRZ
		OR WORD PTR [USIZE], 0
		JZ WRO
		XOR AX, AX
		MOV CX, 40H
		MOV DI, OFFSET ELEMENT
		CLD
	REPZ	STOSB
WRU:		MOV CX, 40H
		MOV DX, OFFSET ELEMENT
		CMP CX, [USIZE]
		JNA WRU1
		MOV CX, [USIZE]
WRU1:		CALL WRA
		JC WR0
		SUB [USIZE], CX
		JA WRU
WRO:		CALL WRD
		JC WR0
WRZ:		XOR AX, AX
		MOV [USIZE], AX
WRN:		CLC
WR0:		RET
WRD:		XOR CH, CH
		MOV CL, [OUTPUT]
		MOV DX, OFFSET OUTPUT+1
WRA:		PUSH CX
		MOV AH, 40H
		MOV BX, [OUTBUF+2]
		INT 21H
		POP CX
		JC WR0
		CLC
		RET
ASM:		XOR AX, AX
		MOV [OUTPUT], AL
		MOV [STK], SP
		MOV DI, OFFSET FLAGS
		MOV CX, 15
		CLD
	REPZ	STOSB
		LODSB
		OR AL, AL
		JZ DSA0
		TEST BYTE PTR [FUNC], 80H
		JZ ASM1
		MOV DI, OFFSET OUTPUT+1
		MOV BX, SI
DSAS:		MOV SP, [STK]
		MOV AL, 9
		STOSB
		LODSB
		MOV [OPCODE], AL
		AND AL, 1
		MOV CL, 4
		SHL AL, CL
		MOV [WADJ], AL
		MOV AL, [OPCODE]
		XOR AH, AH
		SHL AX, 1
		SHL AX, 1
		ADD AX, OFFSET BIN86
		CALL CNVTB
		CALL ENDL
		CALL LFPR
		CALL LSPR
		MOV AX, SI
		SUB AX, BX
		ADD [PC], AX
		MOV AX, DI
		SUB AX, OFFSET OUTPUT+1
		MOV [OUTPUT], AL
DSA0:		CLC
		RET
ASM1:		CALL CC
		MOV BP, SI
ASML:		MOV SP, [STK]
		CALL CC
		JZ ASM0
		MOV DI, OFFSET I8086
		CALL SL
		JC NOGOOD
		MOV [OPCODE], AL
		OR BYTE PTR [FLAGS], 20H
		XOR AL, AL
		XCHG AL, AH
		SHL AX, 1
		ADD AX, OFFSET IHDL
		MOV BX, AX
		CALL [BX]
		CALL CC
		JNZ BADF9
ASM0:		OR BYTE PTR [FLAGS], 0
		JNZ WRB
		JMP SHORT WRUPD
NOGOOD:		CALL SCREG
		JC BAD
		CALL GSPR
		JC BADFC
		CALL OUTW
		JMP SHORT ASML
BAD:		CMP BP, SI
		JC BADF3
		MOV DI, OFFSET SYMBS
		CALL SL
		JC BADD
		TEST BYTE PTR [FUNC], 1
		JZ BADX
		MOV AL, 0AH
		JMP FAIL
BADD:		CLD
		MOV AL, BL
		STOSB
		MOV CX, BX
	REPZ	MOVSB
		MOV AX, [PC]
		ADD AX, [VORG]
		STOSW
		INC WORD PTR [SYMBS]
BADX:		CALL CC
		JZ BADF3
		CMP AL, 3AH
		JNZ ASML
		INC SI
		JMP SHORT ASML
BADF3:		MOV AL, 3
		JMP FAIL
BADFC:		MOV AL, 0CH
		JMP FAIL
BADF9:		MOV AL, 9
		JMP FAIL
WRB:		CALL OUTW
WRUPD:		XOR AH, AH
		MOV AL, [OUTPUT]
		ADD [PC], AX
		CLC
		RET
OUTW:		CLD
		PUSH SI
		XOR AH, AH
		MOV AL, [OUTPUT]
		MOV DI, OFFSET OUTPUT+1
		ADD DI, AX
		MOV SI, OFFSET FPREF
		MOV DL, [FLAGS]
		LODSB
		TEST DL, 80H
		JZ NOFPR
		STOSB
NOFPR:		LODSB
		TEST DL, 40H
		JZ NOSPR
		STOSB
NOSPR:		LODSB
		TEST DL, 20H
		JZ NOOPC
		STOSB
NOOPC:		LODSB
		TEST DL, 10H
		JZ NOMOD
		STOSB
NOMOD:		LODSW
		TEST DL, 8
		JZ WNDISP
		TEST DL, 4
		JZ WBDISP
		STOSB
		MOV AL, AH
WBDISP:		STOSB
WNDISP:		LODSW
		TEST DL, 2
		JZ WNIMM
		TEST DL, 1
		JZ WBIMM
		STOSB
		MOV AL, AH
WBIMM:		STOSB
WNIMM:		MOV AX, DI
		SUB AX, OFFSET OUTPUT+1
		MOV [OUTPUT], AL
		XOR AL, AL
		MOV [FLAGS], AL
		POP SI
		RET
CC:		XOR BX, BX
CCM:		MOV AL, [BX+SI]
		OR AL, AL
		JZ CCT
		CMP AL, 0DH
		JZ CCT
		CMP AL, 21H
		JC CCK
		CMP AL, 22H
		JZ CCQ
		CMP AL, 27H
		JZ CCQ
		CMP AL, 30H
		JC CCS
		CMP AL, 3AH
		JC CCL
		CMP AL, 3BH
		JZ CCT
		CMP AL, 41H
		JC CCS
		CMP AL, 7BH
		JNC CCS
		CMP AL, 61H
		JNC CCL
		CMP AL, 5FH
		JZ CCL
		CMP AL, 5BH
		JNC CCS
		OR AL, 20H
		MOV [BX+SI], AL
CCL:		INC BX
		JMP SHORT CCM
CCQ:		INC BX
		CMP [BX+SI], AL
		JNZ CCQ
		INC BX
CCT:		MOV AL, [SI]
		OR BX, BX
		RET
CCS:		OR BX, BX
		JNZ CCT
		INC BX
		JMP SHORT CCT
CCK:		OR BX, BX
		JNZ CCT
		INC SI
		JMP SHORT CCM
VAL:		OR BX, BX
		JZ VAL9
		CMP AL, 30H
		JC VAL9
		CMP AL, 39H
		JA VAL9
		CMP BX, 1
		JA VAL1
		XOR AH, AH
		SUB AL, 30H
		INC SI
		CLC
		RET
VAL1:		CLD
		PUSH CX
		PUSH DX
		PUSH BX
		PUSH SI
		MOV CX, BX
		XOR DX, DX
		DEC BX
		MOV AL, [BX+SI]
		MOV BL, 10
		CMP AL, 48
		JC VAL0
		CMP AL, 57
		JNA VAL5
		AND AL, 0DFH
		MOV BL, 16
		DEC CX
		CMP AL, 72
		JZ VAL5
		CMP AL, 79
		JZ VAL8
		CMP AL, 81
		JZ VAL4
		CMP AL, 66
		JZ VAL2
VAL0:		XOR AX, AX
		POP SI
		POP BX
		POP DX
		POP CX
VAL9:		STC
		RET
VAL2:		SHR BX, 1
VAL4:		SHR BX, 1
VAL8:		SHR BX, 1
VAL5:		OR DX, DX
		JZ VAL6
		MOV AX, DX
		MUL BX
		MOV DX, AX
VAL6:		LODSB
		CMP AL, 48
		JC VAL0
		CMP AL, 57
		JNA VAL7
		AND AL, 0DFH
		SUB AL, 7
VAL7:		SUB AL, 48
		XOR AH, AH
		ADD DX, AX
		LOOP VAL5
		MOV AX, DX
		POP SI
		POP BX
		ADD SI, BX
		POP DX
		POP CX
		CLC
		RET
WDA:		MOV BX, 10
WV:		CLD
		CMP AX, BX
		JNC WV0
		CMP AX, 9
		JA WV0
		OR AL, 30H
		STOSB
		RET
WV0:		PUSH AX
		XOR CX, CX
WV1:		XOR DX, DX
		DIV BX
		INC CX
		OR AX, AX
		JNZ WV1
		POP AX
		PUSH SI
		MOV SI, DI
WV2:		XOR DX, DX
		DIV BX
		XCHG AX, DX
		CMP AL, 9
		JNA WV3
		ADD AL, 7
WV3:		ADD AL, 30H
		STOSB
		XCHG AX, DX
		OR AX, AX
		JNZ WV2
		XCHG AX, DX
		CMP AL, 39H
		JNA WV4
		MOV AL, 30H
		STOSB
		INC CX
WV4:		SHR CL, 1
		PUSH DI
		XCHG SI, DI
WV5:		DEC SI
		MOV AL, [DI]
		XCHG AL, [SI]
		STOSB
		LOOP WV5
		POP DI
		POP SI
		RET
SL:		XOR CH, CH
		MOV AX, [DI]
SL1:		INC DI
		INC DI
		OR AX, AX
		JNZ SL2
		STC
		RET
SL2:		MOV CL, [DI]
		INC DI
		CMP CL, BL
		JNZ SL3
		PUSH SI
		CLD
	REPZ	CMPSB
		POP SI
		JZ SL4
SL3:		ADD DI, CX
		DEC AX
		JMP SHORT SL1
SL4:		ADD SI, BX
		MOV AX, [DI]
		CLC
		RET
SW:		MOV AX, BX
		CLD
		SCASB
		JNZ SW0
		PUSH SI
		MOV CX, BX
	REPZ	CMPSB
		POP SI
		JNZ SW0
		ADD SI, BX
		OR AX, AX
		RET
SW0:		XOR AX, AX
		RET
BITS:		OR AX, AX
		JNS BITSNS
		CMP AX, 0FF80H
		RET
BITSNS:		CMP AX, 80H
		CMC
		RET
SIZAL:		PUSH AX
		TEST BYTE PTR [FUNC], 1
		JNZ SIZAL0
		OR BYTE PTR [WADJ], 0
		JNZ SIZAL0
		OR AH, AH
		JZ SIZAL0
		CALL BITS
		JNC SIZAL0
		MOV AL, 7
		JMP FAIL
SIZAL0:		POP AX
		RET
RA:		CALL CC
		CALL SCREG
		JNC RAR
		CALL BORW
		JNC RAD
		CALL RE
		AND DH, 3
		JNZ RAIW		
		MOV CL, 2
		OR AH, AH
		JZ RAIB
		CALL BITS
		JNC RAIB
RAIW:		MOV CL, 3
RAIB:		XOR AL, AL
		JMP WARG0
RAR:		MOV DX, 505H
		CMP AL, 20H
		JNC RARS
		CALL GSPR
		JNC RAD
		MOV DX, 203H
		CMP AL, 10H
		JNC RARS
		MOV DL, 1
		CMP AL, 8
		JNC RARS
		MOV DH, 1
RARS:		AND AL, 7
		XCHG DH, AL
		JMP WARG
RAR1:		MOV AL, 1
		JMP FAIL
RAD:		XOR CX, CX
		MOV DX, 8002H
RADM:		XOR DH, 80H
RADP:		AND DH, 0BFH
		INC SI
RADL:		CALL CC
		JZ RAD8
		CMP AL, 5DH
		JZ RADX
		CMP AL, 2BH
		JZ RADP
		CMP AL, 2DH
		JZ RADM
		PUSH CX
		CALL SCREG
		POP CX
		JNC RADR
		PUSH CX
		CALL GV
		POP CX
		JC RAR1
		ADD [DISP], AX
		JMP SHORT RADL
RADR:		MOV CL, 1
		CMP AL, 14
		JZ SID
		CMP AL, 15
		JZ DID
		CMP AL, 13
		JZ BPD
		CMP AL, 11
		JZ BXD
RAD0:		XOR AL, AL
		JMP FAIL
RAD2:		MOV AL, 2
		JMP FAIL
RAD8:		MOV AL, 8
		JMP FAIL
SID:		SHL CL, 1
DID:		SHL CL, 1
BPD:		SHL CL, 1
BXD:		TEST CH, CL
		JNZ RAD2
		TEST DH, 80H
		JNZ RAD2
		OR CH, CL
		OR DH, 40H
		JMP SHORT RADL
RADX:		OR DH, DH
		JZ RAD8
		INC SI
		MOV AL, CH
		MOV BX, OFFSET RM
		XLATB
		TEST AL, 0F0H
		JNZ RAD2
		XCHG AL, DH
		TEST AL, 3
		JNZ RADW
		CMP DH, 0EH
		JZ RADW
		XOR CL, CL
		MOV AX, [DISP]
		OR AX, AX
		JZ RADB
		MOV CL, 8
		OR AH, AH
		JZ RADB
		CALL BITS
		JNC RADB
RADW:		MOV CL, 0CH
RADB:		MOV AL, [WADJ]
WARG0:		OR [FLAGS], CL
WARG:		MOV CL, 4
		TEST BYTE PTR [ARGS], 0FH
		JZ NARGS
		ROL AL, CL
		ROL DX, CL
NARGS:		OR [ARGS+2], AL
		OR [ARGS], DX
		CALL CC
		JZ RA0
RAC:		CMP AL, 2CH
		JNZ RA1
		INC SI
RA0:		MOV AX, [ARGS]
		RET
RA1:		MOV AL, 1
		JMP FAIL
RE:		MOV DX, 8004H
		DEC SI
RESM:		XOR DH, 80H
RESP:		AND DH, 0BFH
		INC SI
REL:		CALL CC
		JZ REE
		CMP AL, 2BH
		JZ RESP
		CMP AL, 2DH
		JZ RESM
		CALL GV
		JC REE
		ADD [IMM], AX
		JMP SHORT REL
REE:		TEST DH, 40H
		JZ RE8
		MOV AX, [IMM]
		RET
RE8:		MOV AL, 8
		JMP FAIL
BORW:		MOV DI, 4
		CMP AL, 62H
		JZ BYTEP
		CMP AL, 77H
		JZ WORDP
		CMP AL, 64H
		JZ DWORDP
		CMP AL, 71H
		JZ QWORDP
		CMP AL, 74H
		JZ TBYTEP
		CMP AL, 5BH
		JZ BRACP
BORW0:		STC
		RET
BYTEP:		DEC DI
WORDP:		DEC DI
DWORDP:		DEC DI
QWORDP:		DEC DI
TBYTEP:		SHL DI, 1
		MOV DI, [DI+SIZES]
		CALL SW
		JZ BORW0
		MOV AL, [DI]
		MOV [WADJ], AL
		CALL CC
		JZ BORW8
		MOV DI, OFFSET _PTR
		CALL SW
		JZ SPTRR
		CALL CC
		JZ BORW8
		CALL SCREG
		JC SPTRR
		CALL GSPR
		JC BORW1
SPTRR:		CALL CC
		CMP AL, 5BH
		JNZ BORW1
BRACP:		CLC
		RET
BORW1:		MOV AL, 1
		JMP FAIL
BORW8:		MOV AL, 8
		JMP FAIL
GSPR:		CMP AL, 16
		JC GSPR0
		CMP AL, 32
		JNC GSPR0
		PUSH AX
		CALL CC
		CMP AL, 3AH
		POP AX
		JNZ GSPR0
		AND AL, 3
		SHL AL, 1
		SHL AL, 1
		SHL AL, 1
		OR AL, 26H
		MOV [SEGPREF], AL
		OR BYTE PTR [FLAGS], 40H
		INC SI
		CLC
		RET
GSPR0:		STC
		RET
SCREG:		CLD
		LODSW
		CMP BX, 2
		JNZ SCREG0
		CMP AX, 7473H
		JZ SCREG1
		MOV DI, OFFSET REGS
		MOV CX, 14H
	REPNZ	SCASW
		JNZ SCREG0
		MOV AL, 13H
		SUB AL, CL
		CLC
		RET
SCREG0:		DEC SI
		DEC SI
		STC
		RET
SCREG1:		CALL CC
		JZ SCREG2
		CMP AL, 28H
		JNZ SCREG2
		INC SI
		CALL CC
		JZ SCREG3
		CALL VAL
		JC SCREG3
		CMP AX, 7
		JA SCREG3
		OR AL, 20H
		PUSH AX
		CALL CC
		JZ SCREG3
		CMP AL, 29H
		JNZ SCREG3
		POP AX
		INC SI
		CLC
		RET
SCREG2:		MOV AL, 20H
		CLC
		RET
SCREG3:		MOV AL, 0DH
		JMP FAIL
GV:		TEST DH, 40H
		JNZ GVA
		CALL CC
		JZ GVA
		CMP AL, 24H
		JZ GVC
		CMP AL, 22H
		JZ GVQ
		CMP AL, 27H
		JZ GVQ
		CALL VAL
		JC GVL
GVV:		TEST DH, 80H
		JZ GVX
		NEG AX
GVX:		AND DH, 7FH
		OR DH, 40H
		CLC
		RET
GVA:		STC
		RET
GVC:		OR DH, 2
		MOV AX, [PC]
		ADD AX, [VORG]
		ADD SI, BX
		JMP SHORT GVV
GVQ:		PUSH WORD PTR [SI+1]
		ADD SI, BX
		MOV AL, BL
		CMP AL, 3
		JC GV8
		CMP AL, 4
		JA GV7
		POP AX
		JNC GVV
		XOR AH, AH
		JMP SHORT GVV
GV7:		MOV AL, 7
		JMP FAIL
GV8:		MOV AL, 8
		JMP FAIL
GV0C:		MOV AL, 0CH
		JMP FAIL
GVL:		CALL SCREG
		JNC GV0C
		OR DH, 1
		MOV DI, OFFSET _OFFSET
		CALL SW
		CALL CC
		JZ GV8
		MOV DI, OFFSET SYMBS
		CALL SL
		JNC GVV
		TEST BYTE PTR [FUNC], 2
		JZ GVC
		MOV AL, 4
		JMP FAIL
WA:		PUSH AX
		MOV AL, [ARGS+2]
		MOV AH, AL
		MOV CL, 4
		SHR AH, CL
		AND AX, 0F0FH
		JZ WAZ
		OR AL, AL
		JZ WALZ
		OR AH, AH
		JZ WAHZ
		CMP AL, AH
		JZ WAHZ
WA0:		MOV AL, 6
		JMP FAIL
WALZ:		CMP AL, AH
		JZ WAZ
		MOV AL, AH
WAHZ:		CMP AL, 2
		JA WA0
		DEC AX
WAZ:		MOV [WADJ], AL
		TEST BYTE PTR [FLAGS], 2
		JZ WAE
WAX:		OR AL, AL
		JZ WAB
		OR [FLAGS], AL
		POP AX
		RET
WAB:		MOV AX, [IMM]
		CALL SIZAL
		AND BYTE PTR [FLAGS], 0FEH
WAE:		POP AX
		RET
NORF:		CALL CC
		CMP AL, 66H
		JZ NORFF
		CMP AL, 6EH
		JZ NORFN
		CMP AL, 73H
		JZ NORFS
		XOR AX, AX
		RET
NORFF:		MOV DI, OFFSET _FAR
		JMP SW
NORFN:		MOV DI, OFFSET _NEAR
		JMP SW
NORFS:		MOV DI, OFFSET _SHORT
		JMP SW
MMODRM:		OR BYTE PTR [FLAGS], 10H
		MOV AX, [ARGS]
		MOV CL, 4
		CMP AL, 11H
		JZ MREGL
		CMP AL, 12H
		JZ MMEMR
		CMP AL, 13H
		JZ MREGL
		CMP AL, 21H
		JZ MMEML
		CMP AL, 23H
		JZ MMEML
		CMP AL, 31H
		JZ MREGR
		CMP AL, 32H
		JZ MMEMR
		CMP AL, 55H
		JZ MREGL
		AND AX, 0F0FH
		CMP AL, 1
		JZ MREGR
		CMP AL, 2
		JZ MMEMR
		CMP AL, 5
		JZ MREGR
		MOV AX, [ARGS]
		ROR AX, CL
		AND AX, 0F0FH
		CMP AL, 1
		JZ MREGR
		CMP AL, 2
		JZ MMEMR
		RET
MMEML:		ROR AH, CL
MMEMR:		MOV AL, AH
		PUSH AX
		AND AX, 7007H
		ROR AH, 1
		OR AL, AH
		OR [MODRM], AL
		POP AX
		TEST AL, 8
		JNZ MME
		TEST BYTE PTR [FLAGS], 8
		JZ MM0
		MOV AL, 40H
		TEST BYTE PTR [FLAGS], 4
		JZ MM8
		SHL AL, 1
MM8:		OR [MODRM], AL
		RET
MM0:		AND AL, 7
		CMP AL, 6
		JNZ MME
		OR BYTE PTR [FLAGS], 8
		OR BYTE PTR [MODRM], 40H
MME:		RET
MREGL:		ROR AH, CL
MREGR:		MOV AL, AH
		ROR AH, 1
		AND AX, 3807H
		OR AL, AH
		OR AL, 0C0H
		OR [MODRM], AL
		RET
FAIL:		MOV SP, [STK]
		CLD
		INC WORD PTR [ERRS]
		MOV DI, 80H
		XOR AH, AH
		PUSH AX
		SHL AX, 1
		ADD AX, OFFSET ERRM
		MOV SI, AX
		MOV SI, [SI]
		MOV AL, [FUNC]
		TEST AL, 4
		JZ FAIL0
		PUSH DX
		PUSH SI
		CALL INFN
		MOV SI, OFFSET ONLM
		CALL WRM
		CALL WDA
		MOV AX, 203AH
		STOSW
		POP SI
		POP DX
FAIL0:		CALL WRM
		POP AX
		CMP AL, 5
		JZ FAIL5
		CMP AL, 0BH
		JNZ NOBS
		MOV SI, OFFSET TEMP
		CALL WRM
NOBS:		STC
		RET		
FAIL5:		MOV AX, [IMM]
		OR AX, AX
		JNS FAILNS
		NEG AX
		DEC AX
FAILNS:		SUB AX, 7FH
		PUSH AX
		CALL WDA
		POP AX
		MOV SI, OFFSET BYTEM
		CALL WRM
		STC
		RET
WRM:		MOV CL, [SI]
		XOR CH, CH
		INC SI
		CLD
	REPZ	MOVSB
		RET
TEG:		MOV AX, 0A0DH
		STOSW
		MOV AL, 24H
		STOSB
		MOV AH, 9
		MOV DX, 80H
		INT 21H
		RET
G1:		CALL RA
		CALL RA
		CALL WA
		CMP AL, 11H
		JZ G1RM
		CMP AL, 12H
		JZ G1MR
		CMP AL, 21H
		JZ G1RM
		CMP AL, 41H
		JZ G1RI
		CMP AL, 42H
		JZ G1MI
		XOR AL, AL
		JMP FAIL
G1RI:		AND AH, 7
		JNZ G1MI
		MOV AL, [WADJ]
		OR AL, 4
		OR [OPCODE], AL
		RET
G1MI:		MOV AL, 80H
		XCHG AL, [OPCODE]
		OR [MODRM], AL
		MOV AX, [IMM]
		CALL BITS
		JC G1MR
		AND BYTE PTR [FLAGS], 0FEH
		OR BYTE PTR [WADJ], 0
		JZ G1MR
G1RM:		OR BYTE PTR [OPCODE], 2
G1MR:		MOV AL, [WADJ]
		OR [OPCODE], AL
		JMP MMODRM
G2:		CALL RA
		CALL WA
		MOV AL, [OPCODE]
		MOV [MODRM], AL
		MOV AL, [WADJ]
		OR AL, 0D0H
		MOV [OPCODE], AL
		CALL CC
		JZ G2N
		MOV AX, [SI]
		ADD SI, BX
		CMP BX, 2
		JZ G2R
		CMP BX, 1
		JNZ G2F
		CMP AL, 31H
		JZ G2N
G2F:		XOR AL, AL
		JMP FAIL
G2R:		CMP AX, 6C63H
		JNZ G2F
		OR BYTE PTR [OPCODE], 2
G2N:		JMP MMODRM
G3:		CALL RA
		OR BYTE PTR [OPCODE], 0
		JNZ G3S
		CALL RA
G3S:		CALL WA
		CMP AL, 1
		JZ G3R
		CMP AL, 2
		JZ G3R
		CMP AL, 11H
		JZ G3RM
		CMP AL, 12H
		JZ G3RM
		CMP AL, 21H
		JZ G3RM
		CMP AL, 41H
		JZ G3RA
		CMP AL, 42H
		JZ G3R
		XOR AL, AL
		JMP FAIL
G3RM:		MOV AH, 84H
		JMP SHORT G3E
G3RA:		TEST AH, 7
		JZ G3A
G3R:		MOV AH, 0F6H
G3E:		MOV AL, [WADJ]
		OR AL, AH
		XCHG AL, [OPCODE]
		OR [MODRM], AL
		JMP MMODRM
G3A:		MOV AL, [WADJ]
		OR AL, 0A8H
		MOV [OPCODE], AL
		RET
G4:		CALL RA
		CALL WA
		CMP AL, 1
		JZ G4R
		CMP AL, 2
		JZ G4M
		CMP AL, 3
		JZ G4S
		XOR AL, AL
		JMP FAIL
G4R:		MOV AL, [ARGS+2]
		CMP AL, 2
		JC G4M
		MOV AL, [OPCODE]
		AND AL, 18H
		OR AL, 40H
		OR AL, AH
		MOV [OPCODE], AL
		RET
G4M:		MOV AL, [OPCODE]
		CMP AL, 38H
		MOV AX, 8FH
		JZ G4P
		MOV AL, [ARGS+2]
		OR AL, AL
		MOV AL, [WADJ]
		JNZ G4W
		INC AX
G4W:		OR AL, 0FEH
		MOV AH, [OPCODE]
G4P:		MOV [OPCODE], AX
		JMP MMODRM
G4S:		DEC CX
		SHL AH, CL
		MOV AL, [OPCODE]
		SHR AL, CL
		AND AL, 1
		OR AL, AH
		OR AL, 6
		MOV [OPCODE], AL
		RET
G5:		CALL RA
		AND BYTE PTR [FLAGS], 0E2H
		TEST BYTE PTR [FUNC], 2
		JZ G5X
		CMP AL, 4
		JNZ G5F0
		MOV AX, [IMM]
		SUB AX, [PC]
		SUB AX, [VORG]
		DEC AX
		DEC AX
		MOV [IMM], AX
		CALL BITS
		JNC G5X
		MOV AL, 5
		JMP FAIL
G5X:		RET
G5F0:		XOR AL, AL
		JMP FAIL
G6:		CALL NORF
		CMP AL, 3
		JZ G6F
		CMP AL, 4
		JZ G6L
		CMP AL, 5
		JZ G6S
G6L:		CALL RA
		CMP AL, 4
		JZ G6I
		CMP AL, 1
		JZ G6RM
		CMP AL, 2
		JNZ G6F0
G6RM:		MOV AL, [ARGS+2]
		OR AL, AL
		JZ G6RN
		CMP AL, 2
		JZ G6RN
		CMP AL, 3
		JZ G6RF
		MOV AL, 6
		JMP FAIL
G6S:		CMP BYTE PTR [OPCODE], 20H
		JNZ G6F0
		MOV BYTE PTR [OPCODE], 0EBH
		JMP G5
G6F:		OR BYTE PTR [OPCODE], 8
		JMP SHORT G6L
G6RF:		OR BYTE PTR [OPCODE], 8
G6RN:		MOV AL, 0FFH
		XCHG AL, [OPCODE]
		OR [MODRM], AL
		JMP MMODRM
G6F8:		MOV AL, 8
		JMP FAIL
G6F0:		XOR AL, AL
		JMP FAIL
G6I:		CALL CC
		CMP AL, 3AH
		JZ G6IF
		MOV AL, [OPCODE]
		TEST AL, 8
		JNZ G6F8
		DEC CX
		ROL AL, CL
		AND AL, 1
		OR AL, 0E8H
		MOV [OPCODE], AL
		MOV AX, [IMM]
		SUB AX, [PC]
		SUB AX, [VORG]
		SUB AX, 3
		MOV [IMM], AX
		OR BYTE PTR [FLAGS], 3
		RET
G6IF:		INC SI
		CALL CC
		JZ G6F0
		CALL VAL
		JC G6F0
		MOV [DISP], AX
		OR BYTE PTR [FLAGS], 0FH
		XOR AL, AL
		XCHG AL, [OPCODE]
		CMP AL, 20H
		JC G6IOP
		ADD BYTE PTR [OPCODE], 50H
G6IOP:		ADD BYTE PTR [OPCODE], 9AH
		RET
G7:		CALL CC
		JNZ G7A
		MOV AX, 0AH
		MOV [IMM], AX
G7B:		OR BYTE PTR [FLAGS], 2
		RET
G7A:		CALL RE
		OR AH, AH
		JZ G7B
		MOV AL, 7
		JMP FAIL
G8:		CALL RA
		CALL RA
		CMP BYTE PTR [ARGS], 21H
		JNZ G8F
		JMP MMODRM
G8F:		XOR AL, AL
		JMP FAIL
G9:		CALL RA
		CALL RA
		CALL WA
		CMP AL, 11H
		JZ G9RM
		CMP AL, 12H
		JZ G9MR
		CMP AL, 13H
		JZ G9SR
		CMP AL, 21H
		JZ G9RM
		CMP AL, 23H
		JZ G9SR
		CMP AL, 31H
		JZ G9RS
		CMP AL, 32H
		JZ G9RS
		CMP AL, 41H
		JZ G9RI
		CMP AL, 42H
		JZ G9MI
		XOR AL, AL
		JMP FAIL
G9RI:		MOV AL, [WADJ]
		DEC CX
		SHL AL, CL
		OR AL, AH
		OR AL, 0B0H
		MOV [OPCODE], AL
		RET
G9MI:		MOV AL, [WADJ]
		OR AL, 0C6H
		MOV [OPCODE], AL
		JMP MMODRM
G9RM:		MOV AL, 2
		CMP AH, 0E0H
		JNZ G9NA
G9A:		XOR AL, 2
		OR AL, 0A0H
		OR AL, [WADJ]
		MOV [OPCODE], AL
		MOV AL, [FLAGS]
		AND AL, 0E3H
		OR AL, 3
		MOV [FLAGS], AL
		MOV AX, [DISP]
		MOV [IMM], AX
		RET
G9MR:		XOR AL, AL
		CMP AH, 0EH
		JZ G9A
G9NA:		OR AL, [WADJ]
		OR [OPCODE], AL
		JMP MMODRM
G9RS:		MOV BYTE PTR [OPCODE], 8CH
		JMP MMODRM
G9SR:		MOV BYTE PTR [OPCODE], 8EH
		JMP MMODRM
G0AH:		CALL CC
		JZ G0
		CALL OUTW
		JMP ASML
G0:		RET
G0BH:		CALL NORF
		CMP AL, 4
		JZ G0BHN
		CMP AL, 3
		JNZ G0BHN
		OR BYTE PTR [OPCODE], 8
G0BHN:		CALL CC
		JZ G0BH0
		CALL RE
		OR BYTE PTR [FLAGS], 3
		DEC BYTE PTR [OPCODE]
G0BH0:		RET
G0CH:		CALL RE
		CMP AX, 3
		JZ G0CH3
		OR AH, AH
		JNZ G0CHF
		OR BYTE PTR [FLAGS], 2
		RET
G0CH3:		DEC BYTE PTR [OPCODE]
		RET
G0CHF:		MOV AL, 7
		JMP FAIL
G0DH:		PUSH SI
		MOV SI, BP
		CALL CC
		MOV DI, OFFSET SYMBS
		CALL SL
		POP SI
		PUSH DI
		CALL RE
		POP DI
		STOSW
		XOR AL, AL
		MOV [FLAGS], AL
		RET
G0EH:		CALL RA
		CALL RA
		CMP AL, 14H
		JZ G0EHRM
		CMP AL, 24H
		JZ G0EHRM
		XOR AL, AL
		JMP FAIL
G0EHRM:		MOV AX, [IMM]
		CMP AX, 3FH
		JA G0EHF
		MOV AH, AL
		DEC CX
		ROR AL, CL
		AND AX, 707H
		ROL AH, CL
		OR [OPCODE], AX
		AND BYTE PTR [FLAGS], 0FCH
		JMP MMODRM
G0EHF:		MOV AL, 7
		JMP FAIL
G0FH:		XOR AL, AL
		MOV [FLAGS], AL
		TEST BYTE PTR [FUNC], 4
		JNZ G0FH1
		RET
G0FH1:		CALL CC
		JZ G0FHF8
		CMP AL, 22H
		JZ G0FHQ
		CMP AL, 27H
		JNZ G0FHG
G0FHQ:		INC SI
		SUB BX, 2
		JNA G0FHF8
		XOR AL, AL
		MOV [BX+SI], AL
G0FHG:		MOV DI, OFFSET TEMP
		CALL GETFN
		PUSH SI
		MOV SI, OFFSET TEMP
		CALL INCF
		POP SI
		JC G0FHF
		RET
G0FHF:		MOV AL, 0BH
		JMP FAIL
G0FHF8:		MOV AL, 8
		JMP FAIL
G10H:		CALL RA
		CALL RA
		CALL WA
		CMP AL, 11H
		JZ G10HR
		CMP AL, 12H
		JZ G10HM
		CMP AL, 21H
		JZ G10HM
		XOR AL, AL
		JMP FAIL
G10HR:		OR BYTE PTR [WADJ], 0
		JZ G10HM
		TEST AH, 0FH
		JZ G10HAR
		TEST AH, 0F0H
		JZ G10HRA
G10HM:		MOV AL, [WADJ]
		OR AL, 86H
		MOV [OPCODE], AL
		JMP MMODRM
G10HAR:		SHR AH, CL
G10HRA:		MOV AL, AH
		OR AL, 90H
		MOV [OPCODE], AL
		RET
G11H:		CALL RA
		CALL RA
		AND BYTE PTR [FLAGS], 0FEH
		MOV CH, [ARGS+2]
		CMP AL, 41H
		JZ G11HI
		CMP AL, 14H
		JZ G11HO
		OR BYTE PTR [OPCODE], 8
		CMP AX, 2011H
		JZ G11HI
		CMP AX, 211H
		JZ G11HO
G11HF:		XOR AL, AL
		JMP FAIL
G11HO:		SHR CH, CL
G11HI:		MOV AL, CH
		AND AL, 0FH
		CMP AL, 2
		JC G11H0
		INC BYTE PTR [OPCODE]
G11H0:		RET
G12H:		TEST BYTE PTR [FUNC], 4
		JZ G12H0
		MOV SP, [STK+2]
		JMP ASMF0
G12H0:		RET
G13H:		CALL RE
		MOV [VORG], AX
		XOR AL, AL
		MOV [FLAGS], AL
		RET
G14H:		XOR AX, AX
		MOV BP, AX
		MOV [FLAGS], AL
		MOV DI, OFFSET OUTPUT+1
G14HL:		CALL CC
		JZ G14HF
		CMP AL, 3FH
		JZ G14HU
		CALL G14HS
		CMP AL, 22H
		JZ G14HQ
		CMP AL, 27H
		JZ G14HQ
		PUSH DI
		CALL RE
		POP DI
		XOR AX, AX
		XCHG AX, [IMM]
		MOV CL, [OPCODE]
		DEC CX
		JNZ G14HNZ
		CALL SIZAL
G14HNZ:		MOV DX, 1
		SHL DX, CL
		CMP CL, 4
		JNZ G14HNT
		MOV DX, 10
G14HNT:		CLD
		STOSB
		OR CL, CL
		JZ G14HB
		MOV AL, AH
		STOSB
G14HB:		SUB DX, 2
		JNA G14HC
		MOV CX, DX
		RCL AH, 1
		SALC
	REPZ	STOSB
		JMP SHORT G14HC
G14HQ:		CMP BYTE PTR [OPCODE], 1
		JA G14HF
		MOV AH, AL
		MOV CX, BX
		SUB CX, 2
		JNA G14HF
		INC SI
		CLD
	REPZ	MOVSB
		LODSB
		CMP AL, AH
		JNZ G14HF
G14HC:		CALL CC
		JZ G14H0
		CMP AL, 2CH
		JNZ G14HF
		INC SI
		JMP SHORT G14HL
G14H0:		MOV AX, DI
		SUB AX, OFFSET OUTPUT+1
		MOV [OUTPUT], AL
		ADD [USIZE], BP
		ADD [PC], BP
		RET
G14HF:		MOV AL, 1
		JMP FAIL
G14HU:		MOV CL, [OPCODE]
		MOV AX, 1
		DEC CX
		SHL AX, CL
		ADD BP, AX
		INC SI
		JMP SHORT G14HC
G14HS:		XOR CX, CX
		XCHG CX, BP
		JCXZ G14HS0
		PUSH AX
		XOR AL, AL
		CLD
	REPZ	STOSB
		POP AX
G14HS0:		RET
G15H:		MOV AL, 0CH
		JMP FAIL
G16H:		CALL CC
		CMP AL, 3AH
		JNZ G16H1
		INC SI
		CALL OUTW
		JMP ASML
G16H1:		CALL RE
		ADD [USIZE], AX
		ADD [PC], AX
		XOR AL, AL
		MOV [FLAGS], AL
		RET
G17H:		MOV AX, [PC]
		AND AL, 1
		JNZ G17H0
		MOV [FLAGS], AL
G17H0:		RET
G18H:		CALL RA
		XOR AH, AH
		MOV AL, [OPCODE]
		SHL AX, 1
		SHL AX, 1
		ADD AX, OFFSET FLDTB
		MOV BX, AX
		MOV AL, [ARGS]
		CMP AL, 5
		JZ G18HR
		CMP AL, 2
		JNZ G18HF
		MOV AL, [ARGS+2]
		CMP AL, 3
		JZ G18HD
		CMP AL, 4
		JZ G18HQ
		CMP AL, 5
		JZ G18HT
G18HF:		MOV AL, 1
		JMP FAIL
G18HR:		INC BX
G18HT:		INC BX
G18HQ:		INC BX
G18HD:		MOV AL, [BX]
		MOV [OPCODE], AL
		CALL EXTEND
		JMP MMODRM
G19H:		MOV AL, 0D9H
		XCHG AL, [OPCODE]
		MOV [MODRM], AL
		OR BYTE PTR [FLAGS], 10H
		RET
G1AH:		CALL CC
		JNZ G1AHR
		INC BYTE PTR [OPCODE]
		JMP SHORT G1AHE
G1AHR:		CALL RA
		CALL RA
		CMP AL, 55H
		JNZ G1AHF
		MOV AL, AH
		TEST AL, 0F0H
		JNZ G1AHF
		OR [OPCODE], AL
G1AHE:		MOV AL, 0DEH
		XCHG AL, [OPCODE]
		MOV [MODRM], AL
		OR BYTE PTR [FLAGS], 10H
		RET
G1AHF:		MOV AL, 1
		JMP FAIL
G1BH:		CALL EXTEND
		CALL RA
		CMP AL, 2
		JNZ G1BHF
		MOV AL, [ARGS+2]
		CMP AL, 2
		JZ G1BHW
		CMP AL, 3
		JZ G1BHD
G1BHF:		MOV AL, 1
		JMP FAIL
G1BHW:		OR BYTE PTR [OPCODE], 4
G1BHD:		JMP MMODRM
G1CH:		CALL RA
		CALL EXTEND
		CMP AL, 2
		JNZ G1CHF
		JMP MMODRM
G1CHF:		MOV AL, 1
		JMP FAIL
G1DH:		MOV AX, 0D9DEH
		MOV [OPCODE], AX
		OR BYTE PTR [FLAGS], 10H
		RET
G1EH:		MOV AL, 0DBH
		XCHG AL, [OPCODE]
		TEST AL, 10H
		JZ G1EH0
		XOR AL, 10H
		MOV BYTE PTR [FPREF], 9BH
		OR BYTE PTR [FLAGS], 80H
G1EH0:		OR AL, 0E0H
		MOV [MODRM], AL
		OR BYTE PTR [FLAGS], 10H
		RET
G1FH:		CALL EXTEND
		CALL RA
		CMP AL, 2
		JZ G1FHM
		CMP AL, 5
		JZ G1FHR
		XOR AL, AL
		JMP FAIL
G1FHM:		MOV AL, [ARGS+2]
		CMP AL, 3
		JZ G1FHD
		CMP AL, 4
		JNZ G1FHF
G1FHR:		OR BYTE PTR [OPCODE], 4
G1FHD:		JMP MMODRM
G1FHF:		MOV AL, 1
		JMP FAIL
G20H:		CALL EXTEND
		CALL CC
		JNZ G20H1
		MOV AH, 1
		JMP SHORT G20H2
G20H1:		CALL RA
		CMP AL, 5
		JNZ G20HF
G20H2:		OR AH, 0C0H
		OR [MODRM], AH
		RET
G20HF:		XOR AL, AL
		JMP FAIL
G21H:		CALL RA
		CALL EXTEND
		OR BYTE PTR [FLAGS], 80H
		MOV BYTE PTR [FPREF], 9BH
		MOV AL, [ARGS]
		CMP AL, 2
		JNZ G21HF
		JMP MMODRM
G21HF:		MOV AL, 1
		JMP FAIL
G22H:		CALL EXTEND
		CALL CC
		JNZ G22HG
		OR BYTE PTR [MODRM], 0D1H
		RET
G22HG:		CALL RA
		CMP AL, 5
		JZ G22HD
		CMP AL, 2
		JNZ G22HF
		MOV AL, [ARGS+2]
		CMP AL, 3
		JZ G22HD
		CMP AL, 4
		JZ G22HQ
G22HF:		MOV AL, 1
		JMP FAIL
G22HQ:		OR BYTE PTR [OPCODE], 4
G22HD:		JMP MMODRM
G23H:		MOV AL, 0D8H
		XOR AH, AH
		XCHG AL, [OPCODE]
		SHL AL, 1
		MOV BX, AX
		ADD BX, OFFSET ARITB
		SHL AL, 1
		SHL AL, 1
		MOV [MODRM], AL
		PUSH BX
		CALL RA
		CALL CC
		POP BX
		JZ G23HM
		PUSH BX
		CALL RA
		POP BX
		CMP AL, 55H
		JNZ G23HF
		MOV AL, AH
		AND AX, 0F00FH
		SHR AH, CL
		OR AL, AL
		JZ G23H0
		OR AH, AH
		JNZ G23HF
		INC BX
		MOV AH, [BX]
		AND AH, 7
		OR [OPCODE], AH
		XOR AH, AH
G23H0:		OR AL, AH
		OR AL, 0C0H
		OR [MODRM], AL
		OR BYTE PTR [FLAGS], 10H
		RET
G23HM:		MOV AL, [ARGS]
		CMP AL, 2
		JNZ G23HF
		MOV AL, [ARGS+2]
		CMP AL, 3
		JZ G23HD
		CMP AL, 4
		JNZ G23HF
G23HQ:		MOV AL, [BX]
		AND AL, 7
		OR [OPCODE], AL
G23HD:		JMP MMODRM
G23HF:		XOR AL, AL
		JMP FAIL
G24H:		CALL RA
		CMP AL, 2
		JNZ G24HF
		MOV AL, [OPCODE]
		AND AL, 38H
		MOV [MODRM], AL
		MOV AL, [ARGS+2]
		CMP AL, 2
		JZ G24HW
		CMP AL, 3
		JZ G24HD
		CMP AL, 4
		JZ G24HQ
G24HF:		MOV AL, 1
		JMP FAIL
G24HQ:		OR BYTE PTR [MODRM], 28H
G24HW:		MOV AL, 0DFH
		MOV [OPCODE], AL
		JMP MMODRM
G24HD:		MOV AL, 0DBH
		MOV [OPCODE], AL
		JMP MMODRM
CNVTB:		PUSH SI
		MOV SI, AX
		LODSW
		PUSH SI
		MOV SI, AX
		XOR CH, CH
		MOV CL, [SI]
		JCXZ CNVTB0
		INC SI
	REP	MOVSB
		MOV AL, 9
		STOSB
CNVTB0:		POP SI
		LODSW
		POP SI
		JMP AX
HALX:		MOV AH, AL
		AND AL, 0FH
		SHR AH, 1
		SHR AH, 1
		SHR AH, 1
		SHR AH, 1
		CMP AL, 9
		JNA HALX1
		ADD AL, 7
HALX1:		XCHG AH, AL
		CMP AL, 9
		JNA HALX2
		ADD AL, 7
HALX2:		ADD AX, 3030H
		RET
WRAX:		CLD
		PUSH AX
		MOV AL, AH
		CALL HALX
		STOSW
		POP AX
		CALL HALX
		STOSW
		RET
G01DS:		MOV DX, OFFSET _G01D
		CALL GRP
		MOV AL, 2CH
		STOSB
		LODSB
		CBW
WHAS:		OR AX, AX
		JNS WHA
		NEG AX
		MOV BYTE PTR [DI], 2DH
		INC DI
WHA:		PUSH AX
		PUSH BX
		MOV BX, 16
		CALL WV
		POP BX
		POP AX
		CMP AX, 9
		JNA WHA0
		MOV AL, 68H
		STOSB
WHA0:		RET
WREG:		CLD
		PUSH SI
		MOV SI, AX
		SHR SI, 1
		SHR SI, 1
		AND SI, 0EH
		ADD SI, OFFSET REGS
		ADD SI, [WADJ]
		MOVSW
		POP SI
		RET
PSRD:		MOV AL, [OPCODE]
WSR:		SHR AL, 1
		SHR AL, 1
		AND AX, 6
		ADD AX, OFFSET REGS+20H
		XCHG AX, SI
		MOVSW
		XCHG AX, SI
		RET
WSPR:		CLD
		XOR AL, AL
		XCHG AL, [SEGPREF]
		OR AL, AL
		JZ WSPR0
		CALL WSR
		MOV AL, 3AH
		STOSB
WSPR0:		RET
LFPR:		XOR DL, DL
		XCHG DL, [FPREF]
		OR DL, DL
		JZ LSPR0
		CLD
		PUSH DI
		MOV DI, OFFSET TEMP+1
		MOV AL, 9
		STOSB
		PUSH SI
		MOV SI, OFFSET _WAIT
		MOVSW
		MOVSW
		POP SI
		JMP SHORT LSPR1
LSPR:		XOR DL, DL
		XCHG DL, [SEGPREF]
		OR DL, DL
		JZ LSPR0
		CLD
		PUSH DI
		MOV DI, OFFSET TEMP+1
		MOV AL, 9
		STOSB
		MOV AL, DL
		CALL WSR
		MOV AL, 3AH
		STOSB
LSPR1:		PUSH DX
		MOV BP, OFFSET TEMP+1
		CALL TABS
		POP DX
		MOV AX, [PC]
		ADD AX, [VORG]
		CALL WRAX
		MOV AL, 20H
		STOSB
		MOV AL, DL
		CALL HALX
		STOSW
		MOV AX, 0A0DH
		STOSW
		POP CX
		PUSH SI
		MOV SI, OFFSET OUTPUT+1
		SUB CX, SI
	REPZ	MOVSB
		MOV CX, DI
		MOV SI, OFFSET TEMP+1
		SUB CX, SI
		MOV DI, OFFSET OUTPUT+1
	REPZ	MOVSB
		POP SI
LSPR0:		RET
GRP:		PUSH SI
		MOV AL, [SI]
		SHR AL, 1
		SHR AL, 1
		AND AX, 0EH
		ADD AX, DX
		MOV SI, AX
		MOV SI, [SI]
		CALL WRM
		POP SI
		MOV AL, 9
		STOSB
		LODSB
WPTR:		CMP AL, 0C0H
		JNC WDISP
		PUSH AX
		PUSH SI
		MOV AX, [WADJ]
		CMP AL, 10H
		MOV SI, [SIZES+2]
		JZ WPTRA
		MOV SI, AX
		SHL SI, 1
		MOV SI, [SI+SIZES]
WPTRA:		LODSB
		MOV CX, AX
		CLD
	REPZ	MOVSB
		MOV AL, 20H
		MOV SI, OFFSET _PTR+1
		STOSB
		MOVSW
		MOVSB
		STOSB
		POP SI
		POP AX
WDISP:		CMP AL, 0C0H
		JC WDRM
		PUSH SI
		MOV SI, AX
		AND SI, 7
		SHL SI, 1
		ADD SI, OFFSET REGS
		ADD SI, [WADJ]
		MOVSW
		POP SI
		RET
WDRM:		PUSH AX
		CALL WSPR
		MOV AL, 5BH
		STOSB
		POP AX
		PUSH AX
		AND AL, 0C7H
		CMP AL, 6
		JNZ WDR
		LODSW
		CALL WHA
		JMP SHORT WDX
WDR:		PUSH SI
		PUSH BX
		MOV BX, OFFSET _DISP
		AND AL, 7
		XLATB
		POP BX
		MOV AH, AL
		AND AX, 0F00FH
		SHR AH, 1
		SHR AH, 1
		SHR AH, 1
		SHL AL, 1
		XOR DX, DX
		XCHG DL, AH
		ADD AX, OFFSET REGS
		MOV SI, AX
		MOVSW
		OR DL, DL
		JZ WD1R
		MOV AL, 2BH
		STOSB
		MOV SI, OFFSET REGS
		ADD SI, DX
		MOVSW
WD1R:		POP SI
		POP AX
		PUSH AX
		CMP AL, 40H
		JC WDX
		CMP AL, 80H
		JC WDD8
		LODSW
		JMP SHORT WDD
WDD8:		LODSB
		CBW
WDD:		OR AX, AX
		JS WDM
		JZ WDX
		MOV BYTE PTR [DI], 2BH
		INC DI
WDM:		CALL WHAS
WDX:		MOV AL, 5DH
		STOSB
		POP AX
		RET
TABS:		CLD
		PUSH SI
		MOV SI, BP
		MOV CX, DI
		SUB CX, BP
		JNA TABS0
		XOR DX, DX
TABS1:		LODSB
		CMP AL, 9
		JZ TABS2
		INC DX
		LOOP TABS1
		JMP SHORT TABS3
TABS2:		MOV AX, DX
		AND AX, 7
		NEG AX
		ADD AX, 8
		ADD DX, AX
		LOOP TABS1
TABS3:		MOV AL, 9
		MOV CL, 3
		SHR DX, CL
		INC CX
		INC CX
		SUB CX, DX
		JNA TABS4
	REPZ	STOSB
TABS4:		MOV AL, 3BH
		STOSB
TABS0:		POP SI
		RET
EXTEND:		MOV AL, [OPCODE]
		MOV AH, AL
		AND AX, 3807H
		OR AL, 0D8H
		MOV [OPCODE], AL
		OR [MODRM], AH
		OR BYTE PTR [FLAGS], 10H
		RET
FEND:		XOR AL, AL
		XCHG AL, [FPREF]
		XOR DX, DX
		CMP AL, 9BH
		JNZ FEND0
		MOV DX, 8
FEND0:		ADD DX, OFFSET _SG5
		JMP GRPF
WFST:		PUSH AX
		AND AL, 7
		OR AL, 30H
		MOV AH, 28H
		XCHG AL, AH
		PUSH AX
		MOV AX, 7473H
		STOSW
		POP AX
		STOSW
		INC AX
		STOSB
		POP AX
		RET
SINGD:		DEC DI
		RET
SPREFD:		MOV AL, [OPCODE]
		MOV [SEGPREF], AL
		DEC DI
		JMP DSAS
ENDL:		MOV BP, OFFSET OUTPUT+1
		CALL TABS
		MOV AX, [PC]
		ADD AX, [VORG]
		OR BYTE PTR [SEGPREF], 0
		JZ SKSPR
		INC AX
SKSPR:		CALL WRAX
		MOV CX, SI
		SUB CX, BX
		MOV SI, BX
		OR BYTE PTR [SEGPREF], 0
		JZ DOPS
		DEC CX
		INC SI
DOPS:		MOV AL, 20H
		STOSB
		LODSB
		CALL HALX
		STOSW
		LOOP DOPS
		MOV AX, 0A0DH
		STOSW
		RET
ACCID:		XOR AL, AL
		CALL WREG
		JMP G03DT
MRD:		LODSB
		PUSH AX
		CALL WDISP
		MOV AL, 2CH
		STOSB
		POP AX
		JMP WREG
RWMD:		MOV AL, 10H
		MOV [WADJ], AL
RMD:		LODSB
		CALL WREG
		PUSH AX
		MOV AL, 2CH
		STOSB
		POP AX
		JMP WDISP
MSD:		MOV AL, 10H
		MOV [WADJ], AL
		LODSB
		PUSH AX
		CALL WDISP
		MOV AL, 2CH
		STOSB
		POP AX
		JMP WSR
SMD:		MOV AL, 10H
		MOV [WADJ], AL
		LODSB
		PUSH AX
		CALL WSR
		MOV AL, 2CH
		STOSB
		POP AX
		JMP WDISP
ACCRD:		MOV AX, 7861H
		STOSW
		MOV AL, 2CH
		STOSB
REGWD:		MOV AL, 10H
		MOV [WADJ], AL
		MOV AL, [OPCODE]
		OR AL, 0C0H
		JMP WDISP
ACCMD:		XOR AL, AL
		CALL WREG
		MOV AL, 2CH
		STOSB
		CALL WSPR
		MOV AL, 5BH
		STOSB
		LODSW
		CALL WHA
		MOV AL, 5DH
		STOSB
		RET
MACCD:		CALL WSPR
		MOV AL, 5BH
		STOSB
		LODSW
		CALL WHA
		MOV AX, 2C5DH
		STOSW
		XOR AL, AL
		JMP WREG
RMID:		LODSB
		CALL WPTR
		JMP G03DT
RIMMD:		MOV AL, [OPCODE]
		PUSH SI
		AND AX, 0FH
		SHL AL, 1
		ADD AX, OFFSET REGS
		MOV SI, AX
		MOVSW
		POP SI
		MOV CL, 3
		SHR BYTE PTR [OPCODE], CL
		JMP G03DT
RELBD:		CMP BYTE PTR [OPCODE], 0EBH
		JNZ NOTJMP
		PUSH SI
		MOV SI, OFFSET _SHORT+1
		MOVSW
		MOVSW
		MOVSB
		POP SI
		MOV AL, 20H
		STOSB
NOTJMP:		LODSB
		CBW
		ADD AX, [PC]
		ADD AX, [VORG]
		INC AX
		INC AX
		JMP WHA
RELWD:		LODSW
		ADD AX, [PC]
		ADD AX, [VORG]
		ADD AX, 3
		JMP WHA
AAMD:		LODSB
		CMP AL, 0AH
		JZ AAMD0
		XOR AH, AH
		CALL WHA
AAMD0:		RET
ESCD:		LODSB
		MOV AH, AL
		MOV [MODRM], AL
		MOV AL, [OPCODE]
		AND AX, 0F807H
		MOV CL, 3
		ROR AX, CL
		XCHG AL, AH
		DEC CX
		SHL AX, CL
		ADD AX, OFFSET BIN87
		JMP CNVTB
INTD:		LODSB
		XOR AH, AH
		JMP WHA
INT3D:		MOV AL, 33H
		STOSB
		RET
RETFD:		PUSH SI
		MOV SI, OFFSET _FAR+1
		MOVSW
		MOVSB
		POP SI
		TEST BYTE PTR [OPCODE], 1
		JNZ NORET
		MOV AL, 20H
		STOSB
RETD:		LODSW
		CALL WHA
NORET:		RET
ADIOD:		MOV AX, [WADJ]
		ADD AX, OFFSET REGS
		PUSH SI
		MOV SI, AX
		LODSW
		POP SI
		MOV DX, 7864H
		TEST BYTE PTR [OPCODE], 2
		JZ ADIOD0
		XCHG AX, DX
ADIOD0:		STOSW
		MOV AL, 2CH
		STOSB
		MOV AX, DX
		STOSW
		RET
IBAPD:		LODSB
		XOR AH, AH
		CALL WHA
		MOV AL, 2CH
		STOSB
		MOV AL, 0C0H
		JMP WDISP
SEGOFD:		LODSW
		PUSH AX
		LODSW
		CALL WHA
		MOV AL, 3AH
		STOSB
		POP AX
		JMP WHA
INVD:		MOV AL, [OPCODE]
		XOR AH, AH
		JMP WHA
G02D:		MOV DX, OFFSET _G02D
		CALL GRP
		MOV AL, 2CH
		STOSB
		MOV AL, [OPCODE]
		TEST AL, 2
		JZ G02D1
		MOV AX, 6C63H
		STOSW
		RET
G02D1:		MOV AL, 31H
		STOSB
		RET
G03D:		MOV DX, OFFSET _G03D
		CALL GRP
		TEST AL, 30H
		JZ G03DT
		RET
G01D:		MOV DX, OFFSET _G01D
		CALL GRP
G03DT:		MOV AL, 2CH
		STOSB
		LODSW
		TEST BYTE PTR [OPCODE], 1
		JNZ G03D0
		CBW
		DEC SI
G03D0:		JMP WHA
G04D:		PUSH SI
		LODSB
		SHR AL, 1
		SHR AL, 1
		AND AX, 0EH
		PUSH AX
		ADD AX, OFFSET _G04D
		MOV SI, AX
		MOV SI, [SI]
		CALL WRM
		MOV AL, 9
		STOSB
		POP AX
		POP SI
		SHR AL, 1
		CMP AL, 5
		JZ G04DF
		CMP AL, 4
		JZ DISPD
		CMP AL, 3
		JZ G04DF
		CMP AL, 2
		JZ DISPD
		LODSB
		JMP WPTR
G04DF:		MOV AL, [SI]
		PUSH SI
		MOV SI, OFFSET _FAR+1
		CMP AL, 0C0H
		MOV AL, 20H
		JNC G04D3
		MOV SI, OFFSET _DWORD+1
		MOVSW
		MOVSW
		MOVSB
		STOSB
		MOV SI, OFFSET _PTR+1
G04D3:		MOVSW
		MOVSB
		STOSB
		POP SI
DISPD:		LODSB
		JMP WDISP
FSD6:		MOV DX, OFFSET _SG6
		JMP SHORT FSD
FSD7:		MOV DX, OFFSET _SG7
FSD:		MOV AL, [MODRM]
		PUSH AX
		AND AL, 8
		SHR AL, 1
		SHR AL, 1
		XOR AH, AH
		ADD DX, AX
		XOR AL, AL
		XCHG AL, [FPREF]
		CMP AL, 9BH
		POP AX
		JNZ FSD0
		ADD DX, 4
FSD0:		CALL GRPF
		JMP WDISP
APFD:		MOV AL, [MODRM]
		AND AL, 7
		CMP AL, 1
		JZ APFD1
		CALL WFST
		MOV AL, 2CH
		STOSB
		XOR AL, AL
		JMP WFST
APFD1:		DEC DI
		RET
ARIFD:		MOV AL, [MODRM]
		CMP AL, 0C0H
		JNC ARIFDR
		XOR AX, AX
		CMP BYTE PTR [OPCODE], 0DCH
		CMC
		ADC AL, 2
		MOV [WADJ], AX
		MOV AL, [MODRM]
		JMP WPTR
ARIFDR:		CMP BYTE PTR [OPCODE], 0DCH
		JC ARIFD0
		CALL WFST
		MOV AL, 2CH
		STOSB
		XOR AL, AL
		JMP WFST
ARIFD0:		XOR AL, AL
		CALL WFST
		MOV AL, 2CH
		STOSB
		MOV AL, [MODRM]
		JMP WFST
FILDD:		MOV DX, 1
		MOV AL, [OPCODE]
		CMP AL, 0DBH
		JZ FLDDW
		TEST BYTE PTR [MODRM], 20H
		JZ FLDDD
		JMP SHORT FLDDQ
FLDD:		MOV AL, [MODRM]
		CMP AL, 0C0H
		JC FLDDR
		JMP WFST
FLDDR:		MOV DX, 2
		MOV AL, [OPCODE]
		CMP AL, 0DDH
		JZ FLDDW
		CMP AL, 0D9H
		JZ FLDDD
FLDDQ:		INC DX
FLDDW:		INC DX
FLDDD:		MOV [WADJ], DX
		MOV AL, [MODRM]
		JMP WPTR
INTFD:		XOR AX, AX
		CMP BYTE PTR [OPCODE], 0DEH
		ADC AL, 1
		MOV [WADJ], AX
		MOV AL, [MODRM]
		JMP WPTR
GRPF:		MOV AL, [MODRM]
		AND AX, 7
		SHL AX, 1
		ADD AX, DX
GRPF1:		PUSH SI
		MOV SI, AX
		MOV SI, [SI]
		MOV CL, [SI]
		XOR CH, CH
		JCXZ GRPF0
		INC SI
		CLD
	REPZ	MOVSB
		POP SI
		RET
GRPF0:		POP SI
INVFD:		MOV AL, [OPCODE]
		MOV AH, [MODRM]
		MOV CL, 3
		ROR AH, CL
		AND AX, 707H
		ROL AL, CL
		OR AL, AH
		XOR AH, AH
		CALL WHA
		MOV AL, 2CH
		STOSB
DISPDD:		MOV AL, [MODRM]
		JMP WDISP
REGFD:		MOV AL, [MODRM]
		AND AL, 7
		CMP AL, 1
		JZ REGFD0
		JMP WFST
REGFD0:		RET
SGFD:		MOV AL, [MODRM]
		AND AX, 1FH
		SHL AX, 1
		ADD AX, OFFSET _SGS
		JMP GRPF1
WAITD:		DEC DI
		MOV AL, [OPCODE]
		MOV [FPREF], AL
		MOV SP, [STK]
		JMP DSAS
I8086		DW 216
_AAA		DB 3, "aaa",	37H, 0
_AAD		DB 3, "aad",	0D5H, 7
_AAM		DB 3, "aam",	0D4H, 7
_AAS		DB 3, "aas",	3FH, 0
_ADC		DB 3, "adc",	10H, 1
_ADD		DB 3, "add",	0, 1
_AND		DB 3, "and",	20H, 1
_BYTE		DB 4, "byte",	1, 15H
_CALL		DB 4, "call",	10H, 6
_CBW		DB 3, "cbw",	98H, 0
_CLC		DB 3, "clc",	0F8H, 0
_CLD		DB 3, "cld",	0FCH, 0
_CLI		DB 3, "cli",	0FAH, 0
_CMC		DB 3, "cmc",	0F5H, 0
_CMP		DB 3, "cmp",	38H, 1
_CMPSB		DB 5, "cmpsb",	0A6H, 0
_CMPSW		DB 5, "cmpsw",	0A7H, 0
_CWD		DB 3, "cwd",	99H, 0
_DAA		DB 3, "daa",	27H, 0
_DAS		DB 3, "das",	2FH, 0
_DB		DB 2, "db",	1, 14H
		DB 2, "dd",	3, 14H
_DEC		DB 3, "dec",	8, 4
_DIV		DB 3, "div",	30H, 3
		DB 2, "dq",	4, 14H
		DB 2, "ds",	0, 16H
		DB 2, "dt",	5, 14H
		DB 2, "dw",	2, 14H
_DWORD		DB 5, "dword",	3, 15H
		DB 3, "end",	0, 12H
		DB 3, "equ",	0, 0DH
		DB 4, "even",	90H, 17H
_ESC		DB 3, "esc",	0D8H, 0EH
_F2XM1		DB 5, "f2xm1",	0F0H, 19H
_FABS		DB 4, "fabs",	0E1H, 19H
_FADD		DB 4, "fadd",	0, 23H
_FADDP		DB 5, "faddp",	0C0H, 1AH
_FAR		DB 3, "far",	3, 15H
_FBLD		DB 4, "fbld",	27H, 1CH
_FBSTP		DB 5, "fbstp",	37H, 1CH
_FCHS		DB 4, "fchs",	0E0H, 19H
_FCLEX		DB 5, "fclex",	12H, 1EH
_FCOM		DB 4, "fcom",	10H, 22H
_FCOMP		DB 5, "fcomp",	18H, 22H
_FCOMPP		DB 6, "fcompp",	0D9H, 1DH
_FDECSTP	DB 7, "fdecstp",0F6H, 19H
_FDISI		DB 5, "fdisi",	11H, 1EH
_FDIV		DB 4, "fdiv",	6, 23H
_FDIVP		DB 5, "fdivp",	0F8H, 1AH
_FDIVR		DB 5, "fdivr",	7, 23H
_FDIVRP		DB 6, "fdivrp",	0F0H, 1AH
_FENI		DB 4, "feni",	10H, 1EH
_FFREE		DB 5, "ffree",	05H, 20H
_FFREEP		DB 6, "ffreep",	07H, 20H
_FIADD		DB 5, "fiadd",	02H, 1BH
_FICOM		DB 5, "ficom",	12H, 1BH
_FICOMP		DB 6, "ficomp",	1AH, 1BH
_FIDIV		DB 5, "fidiv",	32H, 1BH
_FIDIVR		DB 6, "fidivr",	3AH, 1BH
_FILD		DB 4, "fild",	07H, 24H
_FIMUL		DB 5, "fimul",	0AH, 1BH
_FINCSTP	DB 7, "fincstp",0F7H, 19H
_FINIT		DB 5, "finit",	13H, 1EH
_FIST		DB 4, "fist",	13H, 1BH
_FISTP		DB 5, "fistp",	1FH, 24H
_FISUB		DB 5, "fisub",	22H, 1BH
_FISUBR		DB 6, "fisubr",	2AH, 1BH
_FLD		DB 3, "fld",	0, 18H
_FLD1		DB 4, "fld1",	0E8H, 19H
_FLDCW		DB 5, "fldcw",	29H, 1CH
_FLDENV		DB 6, "fldenv",	21H, 1CH
_FLDL2E		DB 6, "fldl2e",	0EAH, 19H
_FLDL2T		DB 6, "fldl2t",	0E9H, 19H
_FLDLG2		DB 6, "fldlg2",	0ECH, 19H
_FLDLN2		DB 6, "fldln2",	0EDH, 19H
_FLDPI		DB 5, "fldpi",	0EBH, 19H
_FLDZ		DB 4, "fldz",	0EEH, 19H
_FMUL		DB 4, "fmul",	1, 23H
_FMULP		DB 5, "fmulp",	0C8H, 1AH
_FNCLEX		DB 6, "fnclex",	02H, 1EH
_FNDISI		DB 6, "fndisi",	01H, 1EH
_FNENI		DB 5, "fneni",	00H, 1EH
_FNINIT		DB 6, "fninit",	03H, 1EH
_FNOP		DB 4, "fnop",	0D0H, 19H
_FNSAVE		DB 6, "fnsave",	35H, 1CH
_FNSTENV	DB 7, "fnstenv",31H, 1CH
_FNSTCW		DB 6, "fnstcw",	39H, 1CH
_FNSTSW		DB 6, "fnstsw",	3DH, 1CH
_FPATAN		DB 6, "fpatan",	0F3H, 19H
_FPREM		DB 5, "fprem",	0F8H, 19H
_FPTAN		DB 5, "fptan",	0F2H, 19H
_FRNDINT	DB 7, "frndint",0FCH, 19H
_FRSTOR		DB 6, "frstor",	25H, 1CH
_FSAVE		DB 5, "fsave",	35H, 21H
_FSCALE		DB 6, "fscale",	0FDH, 19H
_FSQRT		DB 5, "fsqrt",	0FAH, 19H
_FST		DB 3, "fst",	11H, 1FH
_FSTCW		DB 5, "fstcw",	39H, 21H
_FSTENV		DB 6, "fstenv",	31H, 21H
_FSTP		DB 4, "fstp",	1, 18H
_FSTSW		DB 5, "fstsw",	3DH, 21H
_FSUB		DB 4, "fsub",	4, 23H
_FSUBP		DB 5, "fsubp",	0E8H, 1AH
_FSUBR		DB 5, "fsubr",	5, 23H
_FSUBRP		DB 6, "fsubrp",	0E0H, 1AH
_FTST		DB 4, "ftst",	0E4H, 19H
		DB 5, "fwait",  9BH, 0
_FXAM		DB 4, "fxam",	0E5H, 19H
_FXCH		DB 4, "fxch",	09H, 20H
_FXTRACT	DB 7, "fxtract",0F4H, 19H
_FYL2X		DB 5, "fyl2x",	0F1H, 19H
_FYL2XP1	DB 7, "fyl2xp1",0F9H, 19H
_HLT		DB 3, "hlt",	0F4H, 0
_IDIV		DB 4, "idiv",	38H, 3
_IMUL		DB 4, "imul",	28H, 3
_IN		DB 2, "in",	0E4H, 11H
_INC		DB 3, "inc",	0, 4
		DB 7, "include",0, 0FH
_INT		DB 3, "int",	0CDH, 0CH
_INTO		DB 4, "into",	0CEH, 0
_IRET		DB 4, "iret",	0CFH, 0
_JA		DB 2, "ja",	77H, 5
		DB 3, "jae",	73H, 5
		DB 2, "jb",	72H, 5
		DB 3, "jbe",	76H, 5
_JC		DB 2, "jc",	72H, 5
_JCXZ		DB 4, "jcxz",	0E3H, 5
		DB 2, "je",	74H, 5
_JG		DB 2, "jg",	7FH, 5
		DB 3, "jge",	7DH, 5
_JL		DB 2, "jl",	7CH, 5
		DB 3, "jle",	7EH, 5
_JMP		DB 3, "jmp",	20H, 6
_JNA		DB 3, "jna",	76H, 5
		DB 4, "jnae",	72H, 5
		DB 3, "jnb",	73H, 5
		DB 4, "jnbe",	77H, 5
_JNC		DB 3, "jnc",	73H, 5
		DB 3, "jne",	75H, 5
_JNG		DB 3, "jng",	7EH, 5
		DB 4, "jnge",	7CH, 5
_JNL		DB 3, "jnl",	7DH, 5
		DB 4, "jnle",	7FH, 5
_JNO		DB 3, "jno",	71H, 5
_JNP		DB 3, "jnp",	7BH, 5
_JNS		DB 3, "jns",	79H, 5
_JNZ		DB 3, "jnz",	75H, 5
_JO		DB 2, "jo",	70H, 5
_JP		DB 2, "jp",	7AH, 5
		DB 3, "jpe",	7AH, 5
		DB 3, "jpo",	7BH, 5
_JS		DB 2, "js",	78H, 5
_JZ		DB 2, "jz",	74H, 5
_LAHF		DB 4, "lahf",	9FH, 0
_LDS		DB 3, "lds",	0C5H, 8
_LEA		DB 3, "lea",	8DH, 8
_LES		DB 3, "les",	0C4H, 8
_LOCK		DB 4, "lock",	0F0H, 0AH
_LODSB		DB 5, "lodsb",	0ACH, 0
_LODSW		DB 5, "lodsw",	0ADH, 0
_LOOP		DB 4, "loop",	0E2H, 5
		DB 5, "loope",	0E1H, 5
		DB 6, "loopne",	0E0H, 5
_LOOPNZ		DB 6, "loopnz",	0E0H, 5
_LOOPZ		DB 5, "loopz",	0E1H, 5
_MOV		DB 3, "mov",	88H, 9
_MOVSB		DB 5, "movsb",	0A4H, 0
_MOVSW		DB 5, "movsw",	0A5H, 0
_MUL		DB 3, "mul",	20H, 3
_NEAR		DB 4, "near",	2, 15H
_NEG		DB 3, "neg",	18H, 3
_NOP		DB 3, "nop",	90H, 0
_NOT		DB 3, "not",	10H, 3
_OFFSET		DB 6, "offset",	0, 15H
_OR		DB 2, "or",	8, 1
		DB 3, "org",	0, 13H
_OUT		DB 3, "out",	0E6H, 11H
_POP		DB 3, "pop",	58H, 4
_POPF		DB 4, "popf",	9DH, 0
_PTR		DB 3, "ptr",	0, 15H
_PUSH		DB 4, "push",	50H, 4
_PUSHF		DB 5, "pushf",	9CH, 0
_QWORD		DB 5, "qword",	4, 15H
_RCL		DB 3, "rcl",	10H, 2
_RCR		DB 3, "rcr",	18H, 2
		DB 3, "rep",	0F3H, 0AH
		DB 4, "repe",	0F3H, 0AH
		DB 5, "repne",	0F2H, 0AH
_REPNZ		DB 5, "repnz",	0F2H, 0AH
_REPZ		DB 4, "repz",	0F3H, 0AH
_RET		DB 3, "ret",	0C3H, 0BH
_ROL		DB 3, "rol",	0, 2
_ROR		DB 3, "ror",	8, 2
_SAHF		DB 4, "sahf",	9EH, 0
_SAL		DB 3, "sal",	20H, 2
_SALC		DB 4, "salc",	0D6H, 0
_SAR		DB 3, "sar",	38H, 2
_SBB		DB 3, "sbb",	18H, 1
_SCASB		DB 5, "scasb",	0AEH, 0
_SCASW		DB 5, "scasw",	0AFH, 0
_SHL		DB 3, "shl",	20H, 2
_SHORT		DB 5, "short",	1, 15H
_SHR		DB 3, "shr",	28H, 2
_STC		DB 3, "stc",	0F9H, 0
_STD		DB 3, "std",	0FDH, 0
_STI		DB 3, "sti",	0FBH, 0
_STOSB		DB 5, "stosb",	0AAH, 0
_STOSW		DB 5, "stosw",	0ABH, 0
_SUB		DB 3, "sub",	28H, 1
_TBYTE		DB 5, "tbyte",	5, 15H
_TEST		DB 4, "test",	0, 3
_WAIT		DB 4, "wait",	9BH, 0
_WORD		DB 4, "word",	2, 15H
_XCHG		DB 4, "xchg",	86H, 10H
_XLATB		DB 5, "xlatb",	0D7H, 0
_XOR		DB 3, "xor",	30H, 1
		EVEN
BIN86		DW _ADD, MRD
		DW _ADD, MRD
		DW _ADD, RMD
		DW _ADD, RMD
		DW _ADD, ACCID
		DW _ADD, ACCID
		DW _PUSH, PSRD
		DW _POP, PSRD
		DW _OR, MRD
		DW _OR, MRD
		DW _OR, RMD
		DW _OR, RMD
		DW _OR, ACCID
		DW _OR, ACCID
		DW _PUSH, PSRD
		DW _POP, PSRD
		DW _ADC, MRD
		DW _ADC, MRD
		DW _ADC, RMD
		DW _ADC, RMD
		DW _ADC, ACCID
		DW _ADC, ACCID
		DW _PUSH, PSRD
		DW _POP, PSRD
		DW _SBB, MRD
		DW _SBB, MRD
		DW _SBB, RMD
		DW _SBB, RMD
		DW _SBB, ACCID
		DW _SBB, ACCID
		DW _PUSH, PSRD
		DW _POP, PSRD
		DW _AND, MRD
		DW _AND, MRD
		DW _AND, RMD
		DW _AND, RMD
		DW _AND, ACCID
		DW _AND, ACCID
		DW _GRP, SPREFD
		DW _DAA, SINGD
		DW _SUB, MRD
		DW _SUB, MRD
		DW _SUB, RMD
		DW _SUB, RMD
		DW _SUB, ACCID
		DW _SUB, ACCID
		DW _GRP, SPREFD
		DW _DAS, SINGD
		DW _XOR, MRD
		DW _XOR, MRD
		DW _XOR, RMD
		DW _XOR, RMD
		DW _XOR, ACCID
		DW _XOR, ACCID
		DW _GRP, SPREFD
		DW _AAA, SINGD
		DW _CMP, MRD
		DW _CMP, MRD
		DW _CMP, RMD
		DW _CMP, RMD
		DW _CMP, ACCID
		DW _CMP, ACCID
		DW _GRP, SPREFD
		DW _AAS, SINGD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _INC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _DEC, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _PUSH, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _POP, REGWD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _DB, INVD
		DW _JO, RELBD
		DW _JNO, RELBD
		DW _JC, RELBD
		DW _JNC, RELBD
		DW _JZ, RELBD
		DW _JNZ, RELBD
		DW _JNA, RELBD
		DW _JA, RELBD
		DW _JS, RELBD
		DW _JNS, RELBD
		DW _JP, RELBD
		DW _JNP, RELBD
		DW _JL, RELBD
		DW _JNL, RELBD
		DW _JNG, RELBD
		DW _JG, RELBD
		DW _GRP, G01D
		DW _GRP, G01D
		DW _GRP, G01DS
		DW _GRP, G01DS
		DW _TEST, MRD
		DW _TEST, MRD
		DW _XCHG, MRD
		DW _XCHG, MRD
		DW _MOV, MRD
		DW _MOV, MRD
		DW _MOV, RMD
		DW _MOV, RMD
		DW _MOV, MSD
		DW _LEA, RMD
		DW _MOV, SMD
		DW _POP, DISPD
		DW _NOP, SINGD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _XCHG, ACCRD
		DW _CBW, SINGD
		DW _CWD, SINGD
		DW _CALL, SEGOFD
		DW _GRP, WAITD
		DW _PUSHF, SINGD
		DW _POPF, SINGD
		DW _SAHF, SINGD
		DW _LAHF, SINGD
		DW _MOV, ACCMD
		DW _MOV, ACCMD
		DW _MOV, MACCD
		DW _MOV, MACCD
		DW _MOVSB, SINGD
		DW _MOVSW, SINGD
		DW _CMPSB, SINGD
		DW _CMPSW, SINGD
		DW _TEST, ACCID
		DW _TEST, ACCID
		DW _STOSB, SINGD
		DW _STOSW, SINGD
		DW _LODSB, SINGD
		DW _LODSW, SINGD
		DW _SCASB, SINGD
		DW _SCASW, SINGD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _MOV, RIMMD
		DW _DB, INVD
		DW _DB, INVD
		DW _RET, RETD
		DW _RET, SINGD
		DW _LES, RWMD
		DW _LDS, RMD
		DW _MOV, RMID
		DW _MOV, RMID
		DW _DB, INVD
		DW _DB, INVD
		DW _RET, RETFD
		DW _RET, RETFD
		DW _INT, INT3D
		DW _INT, INTD
		DW _INTO, SINGD
		DW _IRET, SINGD
		DW _GRP, G02D
		DW _GRP, G02D
		DW _GRP, G02D
		DW _GRP, G02D
		DW _AAM, AAMD
		DW _AAD, AAMD
		DW _SALC, SINGD
		DW _XLATB, SINGD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _GRP, ESCD
		DW _LOOPNZ, RELBD
		DW _LOOPZ, RELBD
		DW _LOOP, RELBD
		DW _JCXZ, RELBD
		DW _IN, ACCID
		DW _IN, ACCID
		DW _OUT, IBAPD
		DW _OUT, IBAPD
		DW _CALL, RELWD
		DW _JMP, RELWD
		DW _JMP, SEGOFD
		DW _JMP, RELBD
		DW _IN, ADIOD
		DW _IN, ADIOD
		DW _OUT, ADIOD
		DW _OUT, ADIOD
		DW _LOCK, SINGD
		DW _DB, INVD
		DW _REPNZ, SINGD
		DW _REPZ, SINGD
		DW _HLT, SINGD
		DW _CMC, SINGD
		DW _GRP, G03D
		DW _GRP, G03D
		DW _CLC, SINGD
		DW _STC, SINGD
		DW _CLI, SINGD
		DW _STI, SINGD
		DW _CLD, SINGD
		DW _STD, SINGD
		DW _GRP, G04D
		DW _GRP, G04D
		EVEN
BIN87		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, REGFD
		DW _FCOMP, REGFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FLDENV, DISPDD
		DW _FLDCW, DISPDD
		DW _GRP, FSD6
		DW _GRP, FSD6
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FLDENV, DISPDD
		DW _FLDCW, DISPDD
		DW _GRP, FSD6
		DW _GRP, FSD6
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FLDENV, DISPDD
		DW _FLDCW, DISPDD
		DW _GRP, FSD6
		DW _GRP, FSD6
		DW _FLD, FLDD
		DW _FXCH, REGFD
		DW _FNOP, SINGD
		DW _ESC, INVFD
		DW _GRP, SGFD
		DW _GRP, SGFD
		DW _GRP, SGFD
		DW _GRP, SGFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _ESC, INVFD
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FSTP, FLDD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _ESC, INVFD
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FSTP, FLDD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _ESC, INVFD
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FSTP, FLDD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _GRP, FEND
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _FCOM, ARIFD
		DW _FCOMP, ARIFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FADD, ARIFD
		DW _FMUL, ARIFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _FSUB, ARIFD
		DW _FSUBR, ARIFD
		DW _FDIV, ARIFD
		DW _FDIVR, ARIFD
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FRSTOR, DISPDD
		DW _ESC, INVFD
		DW _GRP, FSD7
		DW _GRP, FSD7
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FRSTOR, DISPDD
		DW _ESC, INVFD
		DW _GRP, FSD7
		DW _GRP, FSD7
		DW _FLD, FLDD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _FRSTOR, DISPDD
		DW _ESC, INVFD
		DW _GRP, FSD7
		DW _GRP, FSD7
		DW _FFREE, REGFD
		DW _ESC, INVFD
		DW _FST, FLDD
		DW _FSTP, FLDD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _FIADD, INTFD
		DW _FIMUL, INTFD
		DW _FICOM, INTFD
		DW _FICOMP, INTFD
		DW _FISUB, INTFD
		DW _FISUBR, INTFD
		DW _FIDIV, INTFD
		DW _FIDIVR, INTFD
		DW _FADDP, APFD
		DW _FMULP, APFD
		DW _ESC, INVFD
		DW _FCOMPP, APFD
		DW _FSUBRP, APFD
		DW _FSUBP, APFD
		DW _FDIVRP, APFD
		DW _FDIVP, APFD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _FBLD, DISPDD
		DW _FILD, FILDD
		DW _FBSTP, DISPDD
		DW _FISTP, FILDD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _FBLD, DISPDD
		DW _FILD, FILDD
		DW _FBSTP, DISPDD
		DW _FISTP, FILDD
		DW _FILD, FILDD
		DW _ESC, INVFD
		DW _FIST, FILDD
		DW _FISTP, FILDD
		DW _FBLD, DISPDD
		DW _FILD, FILDD
		DW _FBSTP, DISPDD
		DW _FISTP, FILDD
		DW _FFREEP, REGFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		DW _ESC, INVFD
		EVEN
RM		DB 0EH, 7, 6, 0FFH
		DB 5, 1, 3, 0FFH
		DB 4, 0, 2, 0FFH
		DB 0FFH, 0FFH, 0FFH, 0FFH
ARITB		DB 4, 4, 0CH, 0CH
		DB 0, 0, 0, 0
		DB 24H, 2CH, 2CH, 25H
		DB 34H, 3CH, 3CH, 34H
FLDTB		DB 1, 5, 2BH, 1
		DB 19H, 1DH, 3BH, 1DH
ERRM		DW EM0, EM1, EM2, EM3
		DW EM4, EM5, EM6, EM7
		DW EM8, EM9, EMA, EMB
		DW EMC, EMD
IHDL		DW G0, G1, G2, G3
		DW G4, G5, G6, G7
		DW G8, G9, G0AH, G0BH
		DW G0CH, G0DH, G0EH, G0FH
		DW G10H, G11H, G12H, G13H
		DW G14H, G15H, G16H, G17H
		DW G18H, G19H, G1AH, G1BH
		DW G1CH, G1DH, G1EH, G1FH
		DW G20H, G21H, G22H, G23H
		DW G24H
_G01D		DW _ADD, _OR, _ADC, _SBB
		DW _AND, _SUB, _XOR, _CMP
_G02D		DW _ROL, _ROR, _RCL, _RCR
		DW _SHL, _SHR, _INV, _SAR
_G03D		DW _TEST, _TEST, _NOT, _NEG
		DW _MUL, _IMUL, _DIV, _IDIV
_G04D		DW _INC, _DEC, _CALL, _CALL
		DW _JMP, _JMP, _PUSH, _INV
_SGS		DW _FCHS, _FABS, _GRP, _GRP
		DW _FTST, _FXAM, _GRP, _GRP
		DW _FLD1, _FLDL2T, _FLDL2E, _FLDPI
		DW _FLDLG2, _FLDLN2, _GRP, _GRP
		DW _F2XM1, _FYL2X, _FPTAN, _FPATAN
		DW _FXTRACT, _GRP, _FDECSTP, _FINCSTP
		DW _FPREM, _FYL2XP1, _FSQRT, _GRP
		DW _FRNDINT, _FSCALE, _GRP, _GRP
_SG5		DW _FNENI, _FNDISI, _FNCLEX, _FNINIT
		DW _FENI, _FDISI, _FCLEX, _FINIT
_SG6		DW _FNSTENV, _FNSTCW, _FSTENV, _FSTCW
_SG7		DW _FNSAVE, _FNSTSW, _FSAVE, _FSTSW
SIZES		DW _BYTE, _WORD, _DWORD, _QWORD
		DW _TBYTE
_DISP		DB 0EBH, 0FBH, 0EDH, 0FDH
		DB 0EH, 0FH, 0DH, 0BH
REGS		DB "alcldlblahchdhbh"
		DB "axcxdxbxspbpsidi"
		DB "escsssds"
_INV		DB 3, "???"
_GRP		DB 0, 0, 0
DOTASM		DB 3, "ASM"
DOTCOM		DB 3, "COM"
INM		DB 4, "In: "
OUTM		DB 5, "Out: "
EM0		DB 13, "Wrong operand"
EM1		DB 12, "Syntax error"
EM2		DB 16, "Bad displacement"
EM3		DB 24, "Unrecognised instruction"
EM4		DB 16, "Undefined symbol"
EM5		DB 21, "Jump out of range by "
EM6		DB 21, "Operand size mismatch"
EM7		DB 18, "Constant too large"
EM8		DB 15, "Missing operand"
EM9		DB 19, "Characters past end"
EMA		DB 16, "Duplicate symbol"
EMB		DB 15, "Could not open "
EMC		DB 20, "Reserved word misuse"
EMD		DB 24, "Malformed stack register"
ONLM		DB 7, ", line "
BYTEM		DB 8, " byte(s)"
ERRF		DB 8, "Errors: "
AMSG		DB "PC-72 assembler v1.03", 13, 10, 36
USAGE		DB "A72 {[/A] | /D} <in> [<out>]", 13, 10, 36
DOSERR		DB "MS-DOS 2 or later required", 13, 10, 36
PC		DW ?
USIZE		DW ?
ERRS		DW ?
VORG		DW ?
FUNC		DB ?, ?
STK		DW ?, ?
FLAGS		DB ?
WADJ		DB ?, ?
ARGS		DB ?, ?, ?
PREFIX		DB ?
FPREF		DB ?
SEGPREF		DB ?
OPCODE		DB ?
MODRM		DB ?
DISP		DW ?
IMM		DW ?
INFILE		DS 30H
OUTFILE		DS 30H
OUTBUF		DS 80H
INCLEV		DS 200H
TEMP		DS 80H
ELEMENT		DS 80H
INPUT		DS 80H
OUTPUT		DS 80H
SYMBS		DS 2000H

		CALL OPENF
		JNC MAIN
		RET
MAIN:		XOR AX, AX
		MOV [INPUT], AL
		MOV [OUTPUT], AL
		MOV [COUNT], AX
		MOV [COUNT+2], AX
		TEST BYTE PTR [FUNC], 1
		JNZ ENCODE
DECODE:		MOV CL, 0FCH
		CALL READF
		JZ OVER
		MOV SI, OFFSET INPUT
		MOV DI, OFFSET OUTPUT
		CALL B64DEC
		JNC NERR
		CALL DFAIL
NERR:		MOV SI, OFFSET OUTPUT
		MOV BX, [OUTHDL]
		CALL FWLT
		JMP SHORT DECODE
ENCODE:		MOV CL, 150
		CALL READF
		JZ OVER
		MOV SI, OFFSET INPUT
		MOV DI, OFFSET OUTPUT
		CALL B64ENC
		MOV SI, OFFSET OUTPUT
		MOV BX, [OUTHDL]
		CALL FWLT
		JMP SHORT ENCODE
OVER:		CALL CLOSF
		RET
B64ENC:		CLD
		LODSB
		MOV BX, OFFSET B64TAB
		XOR CH, CH
		MOV CL, AL
		ADD CX, SI
		PUSH DI
		INC DI
B64ENL:		LODSB
		ROR AL, 1
		ROR AL, 1
		MOV AH, AL
		ROR AH, 1
		ROR AH, 1
		AND AX, 303FH
		XLATB
		STOSB
		CMP SI, CX
		JNC PAD2
		LODSB
		ROL AL, 1
		ROL AL, 1
		PUSH AX
		ROL AL, 1
		ROL AL, 1
		AND AL, 0FH
		OR AL, AH
		XLATB
		STOSB
		POP AX
		AND AL, 3CH
		CMP SI, CX
		JNC PAD1
		MOV AH, AL
		LODSB
		PUSH AX
		ROL AL, 1
		ROL AL, 1
		AND AL, 3
		OR AL, AH
		XLATB
		STOSB
		POP AX
		AND AL, 3FH
		XLATB
		STOSB
		CMP SI, CX
		JNC PAD0
		JMP SHORT B64ENL
PAD2:		MOV AL, AH
		XLATB
		STOSB
		MOV AX, 3D3DH
		STOSW
		JMP SHORT PAD0
PAD1:		XLATB
		STOSB
		MOV AL, 3DH
		STOSB
PAD0:		MOV AX, DI
		POP DI
		SUB AX, DI
		DEC AX
		STOSB
		RET
B64DEC:		CLD
		LODSB
		XOR CH, CH
		MOV CL, AL
		ADD CX, SI
		PUSH DI
		INC DI
B64DEL:		LODSB
		CMP AL, 3DH
		JZ NPAD3
		CALL REV64
		JC NPAD3
		MOV AH, AL
		CMP SI, CX
		JNC NPAD3
		LODSB
		CMP AL, 3DH
		JZ NPAD3
		CALL REV64
		JC NPAD3
		ROL AL, 1
		ROL AL, 1
		ROL AX, 1
		ROL AX, 1
		XCHG AL, AH
		STOSB
		CMP SI, CX
		JNC NPAD2
		LODSB
		CMP AL, 3DH
		JZ NPAD2
		CALL REV64
		JC NPAD3
		PUSH AX
		SHR AL, 1
		SHR AL, 1
		OR AL, AH
		STOSB
		POP AX
		XOR AH, AH
		ROR AX, 1
		ROR AX, 1
		CMP SI, CX
		JNC NPAD2
		LODSB
		CMP AL, 3DH
		JZ NPAD2
		CALL REV64
		JC NPAD3
		OR AL, AH
		STOSB
		CMP SI, CX
		JC B64DEL
		JMP SHORT NPAD0
NPAD2:		OR AH, AH
		JZ NPAD0
NPAD3:		POP DI
		STC
		RET
NPAD0:		MOV AX, DI
		POP DI
		SUB AX, DI
		DEC AX
		STOSB
		CLC
		RET
REV64:		PUSH CX
		PUSH DI
		MOV CX, 40H
		MOV DI, OFFSET B64TAB+3FH
		STD
	REPNZ	SCASB
		CLD
		JNZ REV64F
		MOV AL, CL
		POP DI
		POP CX
		CLC
		RET
REV64F:		POP DI
		POP CX
		STC
		RET
DFAIL:		PUSH SI
		MOV AX, OFFSET DECERR
		XCHG AX, SI
		MOV DI, 80H
		CALL WRM
		SUB AX, OFFSET INPUT+1
		MOV DX, [COUNT+2]
		ADD AX, [COUNT]
		ADC DX, 0
		PUSH AX
		MOV AL, DH
		CALL HALX
		STOSW
		MOV AL, DL
		CALL HALX
		STOSW
		POP AX
		PUSH AX
		MOV AL, AH
		CALL HALX
		STOSW
		POP AX
		CALL HALX
		STOSW
		CALL FINAL
		POP SI
		RET
READF:		XOR DX, DX
		XOR AH, AH
		MOV AL, [INPUT]
		ADD [COUNT], AX
		ADC [COUNT+2], DX
		MOV AH, 3FH
		XOR CH, CH
		MOV DX, OFFSET INPUT+1
		MOV BX, [INHDL]
		INT 21H
		MOV [INPUT], AL
		OR AL, AL
		RET
OPENF:		MOV SI, 81H
		MOV DI, OFFSET INFILE
		CALL GETFN
		JZ NOPE
		MOV AX, [INFILE+1]
		MOV [FUNC], AH
		CMP AX, 442FH
		JZ GETF
		CMP AX, 452FH
		JZ GETF
		MOV BYTE PTR [FUNC], 45H
		JMP SHORT GETF1
GETF:		MOV DI, OFFSET INFILE
		CALL GETFN
		JZ NOPE
GETF1:		MOV DI, OFFSET OUTFILE
		CALL GETFN
		JZ NOPE
		MOV SI, OFFSET INFILE
		CALL PREPF
		MOV SI, OFFSET OUTFILE
		CALL PREPF
		MOV AX, 3D00H
		MOV DX, OFFSET INFILE+1
		INT 21H
		JC FAIL
		MOV [INHDL], AX
		MOV SI, OFFSET OUTFILE
		MOV AH, 3CH
		XOR CX, CX
		MOV DX, OFFSET OUTFILE+1
		INT 21H
		JNC OK
		MOV AH, 3EH
		MOV BX, [INHDL]
		INT 21H
FAIL:		PUSH SI
		MOV DI, 80H
		MOV SI, OFFSET FILERR
		CALL WRM
		POP SI
		CALL FINAL
		STC
		RET
NOPE:		MOV AH, 9
		MOV DX, OFFSET USAGE
		INT 21H
		STC
		RET
OK:		MOV [OUTHDL], AX
		MOV SI, OFFSET INM
		MOV DI, 80H
		CALL WRM
		MOV SI, OFFSET INFILE
FINAL:		CALL WRM
		MOV AX, 0A0DH
		STOSW
		MOV AL, 24H
		STOSB
		MOV AH, 9
		MOV DX, 80H
		INT 21H
		CLC
		RET
GETFN:		XOR DX, DX
		PUSH DI
		INC DI
		CLD
GETFN1:		LODSB
		CMP AL, 0DH
		JZ GETFN0
		CMP AL, 20H
		JNA GETFN2
		CMP AL, 61H
		JC GETFN3
		CMP AL, 7AH
		JA GETFN3
		AND AL, 0DFH
GETFN3:		INC DX
		STOSB
		JMP SHORT GETFN1
GETFN2:		OR DX, DX
		JZ GETFN1
GETFN0:		DEC SI
		POP DI
		MOV [DI], DL
		OR DX, DX
		RET
PREPF:		XOR AH, AH
		CLD
		LODSB
		ADD SI, AX
		MOV [SI], AH
		RET
FWLT:		PUSH AX
		PUSH CX
		PUSH DX
		PUSH BX
		MOV AH, 40H
		MOV CL, [SI]
		XOR CH, CH
		MOV DX, SI
		INC DX
		INT 21H
		POP BX
		POP DX
		POP CX
		POP AX
		RET
CLOSF:		MOV SI, OFFSET OUTM
		MOV DI, 80H
		CALL WRM
		MOV SI, OFFSET OUTFILE
		CALL FINAL
		MOV AH, 3EH
		MOV BX, [INHDL]
		INT 21H
		MOV AH, 3EH
		MOV BX, [OUTHDL]
		INT 21H
		RET
HALX:		MOV AH, AL
		AND AL, 0FH
		SHR AH, 1
		SHR AH, 1
		SHR AH, 1
		SHR AH, 1
		CMP AL, 9
		JNA HALX1
		ADD AL, 7
HALX1:		XCHG AH, AL
		CMP AL, 9
		JNA HALX2
		ADD AL, 7
HALX2:		ADD AX, 3030H
		RET
WRM:		MOV CL, [SI]
		XOR CH, CH
		INC SI
		CLD
	REPZ	MOVSB
		RET
B64TAB		DB "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		DB "abcdefghijklmnopqrstuvwxyz"
		DB "0123456789+/"
; Experimental
;B64TAB		DB 32, 33, 34, 35, 36, 37, 38, 39
;		DB 40, 41, 42, 43, 44, 45, 46, 47
;		DB 48, 49, 50, 51, 52, 53, 54, 55
;		DB 56, 57, 58, 59, 09, 10, 13, 63
;		DB 64, 65, 66, 67, 68, 69, 70, 71
;		DB 72, 73, 74, 75, 76, 77, 78, 79
;		DB 80, 81, 82, 83, 84, 85, 86, 87
;		DB 88, 89, 90, 91, 92, 93, 94, 95
INM		DB 4, "In: "
OUTM		DB 5, "Out: "
FILERR		DB 17, "Unable to access "
DECERR		DB 24, "Error in data stream at "
USAGE		DB "BASE64 {[/E] | /D} <in> <out>"
		DB 13, 10, 36
FUNC		DB ?
COUNT		DW ?, ?
INHDL		DW ?
OUTHDL		DW ?
INFILE		DS 40H
OUTFILE		DS 40H
INPUT		DS 100H
OUTPUT		DS 100H

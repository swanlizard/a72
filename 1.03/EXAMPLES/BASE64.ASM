		XOR AX, AX
		MOV [INPUT], AL
		MOV [OUTPUT], AL
		MOV [COUNT], AX
		MOV [COUNT+1], AX
		MOV SI, 80H
		CLD
		LODSB
		MOV CX, AX
		ADD CX, SI
		MOV DI, OFFSET INFN
		CALL GETFN
		JC CMDL0
		MOV AX, [INFN]
		MOV DX, AX
		CMP AX, 442FH
		JZ GETF
		CMP AX, 452FH
		JZ GETF
		MOV DX, 452FH
		JMP SHORT GETF1
CMDL0:		MOV AH, 9
		MOV DX, OFFSET USAGE
		INT 21H
		RET
GETF:		MOV DI, OFFSET INFN
		CALL GETFN
		JC CMDL0
GETF1:		MOV DI, OFFSET OUTFN
		CALL GETFN
		JC CMDL0
		PUSH DX
		MOV AH, 3CH
		XOR CX, CX
		MOV DX, OFFSET OUTFN
		INT 21H
		POP DX
		JC OUTERR
		MOV [OUTFILE], AX
		PUSH DX
		MOV AX, 3D00H
		MOV DX, OFFSET INFN
		INT 21H
		POP DX
		JC INERR
		MOV [INFILE], AX
		PUSH DX
		MOV AH, 9
		MOV DX, OFFSET INM
		INT 21H
		MOV SI, OFFSET INFN
		CALL OUTF
		POP DX
		AND DH, 1
		JNZ ENCODE
DECODE:		MOV CL, 0FCH
		CALL READF
		JC BOTH
		JZ CLOSFS
		MOV SI, OFFSET INPUT
		MOV DI, OFFSET OUTPUT
		CALL B64DEC
		JNC NERR
		CALL FAIL
NERR:		CALL WRITEF
		JMP SHORT DECODE
ENCODE:		MOV CL, 150
		CALL READF
		JC BOTH
		JZ CLOSFS
		MOV SI, OFFSET INPUT
		MOV DI, OFFSET OUTPUT
		CALL B64ENC
		CALL WRITEF
		JMP SHORT ENCODE
BOTH:		CALL CLOSF
		JMP SHORT OUTERR
INERR:		CALL CLOSF1
OUTERR:		MOV AH, 9
		MOV DX, OFFSET ERRF
		INT 21H
		RET
CLOSFS:		MOV AH, 9
		MOV DX, OFFSET OUTM
		INT 21H
		MOV SI, OFFSET OUTFN
		CALL OUTF
CLOSF:		MOV AH, 3EH
		MOV BX, [INFILE]
		INT 21H
CLOSF1:		MOV AH, 3EH
		MOV BX, [OUTFILE]
		INT 21H
		RET
B64ENC:		CLD
		LODSB
		MOV BX, OFFSET B64TAB
		XOR CH, CH
		MOV CL, AL
		ADD CX, SI
		PUSH DI
		INC DI
B64ENL:		LODSB
		ROR AL, 1
		ROR AL, 1
		MOV AH, AL
		ROR AH, 1
		ROR AH, 1
		AND AX, 303FH
		XLATB
		STOSB
		CMP SI, CX
		JNC PAD2
		LODSB
		ROL AL, 1
		ROL AL, 1
		PUSH AX
		ROL AL, 1
		ROL AL, 1
		AND AL, 0FH
		OR AL, AH
		XLATB
		STOSB
		POP AX
		AND AL, 3CH
		CMP SI, CX
		JNC PAD1
		MOV AH, AL
		LODSB
		PUSH AX
		ROL AL, 1
		ROL AL, 1
		AND AL, 3
		OR AL, AH
		XLATB
		STOSB
		POP AX
		AND AL, 3FH
		XLATB
		STOSB
		CMP SI, CX
		JNC PAD0
		JMP SHORT B64ENL
PAD2:		MOV AL, AH
		XLATB
		STOSB
		MOV AX, 3D3DH
		STOSW
		JMP SHORT PAD0
PAD1:		XLATB
		STOSB
		MOV AL, 3DH
		STOSB
PAD0:		MOV AX, DI
		POP DI
		SUB AX, DI
		DEC AX
		STOSB
		RET
B64DEC:		CLD
		LODSB
		XOR CH, CH
		MOV CL, AL
		ADD CX, SI
		PUSH DI
		INC DI
B64DEL:		LODSB
		CMP AL, 3DH
		JZ NPAD3
		CALL REV64
		JC NPAD3
		MOV AH, AL
		CMP SI, CX
		JNC NPAD3
		LODSB
		CMP AL, 3DH
		JZ NPAD3
		CALL REV64
		JC NPAD3
		ROL AL, 1
		ROL AL, 1
		ROL AX, 1
		ROL AX, 1
		XCHG AL, AH
		STOSB
		CMP SI, CX
		JNC NPAD2
		LODSB
		CMP AL, 3DH
		JZ NPAD2
		CALL REV64
		JC NPAD3
		PUSH AX
		SHR AL, 1
		SHR AL, 1
		OR AL, AH
		STOSB
		POP AX
		XOR AH, AH
		ROR AX, 1
		ROR AX, 1
		CMP SI, CX
		JNC NPAD2
		LODSB
		CMP AL, 3DH
		JZ NPAD2
		CALL REV64
		JC NPAD3
		OR AL, AH
		STOSB
		CMP SI, CX
		JC B64DEL
		JMP SHORT NPAD0
NPAD2:		OR AH, AH
		JZ NPAD0
NPAD3:		POP DI
		STC
		RET
NPAD0:		MOV AX, DI
		POP DI
		SUB AX, DI
		DEC AX
		STOSB
		CLC
		RET
REV64:		PUSH CX
		PUSH DI
		MOV CX, 40H
		MOV DI, OFFSET B64TAB+3FH
		STD
	REPNZ	SCASB
		CLD
		JNZ REV64F
		MOV AL, CL
		POP DI
		POP CX
		CLC
		RET
REV64F:		POP DI
		POP CX
		STC
		RET
FAIL:		MOV AX, SI
		SUB AX, OFFSET INPUT+2
		MOV DX, [COUNT+2]
		ADD AX, [COUNT]
		ADC DX, 0
		MOV DI, OFFSET ERRN
		CLD
		PUSH AX
		MOV AL, DH
		CALL HALX
		MOV AL, DL
		CALL HALX
		MOV AL, AH
		CALL HALX
		POP AX
		CALL HALX
		MOV AX, 0A0DH
		STOSW
		MOV AL, 24H
		STOSB
		MOV AH, 9
		MOV DX, OFFSET ERRM
		INT 21H
		RET
READF:		XOR DX, DX
		XOR AH, AH
		MOV AL, [INPUT]
		ADD [COUNT], AX
		ADC [COUNT+2], DX
		MOV AH, 3FH
		XOR CH, CH
		MOV DX, OFFSET INPUT+1
		MOV BX, [INFILE]
		INT 21H
		JC READF0
		MOV [INPUT], AL
		CLC
		OR AL, AL
READF0:		RET
WRITEF:		MOV AH, 40H
		MOV CL, [OUTPUT]
		XOR CH, CH
		MOV DX, OFFSET OUTPUT+1
		MOV BX, [OUTFILE]
		INT 21H
		RET
		INCLUDE GETFN.
		INCLUDE HALX.
		INCLUDE OUTF.
B64TAB		DB "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
		DB "abcdefghijklmnopqrstuvwxyz"
		DB "0123456789+/"
INM		DB "In: $"
OUTM		DB "Out: $"
USAGE		DB "BASE64 {[/E] | /D} <in> <out>", 13, 10, 36
ERRF		DB "File I/O error", 13, 10, 36
ERRM		DB "Error in data stream at "
ERRN		DS 10H
COUNT		DW ?, ?
INFILE		DW ?
OUTFILE		DW ?
INFN		DS 80H
OUTFN		DS 80H
INPUT		DS 100H
OUTPUT		DS 100H

		XOR AX, AX
		MOV [CHK], AX
		MOV [STAK], AX
		CALL OPENF
		JNC RDDA
		INT 20H
RDDA:		MOV AH, 3FH
		MOV CX, 80H
		MOV DX, 80H
		MOV BX, [INHDL]
		INT 21H
		OR AX, AX
		JZ RDDE
		ADD [SIZE], AX
		ADC WORD PTR [SIZE+2], 0
		MOV CX, AX
		CLC
		RCR CL, 1
		ADC CL, 0
		MOV SI, 80H
		ADD AX, SI
		MOV DI, AX
		XOR AL, AL
		CLD
		STOSB
RDDAL:		LODSW
		ADD [CHK], AX
		LOOP RDDAL
		JMP SHORT RDDA
RDDE:		MOV AX, [EXTRA]
		ADD AX, [SIZE]
		ADD AX, 100H
		MOV [STACKP], AX
		MOV AX, [EXTRA]
		CLC
		RCR AX, 1
		PUSHF
		SHR AX, 1
		SHR AX, 1
		SHR AX, 1
		POPF
		ADC AX, 0
		MOV [EXTRA], AX
		ADD WORD PTR [SIZE], 20H
		ADC WORD PTR [SIZE+1], 0
		MOV AX, [SIZE+1]
		SHR AX, 1
		MOV [SIZE+2], AX
		MOV AX, [SIZE]
		AND AX, 1FFH
		JZ NOPG
		INC WORD PTR [SIZE+2]
NOPG:		MOV [SIZE], AX
		MOV SI, OFFSET EXEHDR
		MOV CX, 10H
ADDHDR:		LODSW
		ADD [CHK], AX
		LOOP ADDHDR
		MOV AX, [CHK]
		NEG AX
		MOV [CHKSUM], AX
		MOV AX, 4200H
		XOR CX, CX
		XOR DX, DX
		MOV BX, [INHDL]
		INT 21H
		MOV AH, 40H
		MOV CX, 20H
		MOV DX, OFFSET EXEHDR
		MOV BX, [OUTHDL]
		INT 21H
WRL:		MOV AH, 3FH
		MOV CX, 80H
		MOV DX, 80H
		MOV BX, [INHDL]
		INT 21H
		PUSH AX
		MOV CX, AX
		MOV AH, 40H
		MOV DX, 80H
		MOV BX, [OUTHDL]
		INT 21H
		POP AX
		OR AX, AX
		JNZ WRL
		CALL CLOSF
		INT 20H
OPENF:		MOV SI, 81H
		MOV DI, OFFSET INFILE
		CALL GETFN
		JZ NOPE
		PUSH SI
		MOV DI, OFFSET OUTFILE
		CALL GETFN
		JZ NOTGOT
		CMP WORD PTR [OUTFILE], 2D02H
		JZ NOTGOT
		POP AX
		PUSH SI
		JMP SHORT GOTOUT
NOPE:		MOV AH, 9
		MOV DX, OFFSET USAGE
		INT 21H
		STC
		RET
NOTGOT:		MOV SI, OFFSET INFILE
		MOV DI, OFFSET OUTFILE
		MOV AL, [INFILE]
		CLD
		STOSB
		CALL WRM
		MOV DI, OFFSET OUTFILE
		STC
		CALL ADDEXT
GOTOUT:		MOV SI, OFFSET DOTCOM
		MOV DI, OFFSET INFILE
		CLC
		CALL ADDEXT
		MOV SI, OFFSET DOTEXE
		MOV DI, OFFSET OUTFILE
		CLC
		CALL ADDEXT
		MOV SI, OFFSET INFILE
		CALL PREPF
		MOV SI, OFFSET OUTFILE
		CALL PREPF
		POP SI
		CALL PARAM
		JC NOPE
		MOV AX, 3D00H
		MOV DX, OFFSET INFILE+1
		INT 21H
		JC FAIL
		MOV [INHDL], AX
		MOV SI, OFFSET OUTFILE
		MOV AH, 3CH
		XOR CX, CX
		MOV DX, OFFSET OUTFILE+1
		INT 21H
		JNC OK
		MOV AH, 3EH
		MOV BX, [INHDL]
		INT 21H
FAIL:		PUSH SI
		MOV DI, 80H
		MOV SI, OFFSET FILERR
		CALL WRM
		POP SI
		CALL FINAL
		STC
		RET
OK:		MOV [OUTHDL], AX
		MOV SI, OFFSET INM
		MOV DI, 80H
		CALL WRM
		MOV SI, OFFSET INFILE
FINAL:		CALL WRM
		MOV AX, 0A0DH
		STOSW
		MOV AL, 24H
		STOSB
		MOV AH, 9
		MOV DX, 80H
		INT 21H
		CLC
		RET
PARAM:		MOV DI, OFFSET BUFFER
		CALL GETFN
		JZ PARAME
		MOV AX, [BUFFER+1]
		CMP AX, 442DH
		JZ PDATA
		CMP AX, 532DH
		JZ PSTACK
		CMP AX, 492DH
		JZ PSIG
PARAM0:		STC
		RET
PDATA:		CALL GETVAL
		JC PARAM0
		MOV [EXTRA], AX
		JMP SHORT PARAM
PSTACK:		CALL GETVAL
		JC PARAM0
		MOV [STAK], AX
		JMP SHORT PARAM
PSIG:		MOV DI, OFFSET BUFFER
		LODSB
		OR AL, AL
		JZ PARAM0
		CMP AL, 0DH
		JZ PARAM0
		CMP AL, 20H
		JNA PSIG
		XOR CX, CX
		CMP AL, 22H
		JZ PARAMQ
		CMP AL, 27H
		JNZ PARAM0
PARAMQ:		LODSB
		CMP AL, 22H
		JZ PARAMS
		CMP AL, 27H
		JZ PARAMS
		STOSB
		INC CX
		JMP SHORT PARAMQ
PARAMS:		CMP CL, 4
		JNA PARAMD
		MOV CX, 4
PARAMD:		PUSH SI
		MOV SI, OFFSET BUFFER
		MOV DI, OFFSET SIGN
	REPZ	MOVSB
		POP SI
		JMP SHORT PARAM
PARAME:		MOV AX, [STAK]
		OR AX, AX
		JNZ PARAM1
		MOV AX, 100H
PARAM1:		ADD [EXTRA], AX
		CLC
		RET
GETVAL:		MOV DI, OFFSET BUFFER
		CALL GETFN
		JZ GETVAL0
		XOR BH, BH
		MOV BL, [BUFFER]
		PUSH SI
		MOV SI, OFFSET BUFFER+1
		MOV AL, [SI]
		CALL VAL
		POP SI
		RET
GETVAL0:	STC
		RET
GETFN:		XOR DX, DX
		PUSH DI
		INC DI
		CLD
GETFN1:		LODSB
		CMP AL, 0DH
		JZ GETFN0
		CMP AL, 20H
		JNA GETFN2
		CMP AL, 61H
		JC GETFN3
		CMP AL, 7AH
		JA GETFN3
		AND AL, 0DFH
GETFN3:		INC DX
		STOSB
		JMP SHORT GETFN1
GETFN2:		OR DX, DX
		JZ GETFN1
GETFN0:		DEC SI
		POP DI
		MOV [DI], DL
		OR DX, DX
		RET
ADDEXT:		LAHF
		CLD
		MOV BP, DI
		XOR CH, CH
		MOV CL, [DI]
		INC DI
		MOV AL, 2EH
	REPNZ	SCASB
		JNZ ADDXT2
		SAHF
		JNC ADDXT0
		DEC DI
ADDXT2:		SAHF
		JC ADDXT1
		STOSB
		CALL WRM
ADDXT1:		MOV AX, DI
		SUB AX, BP
		DEC AX
		MOV DI, BP
		STOSB
ADDXT0:		RET
PREPF:		XOR AH, AH
		CLD
		LODSB
		ADD SI, AX
		MOV [SI], AH
		RET
CLOSF:		MOV SI, OFFSET OUTM
		MOV DI, 80H
		CALL WRM
		MOV SI, OFFSET OUTFILE
		CALL FINAL
		MOV AH, 3EH
		MOV BX, [INHDL]
		INT 21H
		MOV AH, 3EH
		MOV BX, [OUTHDL]
		INT 21H
		RET
WRM:		MOV CL, [SI]
		XOR CH, CH
		INC SI
		CLD
	REPZ	MOVSB
		RET
VAL:		OR BX, BX
		JZ VAL9
		CMP AL, 30H
		JC VAL9
		CMP AL, 39H
		JA VAL9
		CMP BX, 1
		JA VAL1
		XOR AH, AH
		SUB AL, 30H
		INC SI
		CLC
		RET
VAL1:		CLD
		PUSH CX
		PUSH DX
		PUSH BX
		PUSH SI
		MOV CX, BX
		XOR DX, DX
		DEC BX
		MOV AL, [BX+SI]
		MOV BL, 10
		CMP AL, 48
		JC VAL0
		CMP AL, 57
		JNA VAL5
		AND AL, 0DFH
		MOV BL, 16
		DEC CX
		CMP AL, 72
		JZ VAL5
		CMP AL, 79
		JZ VAL8
		CMP AL, 81
		JZ VAL4
		CMP AL, 66
		JZ VAL2
VAL0:		XOR AX, AX
		POP SI
		POP BX
		POP DX
		POP CX
VAL9:		STC
		RET
VAL2:		SHR BX, 1
VAL4:		SHR BX, 1
VAL8:		SHR BX, 1
VAL5:		OR DX, DX
		JZ VAL6
		MOV AX, DX
		MUL BX
		MOV DX, AX
VAL6:		LODSB
		CMP AL, 48
		JC VAL0
		CMP AL, 57
		JNA VAL7
		AND AL, 0DFH
		SUB AL, 7
VAL7:		SUB AL, 48
		XOR AH, AH
		ADD DX, AX
		LOOP VAL5
		MOV AX, DX
		POP SI
		POP BX
		ADD SI, BX
		POP DX
		POP CX
		CLC
		RET
EXEHDR		DW 5A4DH
SIZE		DW 0, 0, 0, 2
EXTRA		DW 0, 0FFFFH, 0FFF0H
STACKP		DW 0
CHKSUM		DW 0
		DW 100H, 0FFF0H, 1CH, 0
SIGN		DW 0, 0
DOTCOM		DB 3, "COM"
DOTEXE		DB 3, "EXE"
INM		DB 4, "In: "
OUTM		DB 5, "Out: "
FILERR		DB 17, "Unable to access "
USAGE		DB "WREXE <in>[.COM] [<out>[.EXE]] "
		DB '[-D <data>] [-S <stack>] [-I "<signature>"]'
		DB 13, 10, 36
STAK		DW ?
CHK		DW ?
INHDL		DW ?
OUTHDL		DW ?
INFILE		DS 40H
OUTFILE		DS 40H
BUFFER:

; --------------------------------
; R-ASSEMBLER VERSION 1.05C
PCCHAR	EQU	24H
DEFORG	EQU	100H
DEFPAG	EQU	50
INFN	EQU	VARS+40H
OUTFN	EQU	VARS+60H
LSTFN	EQU	VARS+80H
SYMFN	EQU	VARS+0A0H
DEFFN	EQU	VARS+0C0H

; ASSEMBLER MODULE VARIABLES
FUNC	EQU	VARS
TXTLEN	EQU	VARS+2
BINLEN	EQU	VARS+4
PC	EQU	VARS+6
VORG	EQU	VARS+8
USIZE	EQU	VARS+0AH
STK	EQU	VARS+0CH
WADJ	EQU	VARS+10H
PREFIX	EQU	VARS+12H
SEGPRE	EQU	VARS+13H
OPCODE	EQU	VARS+14H
MODRM	EQU	VARS+15H
DISP	EQU	VARS+16H
IMM	EQU	VARS+18H
FLAGS	EQU	VARS+1AH
SYMFLG	EQU	VARS+1BH
ARGS	EQU	VARS+1CH
SIZES	EQU	VARS+1EH

; SYSTEM INTERFACE VARIABLES
OUTHDL	EQU	VARS+20H
LSTHDL	EQU	VARS+22H
SYMHDL	EQU	VARS+24H
INCLEV	EQU	VARS+26H
PASS	EQU	VARS+28H
OLDPC	EQU	VARS+2AH
ERRORS	EQU	VARS+2CH
PAGNUM	EQU	VARS+2EH
LSTLIN	EQU	VARS+30H
LSTWID	EQU	VARS+32H
	ORG	100H

; --------------------------------
; DISPLAY PROGRAM MESSAGE AND
; CHECK DOS VERSION
START:	MOV	AH,9
	MOV	DX,AMSG
	INT	21H
	MOV	AH,30H
	INT	21H
	TEST	AL,AL
	JNZ	MAIN

; 2.0 OR HIGHER REQUIRED FOR
; FILE HANDLES
	MOV	AH,9
	MOV	DX,DOSERR
	INT	21H
	INT	20H

; COMMAND LINE PARAMETER ERROR
; NOT SUPER SERIOUS, SO ERROR
; CODE 0
ERROR:	MOV	AH,9
	INT	21H
	MOV	AX,4C00H
	INT	21H

; BLANK ALL TEMPORARY VARIABLES
; AND STORAGE BUFFERS
MAIN:	XOR	AX,AX
	MOV	DI,TXTBUF
	MOV	CX,SYMBS-TXTBUF+3
	CLD
	REP STOSB

; START LISTING ON PAGE ONE
	INC	AX
	MOV	[PAGNUM],AX
	MOV	[SYMBS],AX

; FIRST SYMBOL RESERVED FOR
; LOAD ADDRESS
	MOV	AX,DEFORG
	MOV	[SYMBS+3],AX
	MOV	[VORG],AX

; START READING COMMAND LINE
	MOV	SI,82H
	CALL	PARAM
	JC	ERROR
	CALL	OPEN
	JC	BAH
	PUSH	WORD [FUNC]

; SIMPLE TWO-PASS STRUCTURE
RUN:	MOV	DI,TEMP
	MOV	SI,PASSM
	CALL	WRM
	MOV	AX,[PASS]
	INC	AX
	MOV	[PASS],AX
	MOV	CX,10
	CALL	WN
	CALL	PRUNT
	CALL	PROCF
	JC	BAH

; IF ERRORS WERE ENCOUNTERED,
; ABORT FURTHER ASSEMBLY UNTIL
; CORRECTED
	MOV	AX,[ERRORS]
	TEST	AX,AX
	JNZ	HUMBUG

; FUNC GETS PROGRESSIVELY BLANKED
; BUT SINCE THERE'S ONLY TWO
; BYTES, ONLY TWO PASSES WILL
; BE EXECUTED.  MODIFYING THIS
; FOR A MULTI-PASS STRUCTURE
; COULD BE DONE WITH A DEDICATED
; FUNC BUFFER
	MOV	AX,[FUNC]
	XOR	AL,AL
	XCHG	AL,AH
	MOV	[FUNC],AX
	TEST	AL,AL
	JNZ	RUN
	POP	WORD [FUNC]
	CALL	UDDUMP
	CALL	SYMDMP
	XOR	AL,AL
	JMP	SHORT CLOSE

; ERROR CODE 1 FOR ERRORS WITH
; FILE I/O
BAH:	MOV	AL,1
	JMP	SHORT CLOSE

; ERROR CODE 2 FOR ERRORS IN
; THE PROGRAM
HUMBUG:	MOV	AL,2

; --------------------------------
; CLOSE ALL OPEN FILES AND
; ANNOUNCE WHICH ONES WERE
; PRODUCED
CLOSE:	MOV	AH,4CH
	PUSH	AX
	CALL	CALF
	MOV	AH,3EH
	MOV	BX,[SI]
	INT	21H
	MOV	DI,TEMP
	MOV	SI,OUTM
	CALL	WRM

; FLAG BY FLAG
	MOV	CX,1010H
	MOV	SI,OUTFN
	MOV	BX,[OUTHDL]
	CALL	CLOSF
	MOV	CX,2020H
	MOV	SI,LSTFN
	MOV	BX,[LSTHDL]
	CALL	CLOSF
	MOV	CX,4040H
	MOV	SI,SYMFN
	MOV	BX,[SYMHDL]
	CALL	CLOSF

; DO NOT ANNOUNCE OUTPUT FILES
; IF THERE ARE NONE
	OR	WORD [ERRORS],0
	JNZ	CLOSE1
	CALL	PRUNT
CLOSE1:	POP	AX
	INT	21H
CLOSF:	TEST	[FUNC],CX
	JZ	CLOSF1
	CALL	WRM
	MOV	AL,20H
	STOSB
	MOV	AH,3EH
	INT	21H
CLOSF1:	RET

; THE ENTRY POINT FOR THIS IS A
; FALLTHROUGH FURTHER AHEAD; THIS
; PART SPECIFIES THE WRITTEN LOAD
; ADDRESS FOR DISASSEMBLY
PARAO:	CALL	CC
	JZ	PARANO
	PUSH	DI
	CALL	RNC
	POP	DI
	JC	PARANO
	MOV	[DI],DX
	JMP	SHORT PARAM

; TEST IF BUFFER HOLDS FILESPEC
; WRITE NAME IF NOT; COMPLAIN IF
; IT DOES
PARAWF:	MOV	AL,[DI]
	TEST	AL,AL
	JNZ	PARARG
	MOV	DX,SI
	CALL	WFN

; ALSO SAVE THE FIRST DETECTED
; FILESPEC AS DEFAULT FILE NAME
	MOV	AL,[DEFFN]
	TEST	AL,AL
	JNZ	PARAM
	PUSH	SI
	MOV	SI,DX
	MOV	DI,DEFFN
	CALL	WFN
	MOV	SI,DEFFN

; WITHOUT AN EXTENSION
	STC
	CALL	ADDEX
	POP	SI

; --------------------------------
; PROCESS COMMAND LINE AND SET
; FUNCTION AND FILE FLAGS
PARAM:	MOV	DI,INFN
	JMP	SHORT PARAG
PARASC:	MOV	DI,VORG
	CMP	AL,"O"
	JE	PARAO
	MOV	DI,LSTWID
	CMP	AL,"W"
	JE	PARAO

; SET REQUESTED FUNCTION CODES
; AND FILE NAME BUFFER FOR GIVEN
; SWITCH AND BRANCH TO CONFIRM
	MOV	DX,1201H
	MOV	DI,OUTFN
	CMP	AL,"A"
	JE	PARAFN
	MOV	DX,90H
	CMP	AL,"D"
	JE	PARAFN
	MOV	DX,2201H
	MOV	DI,LSTFN
	CMP	AL,"L"
	JE	PARAFN
	MOV	DX,0A0H
	CMP	AL,"U"
	JE	PARAFN
	MOV	DX,4000H
	MOV	DI,SYMFN
	CMP	AL,"S"
	JE	PARAFN
PARARG:	MOV	DX,USAGE
	STC
	RET
PARANO:	MOV	DX,NOPAR
	STC
	RET
PARAFN:	OR	[FUNC],DX
PARAG:	CALL	RFN
	JC	PARASC
	JNZ	PARAWF

; DONE READING THROUGH PARAMETERS
PARAEN:	OR	BYTE [DEFFN],0
	JZ	PARANO

; NOW ASSIGN DEFAULT FILE
; EXTENSIONS TO NAMES WITHOUT
; SPECIFIED EXTENSIONS
	MOV	BP,DOTCOM
	MOV	DX,DOTASM
	MOV	DI,INFN
	MOV	AX,[FUNC]
	TEST	AX,3080H
	JNZ	PARAST

; IF NO I/O MODE WAS SPECIFIED,
; I.E. IF PERHAPS ONLY A FILE
; NAME WAS GIVEN AS THE SOLE
; PARAMETER, THE FUNCTION FLAGS
; ARE NOT SET, SO DEFAULT TO
; OUTPUTTING A BINARY AND A
; LISTING AND SET FUNC TO
; TWO-PASS ASSEMBLY
	OR	AX,3201H
	JNZ	PARANS
PARAST:	TEST	AL,80H
	JZ	PARANS

; DEFAULT INPUT EXTENSION IS ASM
; AND OUTPUT IS COM, BUT IF
; DISASSEMBLY IS REQUESTED, SWAP
; THE EXTENSIONS
	XCHG	BP,DX

; SYMBOL FILE REQUESTED WITH
; DISASSEMBLY WILL HAVE IT BEING
; READ AND SYMBOL SCANNING FLAG
; MUST BE SET IN FUNCTION FLAGS
	TEST	AX,4000H
	JZ	PARANS
	AND	AX,0BFFFH
	OR	AL,6
PARANS:	MOV	[FUNC],AX
	MOV	SI,DEFFN
	CALL	RFN1
	CALL	PARAWN
	MOV	DX,BP
	MOV	DI,OUTFN
	CALL	PARAWN
	MOV	DX,DOTSYM
	MOV	DI,SYMFN
	CALL	PARAWN
	MOV	DX,DOTLST
	MOV	DI,LSTFN

; GENERATE NAMES AND EXTENSIONS
; THAT WERE NOT SPECIFIED
PARAWN:	PUSH	BX
	PUSH	SI
	PUSH	DI
	MOV	AX,[DI]
	TEST	AL,AL
	JNZ	PARANX
	CALL	WFN
PARANX:	POP	SI
	CALL	RFN1
	CLC
	CALL	ADDEX
	POP	SI
	POP	BX
	CLC
	RET

; --------------------------------
; ASSEMBLE OR DISASSEMBLE AN
; ENTIRE FILE
PROCF:	MOV	AX,[VORG]
	MOV	[PC],AX

; RESET ALL PERTINENT COUNTERS
	XOR	AX,AX
	MOV	[USIZE],AX
	MOV	[LSTLIN],AX

; ENSURE LISTING WIDTH IS WITHIN
; ACCEPTABLE BOUNDS
	MOV	AX,3
	CMP	[LSTWID],AX
	JB	PROCF0
	MOV	AX,8
	CMP	AX,[LSTWID]
	JB	PROCF0
	MOV	AX,[LSTWID]

; DUMP EQUATES
PROCF0:	MOV	[LSTWID],AX
	CALL	EQDUMP

; GET INPUT FILE PARAMETERS
	CALL	CALF
	LODSW
	MOV	BX,4200H
	XCHG	AX,BX

; RESET FILE READ POINTER
	XOR	CX,CX
	XOR	DX,DX
	MOV	[SI],DX
	INT	21H
PROCF1:	CALL	READ

; CARRY FLAG SIGNALS READ ERROR,
; SO ABORT IMMEDIATELY ON ERROR
	JC	PROCF2

; ZERO FLAG SIGNALS END OF FILE
	JZ	PROCF3

; SAVE PROGRAM COUNTER FOR LISTING
	MOV	AX,[PC]
	MOV	[OLDPC],AX
	CALL	ASM
	JC	PROCF4
	CALL	WLST
	JC	PROCF2
	CALL	WRITE
	JNC	PROCF1

; ON ANY FILE ERRORS, CLOSE ALL
; OPEN INPUT FILES AND ABORT WITH
; CARRY
PROCF2:	CALL	DECF
	JNC	PROCF2
	RET

; ON END OF FILE, CLOSE CURRENT
; INPUT FILE
PROCF3:	CALL	DECF
	JNC	PROCF1

; DO NOT SIGNAL ERROR, EOF IS
; A LEGITIMATE CAUSE OF QUITTING
	CLC
	RET

; SIGNED ERROR CODES ARE DISGUISED
; SYSTEM INTERFACE REQUESTS FROM
; THE ASSEMBLER, BUT AS THEY WORK
; VIA THE ERROR HANDLER INTERFACE
; THE LINE HAS TO BE MANUALLY
; ECHOED TO LISTING HERE
PROCF4:	CALL	WLST
	TEST	AL,AL
	JNS	PROCF5

; PROCESS SYSTEM REQUEST;
; END DIRECTIVE TRIGGERS ZERO FLAG
	CBW
	NOT	AX
	JZ	PROCF3

; HANDLER TABLE STARTS ON INCLUDE
; DIRECTIVE SO MAKE THAT BASELINE
	DEC	AX
	MOV	DI,ADIR
	SHL	AX,1
	ADD	DI,AX
	CALL	[DI]
	JNC	PROCF1

; WRITE ERROR MESSAGE TO CONSOLE
; AND LISTING
PROCF5:	CALL	SCREAM
	TEST	BYTE [FUNC],20H
	JZ	PROCF1
	MOV	AH,40H
	MOV	BX,[LSTHDL]
	INT	21H
	JMP	SHORT PROCF1

; --------------------------------
; WRITE BX-LENGTH STRING FROM SI
; TO DI, CONVERTED TO UPPERCASE
; AND ZERO-TERMINATED
WFN:	CLD
	PUSH	BX
WFN1:	LODSB
	CMP	AL,61H
	JC	WFN2
	CMP	AL,7BH
	JNC	WFN2
	AND	AL,0DFH
WFN2:	STOSB
	DEC	BX
	JNZ	WFN1
	XOR	AL,AL
	STOSB
	POP	BX
	RET

; --------------------------------
; READ COMMAND LINE ELEMENT,
; SET CARRY FLAG IF SWITCH
RFN:	CLD
	LODSB
	CMP	AL,0
	JE	RFN4
	CMP	AL,0DH
	JE	RFN4
	CMP	AL,21H
	JB	RFN
	CMP	AL,2FH
	JE	RFN5
	DEC	SI
RFN1:	XOR	BX,BX
RFN2:	INC	BX
	MOV	AL,[BX+SI]
	CMP	AL,2FH
	JE	RFN3
	CMP	AL,21H
	JNB	RFN2
RFN3:	CMP	BX,0
RFN4:	RET
RFN5:	LODSB
	AND	AL,0DFH
	STC
	RET

; --------------------------------
; ADD OR REMOVE EXTENSION FROM
; BX-LENGTH FILE NAME AT SI,
; DEPENDING ON CARRY FLAG BEING
; RESET OR SET, RESPECTIVELY
ADDEX:	LAHF
	LEA	DI,[BX+SI]
	MOV	AL,2EH
	MOV	CX,BX

; FIND FINAL OCCURRENCE OF
; EXTENSION DOT
	STD
	REPNE SCASB
	JNZ	ADDEX1

; GET ENTRY STATE OF CARRY FLAG
	SAHF
	JNC	ADDEX0

; GET BACK TO DOT LOCATION AND
; PREPARE TO CUT OFF
	INC	DI
	JMP	SHORT ADDEX3
ADDEX1:	SAHF
	JC	ADDEX0
	LEA	DI,[BX+SI]
	XCHG	SI,DX

; ADD ZERO TERMINATED FILE
; EXTENSION
	CLD
ADDEX2:	STOSB
	LODSB
	TEST	AL,AL
	JNZ	ADDEX2
	XCHG	SI,DX

; GET NEW LENGTH
ADDEX3:	MOV	BX,DI
	SUB	BX,SI
ADDEX0:	LEA	DI,[BX+SI]

; TERMINATE FILESPEC WITH ZERO
	XOR	AL,AL
	STOSB
	RET

; --------------------------------
; RETRIEVE CURRENT INPUT FILE
; PARAMETERS
CALF:	MOV	AX,[INCLEV]
	TEST	AX,AX
	JZ	CALF0
	CLD
	DEC	AX

; ZERO FLAG SET MEANS IT IS THE
; FIRST OPEN INPUT FILE
	PUSHF
	XCHG	AL,AH
	SHR	AX,1
	SHR	AX,1
	MOV	SI,INCBUF
	ADD	SI,AX

; RETRIEVE ZERO FLAG AND CLEAR
; ERROR FLAG
	POPF
	CLC
	RET

; --------------------------------
; OPEN NEW INPUT FILE
INCF:	INC	WORD [INCLEV]
	MOV	DI,SI
	CALL	CALF
	JC	INCF0
	XCHG	DI,SI
	PUSH	DI
	CLD
	XOR	AX,AX

; CLEAR FILE HANDLE
	STOSW

; CLEAR CURRENT LINE
	STOSW

; SAVE FILE NAME IN BUFFER
	MOV	DX,DI
	CALL	WFN
	MOV	AX,3D00H
	INT	21H

; RESTORE HANDLE POSITION
; IN BUFFER AND STORE HANDLE
	POP	DI
	JC	INCF0
	STOSW

; SIGNAL END OF PAGE TO START
; ON A NEW PAGE
	MOV	AX,[PAGLEN]
	MOV	[LSTLIN],AX
	RET
INCF0:	DEC	WORD [INCLEV]
CALF0:	STC
	RET

; --------------------------------
; CLOSE CURRENT INPUT FILE
DECF:	CALL	CALF
	JBE	CALF0
	MOV	AH,3EH
	MOV	BX,[SI]
	INT	21H
	DEC	WORD [INCLEV]

; END OF PAGE, TURN A NEW LEAF
	MOV	AX,[PAGLEN]
	MOV	[LSTLIN],AX
	CLC
	RET

; --------------------------------
; WRITE LISTING
WLST:	PUSH	AX
	PUSH	DX
	PUSH	BX
	PUSH	SI
	PUSH	DI

; ONLY WRITE LISTING IF REQUESTED
	TEST	BYTE [FUNC],20H
	JZ	WLSTE
	MOV	SI,BINBUF
	MOV	DI,LSTBUF
	MOV	BX,[BINLEN]
	MOV	DX,[OLDPC]
	MOV	BP,DI

; PRINT ADDRESS AND FIRST COUPLE
; OF BYTES OF DATA
	CALL	WLSTS

; PRINT SPACES AND LINE NUMBER
	CALL	WLSTI

; SAVE POSITION FOR TAB TO SPACE
; CONVERSION
	MOV	BP,DI
WLSTT:	PUSH	BX
	PUSH	SI

; WRITE INPUT LINE TO LISTING
	MOV	SI,TXTBUF
	MOV	BX,[TXTLEN]
	TEST	BX,BX
	JZ	WLSTM
WLSTL:	LODSB
	TEST	AL,AL
	JZ	WLSTM
	CMP	AL,0DH
	JE	WLSTM
	CMP	AL,0AH
	JE	WLSTM
	CMP	AL,9
	JNE	WLSTN

; CONVERT TABS TO SPACES FOR
; JUSTICE AND GLORY AND POTENTIAL
; FOR MISCONFIGURED TABS
	MOV	CX,DI
	SUB	CX,BP
	AND	CX,7
	NEG	CX
	ADD	CX,8
	MOV	AL,20H
	REP

; ONLY REP IF THERE'S SPACES
; TO FILL, OTHERWISE JUST SKIP
; RIGHT TO THE STOSB
WLSTN:	STOSB
	DEC	BX
	JNZ	WLSTL

; LINE TERMINATED OR EMPTY
WLSTM:	POP	SI
	POP	BX

; TERMINATE LINE AND WRITE TO
; LISTING FILE
WLSTB:	PUSH	DX
	PUSH	BX
	PUSH	SI
	PUSH	DI
	CALL	WTITLE
	POP	DI
	MOV	AX,0A0DH
	STOSW
	MOV	DX,LSTBUF
	CALL	WROTE
	POP	SI
	POP	BX
	POP	DX
	JC	WLSTE
	MOV	DI,LSTBUF

; KEEP WRITING LEFTOVER DATA
; TO LISTING TO STAY WITHIN THE
; SANCTIONED HEXDUMP WIDTH
	CALL	WLSTS
	JNZ	WLSTB
	CLC
WLSTE:	POP	DI
	POP	SI
	POP	BX
	POP	DX
	POP	AX
	RET

; --------------------------------
; WRITE ADDRESS AND PARTIAL
; HEXDUMP
WLSTS:	MOV	AL,20H
	CLD
	STOSB
	MOV	AX,DX
	CALL	WHEX
	TEST	BX,BX
	JZ	WLSTX
	MOV	CX,BX

; THE LISTING HEX FIELD IS A
; SET WIDTH, AND OUTPUT EXCEEDING
; THE WIDTH HAS TO BE WRITTEN ON
; SEPARATE LINES
	CMP	CX,[LSTWID]
	JBE	WLSTG
	MOV	CX,[LSTWID]
WLSTG:	SUB	BX,CX
	ADD	DX,CX
	MOV	AL,20H
	STOSB
WLSTP:	LODSB
	CALL	HALX
	LOOP	WLSTP
	TEST	AL,AL
WLSTX:	RET

; --------------------------------
; WRITE PADDING, LINE NUMBER
WLSTI:	PUSH	DX
	PUSH	BX
	PUSH	SI
	MOV	CX,[LSTWID]
	SHL	CX,1
	ADD	CX,LSTBUF+7
	SUB	CX,DI
	MOV	AL,20H
	REP STOSB
	CALL	CALF
	JC	WLSTO
	MOV	BP,DI

; LINE NUMBER IS SECOND PARAMETER
	MOV	AX,[SI+2]
	MOV	CX,10
	CALL	WN

; PAD TO MAXIMUM DIGIT COUNT
; PLUS EXTRA SPACE
	MOV	CX,BP
	SUB	CX,DI
	ADD	CX,6
	MOV	AL,20H
	REP STOSB
WLSTO:	POP	SI
	POP	BX
	POP	DX
	RET

; --------------------------------
; WRITE PAGE TITLE AND/OR
; INCREMENT LINE NUMBER
WTITLE:	CLD
	MOV	DI,TEMP2
	MOV	SI,AMSG
	LEA	CX,[DI+3AH]
	MOV	AX,[LSTLIN]

; START OF LISTING?  WRITE PAGE
; HEADER.  LSTLIN CAN ONLY BE
; ZERO HERE WHEN WTITLE HASN'T
; BEEN CALLED HITHERTO
	TEST	AX,AX
	JZ	WTITL1

; END OF PAGE?  WRITE PAGE FEED
; CHARACTER AND THEN PROCEED TO
; WRITE PAGE HEADER
	CMP	AX,[PAGLEN]
	JC	WTITL5
	INC	WORD [PAGNUM]
	MOV	WORD [LSTLIN],0
	MOV	AL,0CH
	STOSB

; WRITE HEADER WITH FILE NAME
; AND PAGE NUMBER
WTITL1:	CALL	WRM
	CALL	CALF
	JC	WTITL2
	ADD	SI,4
	MOV	AX,2020H
	STOSW
	STOSW
	CALL	WRM

; RIGHT JUSTIFY PAGE NUMBER
WTITL2:	SUB	CX,DI
	MOV	AL,20H
	REP STOSB
	MOV	AX,[PAGNUM]
	MOV	CL,10
	CALL	WN
	MOV	AX,0A0DH
	STOSW

; WRITE USER DEFINED PAGE TITLE
	MOV	SI,TTLBUF
	OR	BYTE [SI],0
	JZ	WTITL3
	CALL	WRM
	MOV	AX,0A0DH
	STOSW
WTITL3:	STOSW

; WRITE APPROPRIATE LISTING HEADER
	MOV	SI,SYMLIN
	OR	WORD [PASS],0
	JZ	WTITL4
	MOV	CX,[LSTWID]
	SHL	CX,1
	ADD	CX,7
	ADD	CX,DI
	MOV	SI,BINLIN
	CALL	WRM
	SUB	CX,DI
	MOV	AL,20H
	REP STOSB
	MOV	SI,SRCLIN
WTITL4:	CALL	WRM
	MOV	AX,0A0DH
	STOSW

; AND DASHES
	MOV	CL,40H
	MOV	AL,2DH
	REP STOSB
	MOV	AX,0A0DH
	STOSW
	MOV	DX,TEMP2
	CALL	WROTE
WTITL5:	INC	WORD [LSTLIN]
	CLC
	RET

; --------------------------------
; READ FROM CURRENT INPUT FILE
READ:	CALL	CALF
	JC	READ1

; INCREMENT INPUT LINE NUMBER
	INC	WORD [SI+2]
	MOV	BX,[SI]
	TEST	BYTE [FUNC],80H
	JZ	READ2

; IF DISASSEMBLING, FIRST SEEK
; TO CURRENT PROGRAM COUNTER;
; TAKE CARE TO SKIP LOAD ADDRESS
	MOV	AX,4200H
	XOR	CX,CX
	MOV	DX,[PC]
	SUB	DX,[VORG]
	INT	21H
	JC	READ8

; MAXIMUM 8086 INSTRUCTION LENGTH
; IS 8 BYTES
	MOV	AH,3FH
	MOV	CX,8
	MOV	DX,BINBUF
	INT	21H
	JC	READ8
	TEST	AX,AX
	RET

; SET ZERO FLAG
READ1:	SUB	AX,AX
	RET

; READ AN INDISCRIMINATE BLOCK
; OF TEXT
READ2:	MOV	AH,3FH
	MOV	CX,100H
	MOV	DX,TXTBUF
	INT	21H
	JC	READ8
	TEST	AX,AX
	JZ	READ1
	MOV	CX,AX
	MOV	DX,AX
	XOR	BX,BX

; FIND FIRST LINE BREAK
	MOV	DI,TXTBUF
READ3:	MOV	AL,[BX+DI]
	INC	BX
	MOV	AH,0AH
	CMP	AL,0DH
	JZ	READ6
	MOV	AH,0DH
	CMP	AL,0AH
	JZ	READ6
	LOOP	READ3

; NO LINE TERMINATOR FOUND
; IF THE LINE IS BELOW MAXIMUM
; BUFFER LENGTH, IT MIGHT BE
; THE FINAL LINE IN THE FILE
	CMP	BX,100H
	JNC	READ5
	MOV	[BX+DI],AH
	INC	BX
READ4:	MOV	[TXTLEN],BX
	TEST	BX,BX
	CLC
	RET

; LINE TOO LONG ERROR
READ5:	MOV	AL,0EH
	JMP	SCREAM

; CHECK FOR SECONDARY LINE
; TERMINATOR AND SKIP PAST BOTH
READ6:	JCXZ	READ7
	CMP	[BX+DI],AH
	JNZ	READ7
	INC	BX

; ZERO-TERMINATE LINE FOR
; EXTRA SAFETY
READ7:	XOR	AL,AL
	MOV	[BX+DI],AL
	MOV	AX,BX

; IF LINE IS THE EXACT REQUESTED
; LENGTH, GO AHEAD AND TERMINATE
	SUB	AX,DX
	JZ	READ4

; OTHERWISE, SEEK BACK TO RIGHT
; PAST LINE TERMINATORS
	CWD
	PUSH	BX
	MOV	CX,4201H
	XCHG	AX,DX
	XCHG	AX,CX
	MOV	BX,[SI]
	INT	21H
	POP	BX
	JNC	READ4

; PREPARE INPUT FILE NAME FOR
; I/O COMPLAINT
READ8:	MOV	DX,4
	ADD	DX,SI
	MOV	AL,0FH
	JMP	SCREAM

; --------------------------------
; WRITE TO BINARY OUTPUT
WRITE:	TEST	BYTE [FUNC],10H
	JZ	WRITE4
	TEST	BYTE [FUNC],80H
	JNZ	WRITE6
	MOV	AX,[BINLEN]
	MOV	DX,[USIZE]

; IF THERE IS NO BINARY BUFFER
; TO WRITE, ABORT
	TEST	AX,AX
	JZ	WRITE5
	TEST	DX,DX
	JZ	WRITE3

; IF THERE IS UNDEFINED DATA
; PRESENT, WRITE IT OUT AS ZEROES
	MOV	DI,TEMP
	MOV	CX,100H
	XOR	AL,AL
	CLD
	REP STOSB
WRITE1:	PUSH	DX
	MOV	CX,100H
	CMP	CX,DX
	JB	WRITE2
	MOV	CX,DX
WRITE2:	PUSH	CX
	MOV	AH,40H
	MOV	DX,TEMP
	MOV	BX,[OUTHDL]
	INT	21H
	JC	WRITE7
	POP	CX
	POP	DX
	SUB	DX,CX
	JA	WRITE1

; WRITE BINARY BUFFER TO OUTPUT
WRITE3:	MOV	AH,40H
	MOV	CX,[BINLEN]
	MOV	DX,BINBUF
	MOV	BX,[OUTHDL]
	INT	21H
	JC	WRITE7

; RESET UNDEFINED DATA COUNTER
WRITE4:	XOR	AX,AX
	MOV	[USIZE],AX
WRITE5:	CLC
	RET

; IF DISASSEMBLER IS INVOKED
; WRITE GENERATED TEXT BUFFER
; INSTEAD
WRITE6:	MOV	AH,40H
	MOV	CX,[TXTLEN]
	MOV	DX,TXTBUF
	MOV	BX,[OUTHDL]
	INT	21H
	JNC	WRITE4
WRITE7:	MOV	DX,OUTFN
	MOV	AL,0FH
	JMP	SCREAM

; --------------------------------
; OPEN ALL REQUISITE FILES
OPEN:	MOV	SI,INFN
	CALL	RFN1
	CALL	INCF
	JC	OPEN1
	MOV	DI,TEMP
	MOV	SI,INM
	CALL	WRM
	MOV	SI,INFN
	CALL	WRM
	PUSH	DI

; FOR EACH OF THE ADDITIONAL
; FILES, TEST FOR THE REQUEST
; FLAG AND CONFIRM OR REFUTE IT
; (IF THERE IS A FILE ERROR)
; SO IT CAN BE USED FOR
; PROCESSING AND TO KEEP TALLY
; OF WHAT'S OPEN
	MOV	CX,1010H
	MOV	DX,OUTFN
	MOV	DI,OUTHDL
	CALL	OPENF
	JC	OPEN1
	MOV	CX,2020H
	MOV	DX,LSTFN
	MOV	DI,LSTHDL
	CALL	OPENF
	JC	OPEN1
	TEST	WORD [FUNC],404H
	JNZ	OPEN2
	MOV	CX,4040H
	MOV	DX,SYMFN
	MOV	DI,SYMHDL
	CALL	OPENF
	JNC	OPEN3
OPEN1:	MOV	AL,0BH
	JMP	SCREAM

; IF DISASSEMBLER IS ENGAGED,
; READ SYMBOL FILE WHOLESALE INTO
; SYMBOL BUFFER
OPEN2:	POP	DI

; WRITE SYMBOL FILE NAME OUT
; THE BINARY ALONG WITH INPUT
; FILE
	MOV	AL,20H	
	STOSB
	MOV	SI,SYMFN
	CALL	WRM
	PUSH	DI
	MOV	AX,3D00H
	MOV	DX,SYMFN
	INT	21H
	JC	OPEN1
	MOV	BX,AX
	MOV	AH,3FH

; READ EVERYTHING THE SEGMENT
; CAN HOLD
	MOV	CX,SP
	MOV	DX,MAPBUF
	SUB	CX,DX
	INT	21H
	MOV	AH,3EH
	INT	21H
	MOV	AX,[SYMBS+3]
	MOV	[VORG],AX
OPEN3:	POP	DI
	CALL	PRUNT

; TERMINATE WITHOUT ERROR FLAG
	CLC
	RET

; --------------------------------
; SAVE A FEW BYTES ON A
; REPETITIVE PROCESS OF TESTING,
; OPENING FILES, AND
; SETTING/RESETTING FLAGS
OPENF:	TEST	[FUNC],CX
	JZ	OPENF1
	PUSH	CX
	MOV	AH,3CH
	XOR	CX,CX
	INT	21H
	POP	CX
	JC	OPENF2
	STOSW
OPENF1:	CLC
	RET

; TURN OFF REQUEST FLAG SINCE
; THE FILE WAS NOT OPENED
OPENF2:	NOT	CX
	AND	[FUNC],CX
	STC
	RET

; --------------------------------
; WRITE SYMBOL DUMP AT THE END
; OF LISTING
SYMDMP:	CLD
	MOV	SI,SYMBS
	LODSW
	TEST	AX,AX
	JNZ	SYMDM1
SYMDM0:	RET
SYMDM1:	MOV	CX,AX
	XOR	AX,AX
	MOV	[PASS],AX
	MOV	AX,[FUNC]

; IF NEITHER SYMBOL FILE NOR
; LISTING IS REQUESTED, ABORT
	TEST	AX,6060H
	JZ	SYMDM0

; IF SYMBOL FILE ISN'T REQUESTED
; SKIP TO SYMBOL LISTING
	TEST	AX,2020H
	PUSHF
	TEST	AX,4040H
	JZ	SYMSRT

; WRITE DATA MAP BUFFER
	PUSH	SI
	PUSH	CX
	MOV	AH,40H
	MOV	CX,100H
	MOV	DX,MAPBUF
	MOV	BX,[SYMHDL]
	INT	21H
	POP	CX
	PUSH	CX

; FIND SYMBOL TABLE SIZE
SYMDM2:	LODSB
	CMP	AL,21H
	JNB	SYMDM2
	LODSW
	LOOP	SYMDM2

; WRITE TABLE WHOLESALE
	MOV	AH,40H
	MOV	DX,SYMBS
	MOV	CX,SI
	SUB	CX,DX
	MOV	BX,[SYMHDL]
	INT	21H
	POP	CX
	POP	SI
SYMSRT:	POPF
	JZ	SYMDM0
	CLD
	CMP	CX,2

; ONE SYMBOL?  YEAH, SORT THAT!
; ...NOT!!
	JB	SYMLST
	PUSH	CX
SYMSR1:	MOV	DX,CX
	PUSH	CX
	PUSH	SI

; PERFORM DUMB BUBBLE SORT ON
; SYMBOL TABLE
SYMSR2:	XOR	BX,BX

; GET LENGTH OF CURRENT SYMBOL
SYMSR3:	MOV	AL,[BX+SI]
	INC	BX
	CMP	AL,21H
	JNB	SYMSR3
	INC	BX
	INC	BX
	LEA	DI,[BX+SI]
	XOR	BP,BP

; GET LENGTH OF SYMBOL RIGHT AFTER
SYMSR4:	MOV	AL,[BP+DI]
	INC	BP
	CMP	AL,21H
	JNB	SYMSR4
	INC	BP
	INC	BP

; GET LONGEST LENGTH
; LOGIC BEING THAT IF ONE SYMBOL
; IS SHORTER THAN THE OTHER BUT
; THEY ARE IDENTICAL FOR AT LEAST
; THAT LENGTH, THE SHORTEST WILL
; STILL HAVE A TERMINATOR THAT
; HAS A MUCH LOWER ASCII VALUE
	MOV	CX,BX
	CMP	CX,BP
	JNB	SYMSR5
	MOV	CX,BP

; BRUTE ASCII COMPARE
SYMSR5:	PUSH	SI
	PUSH	DI
	REPE CMPSB
	POP	DI
	POP	SI
	JB	SYMSR6

; SAVE LEFT SYMBOL TO TEMP BUFFER
	PUSH	SI
	PUSH	DI
	MOV	DI,TEMP
	MOV	CX,BX
	REP MOVSB
	POP	DI
	POP	SI

; MOVE RIGHT SYMBOL TO THE LEFT
	PUSH	SI
	XCHG	SI,DI
	MOV	CX,BP
	REP MOVSB

; MOVE BUFFERED SYMBOL
; TO THE RIGHT
	MOV	SI,TEMP
	MOV	CX,BX
	REP MOVSB
	POP	SI
	MOV	BX,BP
SYMSR6:	ADD	SI,BX

; TWO SYMBOLS LEFT? THEY ARE
; ALREADY PROCESSED, END HERE
	DEC	DX
	CMP	DX,2
	JNC	SYMSR2
	POP	SI
	POP	CX

; SCAN FEWER EACH TIME, END WHEN
; ONLY TWO ARE LEFT, SINCE THEY
; ARE ALREADY PROCESSED
	DEC	CX
	CMP	CX,2
	JNC	SYMSR1
	POP	CX

; WRITE SYMBOL TABLE TO LISTING
SYMLST:	XOR	DX,DX

; FORCE A NEW PAGE
	MOV	AX,[PAGLEN]
	MOV	[LSTLIN],AX
	PUSH	CX
	PUSH	SI

; GET LENGTH OF LONGEST SYMBOL
SYMLS1:	XOR	BX,BX
SYMLS2:	LODSB
	INC	BX
	CMP	AL,21H
	JNB	SYMLS2
	LODSW
	CMP	DX,BX
	JNC	SYMLS3
	MOV	DX,BX
SYMLS3:	LOOP	SYMLS1
	POP	SI
	POP	CX

; PREPARE A LINE OF SYMBOLS
	MOV	DI,LSTBUF
SYMLS4:	PUSH	CX
	MOV	CX,DI
	CLD
SYMLS5:	LODSB
	STOSB
	CMP	AL,21H
	JNB	SYMLS5
	DEC	DI
	SUB	CX,DI

; PAD WITH SPACES TO MAXIMUM
; DETECTED SYMBOL LENGTH AND
; WRITE VALUE
	ADD	CX,DX
	MOV	AL,20H
	REP STOSB
	LODSW
	CALL	WHEX

; PREPARE FOR NEXT SYMBOL ON LINE
	MOV	AX,2020H
	STOSW
	MOV	CX,DI
	SUB	CX,LSTBUF
	ADD	CX,DX

; MAKE SURE LINE DOES NOT EXCEED
; MAXIMUM LENGTH
	CMP	CX,3FH
	POP	CX
	JB	SYMLS6
	CALL	SYMLS7
	MOV	DI,LSTBUF
SYMLS6:	DEC	CX
	JNZ	SYMLS4

; WRITE LINE TO LISTING
SYMLS7:	CMP	DI,LSTBUF
	JBE	SYMLS8
	DEC	DI
	DEC	DI
	MOV	AX,0A0DH
	STOSW
	PUSH	CX
	PUSH	DX
	PUSH	SI

; KEEP UP LINE AND PAGE HANDLING
	PUSH	DI
	CALL	WTITLE
	POP	DI
	MOV	DX,LSTBUF
	CALL	WROTE
	POP	SI
	POP	DX
	POP	CX
SYMLS8:	RET

; --------------------------------
; DUMP ALL EQUATES FROM SYMBOL
; TABLE ONE BY ONE
EQDUMP:	MOV	AL,[FUNC]
	TEST	AL,AL
	JNS	SYMLS8

; NO REASON TO TRY ANYTHING IF
; NO SYMBOL TABLE WAS LOADED
	TEST	AL,2
	JZ	SYMLS8
	CLD
	MOV	SI,SYMBS
	LODSW
	MOV	CX,AX
	JCXZ	EQDUM3
EQDUM0:	STC
	SBB	BX,BX
EQDUM1:	INC	BX
	MOV	AL,[BX+SI]
	CMP	AL,21H
	JNB	EQDUM1

; CHECK FOR EQUATE
	TEST	AL,2
	JZ	EQDUM2
	MOV	DI,TXTBUF
	PUSH	CX
	MOV	CX,BX
	CLD
	REP MOVSB
	INC	SI

; WRITE VALUE, TERMINATE LINE,
; AND WRITE TO OUTPUT(S)
	MOV	AX,3D09H
	STOSW
	LODSW
	CALL	WHEX
	CALL	LINEND
	POP	CX
	LOOP	EQDUM0
	JMP	SHORT EQDUM3
EQDUM2:	ADD	SI,BX
	ADD	SI,3
	LOOP	EQDUM0

; WRITE ORG DIRECTIVE
EQDUM3:	MOV	DI,TXTBUF
	MOV	AL,9
	STOSB
	MOV	AX,3D00H+PCCHAR
	STOSW
	MOV	AX,[VORG]
	CALL	WHEX

; REUSABLE LISTING FUNCTION
LINEND:	MOV	AX,0A0DH
	CLD
	STOSW
	MOV	AX,DI
	SUB	AX,TXTBUF
	MOV	[TXTLEN],AX
	PUSH	SI
	CALL	WLST
	CALL	WRITE
	POP	SI
	RET

; --------------------------------
; WRITE ALL TRAILING UNDEFINED
; NAMED DATA AREAS TO LISTING
UDDUMP:	MOV	AL,[FUNC]
	TEST	AL,AL
	JNS	UDDUM3

; NO REASON TO TRY ANYTHING IF
; NO SYMBOL TABLE WAS LOADED
	TEST	AL,2
	JZ	UDDUM3
	CLD
	MOV	SI,SYMBS+5
	MOV	CX,[SYMBS]
	CMP	CX,2
	JB	UDDUM3
	DEC	CX
	MOV	WORD [BINLEN],0
UDDUM0:	STC
	SBB	BX,BX
UDDUM1:	INC	BX
	MOV	AL,[BX+SI]
	CMP	AL,21H
	JNB	UDDUM1

; CHECK FOR EQUATE
	TEST	AL,2
	JNZ	UDDUM2

; CHECK IF PAST FINAL PC
	MOV	AX,[BX+SI+1]
	CMP	AX,[PC]
	JB	UDDUM2
	PUSH	CX
	MOV	DI,TXTBUF
	MOV	CX,BX
	CLD
	REP MOVSB
	MOV	AX,93AH
	STOSW
	MOV	AX,3D00H+PCCHAR
	STOSW
	MOV	AH,2BH
	STOSW
	INC	SI
	LODSW
	SUB	AX,[OLDPC]
	ADD	[OLDPC],AX
	CALL	WHEX
	CALL	LINEND
	POP	CX
	LOOP	UDDUM0
	JMP	SHORT UDDUM3
UDDUM2:	ADD	SI,BX
	ADD	SI,3
	LOOP	UDDUM0
UDDUM3:	RET

; --------------------------------
; WRITE 16-BIT HEX CONSTANT
WHEX:	PUSH	AX
	MOV	AL,AH
	CALL	HALX
	POP	AX
	JMP	HALX

; --------------------------------
; ANOTHER CHEAP WAY TO SAVE BYTES
WROTE:	MOV	CX,DI
	SUB	CX,DX
	MOV	AH,40H
	MOV	BX,[LSTHDL]
	INT	21H
	JNC	UDDUM3

; FROM HERE, A FALL-THROUGH
WROTE1:	MOV	DX,LSTFN
	MOV	AL,0FH

; --------------------------------
; TURN AN ERROR CODE INTO A
; VISIBLE COMPLAINT ON THE
; TERMINAL INTERFACE
SCREAM:	CLD
	CBW
	MOV	DI,TEMP
	MOV	CX,AX

; ERROR CODE $0F IS A FILE ERROR
; INVOLVING THE PROGRAM INTERFACE
	CMP	AL,0FH
	JZ	SCRUM

; OTHERWISE THE ERROR IS WITHIN
; THE CURRENT INPUT FILE
	CALL	CALF
	JC	SCROOM
	LODSW
	LODSW
	PUSH	AX

; WRITE OUT FILE NAME
	CALL	WRM
	MOV	AL,28H
	STOSB
	POP	AX
	PUSH	CX
	PUSH	DX

; WRITE OUT LINE NUMBER
	MOV	CX,10
	CALL	WN
	POP	DX
	POP	CX
	MOV	AX,2029H
	STOSW

; CHECK FOR ERROR CODES THAT
; INVOLVE SPECIAL HANDLING
SCROOM:	CMP	CL,5
	JZ	SCROYM
	CMP	CL,0BH
	JNZ	SCROME

; WRITE NAME OF REQUESTED INCLUDE
SCRUM:	MOV	SI,DX
	CALL	WRM
	JMP	SHORT SCROME

; WRITE BYTE COUNT FOR MISJUMP
SCROYM:	PUSH	CX
	MOV	AX,DX
	MOV	CX,10
	CALL	WN
	POP	CX

; GET THE PERTINENT ERROR MESSAGE
; BY BRUTE FORCE SCANNING THROUGH
; THEM ALL
SCROME:	MOV	SI,ERRMES
	JCXZ	SCRAM
SCREM:	LODSB
	TEST	AL,AL
	JNZ	SCREM
	LOOP	SCREM

; WRITE ERROR MESSAGE AND
; FALL THROUGH TO PRUNT
SCRAM:	CALL	WRM
	INC	WORD [ERRORS]

; --------------------------------
; ECHO LINE CURRENTLY BEING
; WRITTEN TO TERMINAL
PRUNT:	MOV	DX,TEMP
	MOV	AX,0A0DH
	STOSW
	MOV	CX,DI
	SUB	CX,DX
	PUSH	CX
	PUSH	DX
	MOV	AH,40H
	MOV	BX,1
	INT	21H
	POP	DX
	POP	CX
	STC
	RET

; --------------------------------
; INCLUDE DIRECTIVE REQUESTED
P2:	XOR	AL,AL
	MOV	[BX+SI],AL
	CALL	INCF
P2F:	MOV	AL,0BH
	RET

; --------------------------------
; INCBIN DIRECTIVE REQUESTED
P3:	MOV	AX,3D00H
	MOV	[BX+SI],AL
	MOV	DX,SI
	INT	21H
	JC	P2F
	MOV	BX,AX
P3L:	MOV	AH,3FH
	MOV	DX,TEMP
	MOV	CX,100H
	INT	21H
	MOV	DX,SI
	JC	P2F
	ADD	[PC],AX
	MOV	CX,AX
	JCXZ	P3E
	TEST	BYTE [FUNC],10H
	JZ	P3S
	PUSH	AX
	PUSH	BX
	MOV	AH,40H
	MOV	DX,[TEMP]
	MOV	BX,[OUTHDL]
	INT	21H
	POP	BX
	POP	AX
P3S:	TEST	AX,AX
	JNZ	P3L
P3E:	MOV	AH,3EH
	INT	21H
	RET

; --------------------------------
; TITLE DIRECTIVE REQUESTED
P5:	CLD
	MOV	DI,TTLBUF
	MOV	CX,BX
	REP MOVSB
	XOR	AL,AL
	STOSB
	CLC
	RET

; --------------------------------
; PAGE DIRECTIVE REQUESTED
P4:	TEST	DX,DX
	JNZ	P4S
	MOV	AX,[PAGLEN]
	MOV	[LSTLIN],AX
	CLC
	RET
P4S:	MOV	[PAGLEN],DX
	CLC
	RET

; --------------------------------
; ACTUAL ASSEMBLER MODULES
	INCLUDE	GENERIC.ASM
	INCLUDE	8086.ASM

; --------------------------------
; MAIN PROGRAM DATA AND TABLES
PAGLEN:	DW	DEFPAG
ADIR:	DW	P2,P3,P4,P5
ERRMES:	DB	"INVALID OPERAND",0
	DB	"SYNTAX ERROR",0
	DB	"INVALID ADDRESSING",0
	DB	"INVALID INSTRUCTION",0
	DB	"UNDEFINED SYMBOL",0
	DB	" BYTE(S) OUT OF RANGE",0
	DB	"OPERAND SIZE MISMATCH",0
	DB	"CONSTANT TOO LARGE",0
	DB	"MISSING OPERAND",0
	DB	"GARBAGE PAST END",0
	DB	"DUPLICATE SYMBOL",0
	DB	" NOT ACCESSIBLE",0
	DB	"RESERVED WORD MISUSE",0
	DB	"INVALID REGISTER",0
	DB	"LINE TOO LONG",0
	DB	" FILE I/O ERROR",0
	DB	"COMPREHENSION FAILED",0
DOTASM:	DB	"ASM",0
DOTCOM:	DB	"COM",0
DOTLST:	DB	"LST",0
DOTSYM:	DB	"SYM",0
PASSM:	DB	"PASS ",0
INM:	DB	"IN: ",0
OUTM:	DB	"OUT: ",0
BINLIN:	DB	" ADDR BINARY",0
SRCLIN:	DB	"LINE  SOURCE",0
SYMLIN:	DB	" SYMBOL TABLE",0
AMSG:	DB	"R-ASSEMBLER"
	DB	" VERSION 1.05C"
	DB	13,10,36
DOSERR:	DB	"BAD DOS VERSION"
	DB	13,10,36
NOPAR:	DB	"MISSING PARAMETER"
	DB	13,10,36
USAGE:	DB	"RA IN [/SWITCH [OUT]"
	DB	" [/SWITCH [OUT]] ...]"
	DB	13,10
	DB	"/A [OUT[.COM]]",9
	DB	"ASSEMBLE"
	DB	13,10
	DB	"/D [OUT[.ASM]]",9
	DB	"DISASSEMBLE"
	DB	13,10
	DB	"/L [OUT[.LST]]",9
	DB	"ASSEMBLE TO LISTING"
	DB	13,10
	DB	"/O 100H",9,9
	DB	"SET ORIGIN"
	DB	13,10
	DB	"/S [OUT[.SYM]]",9
	DB	"STORE OR USE SYMBOLS"
	DB	13,10
	DB	"/U [OUT[.LST]]",9
	DB	"DISASSEMBLE TO LISTING"
	DB	13,10
	DB	"/W WIDTH",9
	DB	"SET LISTING WIDTH"
	DB	13,10,36

; --------------------------------
; HIDDEN BUFFERS
TXTBUF:	DS	100H
BINBUF:	DS	100H
LSTBUF:	DS	100H
TEMP:	DS	100H
TEMP2:	DS	100H
TTLBUF:	DS	100H
VARS:	DS	100H
INCBUF:	DS	100H
MAPBUF:	DS	100H
SYMBS:

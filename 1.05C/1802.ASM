; --------------------------------
; 1802-SPECIFIC LINE ASSEMBLER
ASMCMD:	MOV	DI,MNMTBL

; CHECK FOR MNEMONIC
	CALL	SL
	JZ	ASMCM1
	MOV	DI,DIRTBL

; CHECK FOR DIRECTIVE
	CALL	SL
	JZ	ASMCM2
	RET

; CALL MNEMONIC HANDLER AND
; WRITE BINARY TO OUTPUT
ASMCM1:	MOV	DI,IHDL
	CALL	ASMCM3
	MOV	[BINLEN],CX
	ADD	[PC],CX
	MOV	DI,BINBUF
	CLD
	MOV	AL,[OPCODE]
	STOSB
	MOV	AX,[IMM]
	STOSW
	CMP	AL,AL
	RET

; CALL DIRECTIVE HANDLER AND
; WRITE NO OUTPUT
ASMCM2:	MOV	DI,AHDL
	CALL	ASMCM3
	XOR	CX,CX
	RET

; CALL THE REQUISITE HANDLER
ASMCM3:	MOV	[OPCODE],AL
	XOR	AL,AL
	XCHG	AL,AH
	SHL	AX,1
	ADD	DI,AX
	PUSH	WORD [DI]
	RET

; --------------------------------
; SCAN AND FLAG RESERVED WORD
SW:	CMP	BX,2
	JB	SW3

; DON'T BOTHER SCANNING IF IT
; IS A NUMERIC
	CMP	AL,30H
	JB	SW1
	CMP	AL,3AH
	JB	SW3

; EVERY ONE OF THESE REGISTERS
; IS NEEDED FOR LATER PROCESSING
; AND SL DESTROYS THEM ALL
SW1:	PUSH	CX
	PUSH	DX
	PUSH	BX
	PUSH	SI
	MOV	DI,DIRTBL
	CALL	SL

; WE REALLY ONLY NEED THE ZERO
; FLAG FROM THIS OPERATION
	POP	SI
	POP	BX
	POP	DX
	POP	CX
	JNZ	SW2

; SET FLAG IF VALID USABLE
; KEYWORD
	CMP	AH,5
	JE	SW3
SW2:	MOV	AL,[SI]
SW3:	RET

; --------------------------------
; READ NUMERIC CONSTANT
RNC:	PUSH	AX
	PUSH	CX
	PUSH	SI

; DEFAULT TO DECIMAL
	MOV	CL,5
	CMP	AL,30H
	JB	RNC1
	CMP	AL,3AH
	JNB	RNC1

; SAVE END OF CONSTANT
; FOR LATER
	LEA	DI,[BX+SI]
	DEC	BX

; GET FINAL CHARACTER TO
; CHECK FOR SIGIL
	MOV	AL,[BX+SI]
	CMP	AL,42H
	JE	RNC2
	CMP	AL,48H
	JE	RNC16
	CMP	AL,4FH
	JE	RNC8
	CMP	AL,51H
	JE	RNC8
	INC	BX

; NUMERIC DIGIT MEANS DECIMAL
	CMP	AL,30H
	JB	RNC1
	CMP	AL,3AH
	JB	RNC10

; RESTORE OLD LOCATION
RNC1:	POP	SI
	POP	CX
	POP	AX
	STC
	RET

; ROTATION COUNT SLIDE
RNC2:	DEC	CX
RNC4:	DEC	CX
RNC8:	DEC	CX
RNC16:	DEC	CX
RNC10:	CALL	RN
	JNZ	RNC1
	POP	SI

; SKIP PAST CONSTANT
	MOV	SI,DI
	POP	CX
	POP	AX
	CLC
	RET

; --------------------------------
; SCAN FOR LOW/HIGH BYTE OVERRIDE
RNM:	CALL	SW
	JNZ	RNM2
	ADD	SI,BX

; PREPARE FOR OPERAND FLAG
	MOV	AH,10H
	CMP	AL,11H
	JZ	RNM1
	MOV	AH,8
	CMP	AL,12H
	JZ	RNM1
	MOV	AH,4
	CMP	AL,13H
	JZ	RNM1

; FALL-THROUGH KEYWORD ABUSE
; ERROR DOUBLES AS DIRECTIVE
; HANDLER
D5:	MOV	AL,0CH
	JMP	FAIL

; SHIFT BIT INTO POSITION AND
; SET OPERAND FLAG
RNM1:	OR	CL,AH
	CALL	CC
	JZ	RNMER8
	CMP	AL,AL
RNM2:	RET

; MISSING OPERAND ERROR
RNMER8:	MOV	AL,8
	JMP	FAIL

; --------------------------------
; PROCESS NUMERIC CONSTANT WITH
; ALL THE WEIRD 1802 BYTE SYNTAX
RI:	CALL	CC
	JZ	GC8
	CMP	BX,1
	JNE	RIA
	CMP	AL,41H
	JNE	RIA
	MOV	AH,2EH
	CALL	GC
	CALL	CC
	JZ	GC8
	SUB	AL,30H
	JC	GC1
	CMP	AL,2
	JNB	GC1
	XOR	AH,AH
	PUSH	AX
	MOV	AH,28H
	CALL	GC
	CALL	RE
	POP	DX
	DEC	DX
	JS	RIL
	XCHG	AL,AH
RIL:	XOR	AH,AH
	MOV	[IMM],AX
	DEC	SI
	MOV	AH,29H

; --------------------------------
; CHECK FOR SPECIFIC CHARACTER
; OR CAUSE AN ERROR IF NOT
; ENCOUNTERED
GC:	INC	SI
GC0:	CALL	CC
	JZ	GC8
	CMP	AL,AH
	JNE	GC1
	INC	SI
	RET
GC1:	MOV	AL,1
	JMP	FAIL
GC8:	MOV	AL,8
	JMP	FAIL
RIA:	JMP	RE

; --------------------------------
; READ REGISTER BY NAME OR NUMBER
G1:	CALL	CC
	JZ	GC8
	CMP	BX,2
	JB	RA3
	JE	RA2
RA1:	CALL	RI
	CMP	AX,10H
	JB	G1S
	XOR	AL,AL
	JMP	FAIL
RA2:	CMP	AL,52H
	JNZ	RA1
	MOV	AL,[SI+1]
RA3:	SUB	AL,30H
	JC	RA1
	CMP	AL,0AH
	JC	RA4
	SUB	AL,7
	CMP	AL,10H
	JNB	RA1
RA4:	ADD	SI,BX
G1S:	ADD	[OPCODE],AL

; --------------------------------
; NO OPERANDS, RAGEQUIT
G0:	MOV	CX,1
	RET

; --------------------------------
; READ 8-BIT LITERAL
G2:	CALL	RI
	MOV	AX,[IMM]
	TEST	AH,AH
	JZ	G2S
	CALL	AA
	JZ	G2S
G2F:	MOV	AL,7
	JMP	FAIL
G2S:	MOV	CX,2
	RET

; --------------------------------
; READ 3-BIT LITERAL
G3:	CALL	RI
	MOV	AX,[IMM]
	CMP	AX,8
	JNC	G2F
	TEST	AX,AX
	JNZ	G1S
	XOR	AL,AL
	JMP	FAIL

; --------------------------------
; READ 16-BIT LITERAL
G4:	CALL	RI
	MOV	CX,3
	RET

; --------------------------------
; SHORT BRANCH WHICH FOR SOME
; INSANITARY REASON WAS NOT MADE
; SIGNED, BUT INTRAPAGE, SO THERE
; IS NO EARTHLY CHANCE OF
; RELOCATABLE CODE
G5:	CALL	RI
	MOV	AL,[IMM+1]
	CMP	AL,[PC+1]
	JZ	G2S

; INVALID ADDRESSING ERROR
; BECAUSE NO SPECIFIC OUT OF PAGE
; ERROR WAS EVER DEFINED, BUT
; IT IS EASY TO DO IF BYTES NEED
; BE WASTED--JUST APPEND IT TO
; THE LIST
	MOV	AL,2
	JMP	FAIL

; --------------------------------
; EVEN DIRECTIVE
D4:	MOV	AX,[PC]
	AND	AX,1
	JZ	D4X
	MOV	[BINLEN],AX
	MOV	DI,BINBUF
	MOV	AL,[OPCODE]
	STOSB
D4X:	RET

; --------------------------------
; PAGE DIRECTIVE
D8:	XOR	DX,DX
	CALL	CC
	JZ	D8X
	CALL	RE
	MOV	DX,AX
D8X:	JMP	SETEND

; --------------------------------
; WRITE ELEMENT FROM TABLE
; AT SI
WMN:	CLD
	XOR	CH,CH
	JZ	WMN2
WMN1:	LODSB
	CMP	AL,20H
	JNB	WMN1
WMN2:	LODSW
	DEC	CX
	JNS	WMN1
	JMP	WRM

; --------------------------------
; DISASSEMBLE ONE INSTRUCTION
DISASM:	MOV	BX,6

; WRITE DATA BYTE AS DB
	CALL	LDDAT
	JNC	DISAS2

; IF NOT DATA, DISASSEMBLE
	XOR	AH,AH
	MOV	AL,[OPCODE]
	MOV	BX,AX
	LODSW
	MOV	[IMM],AX

; GET MNEMONIC FOR OPCODE
	MOV	CL,[BINTBL+BX]
	TEST	CL,CL
	JS	DISAS1

; SIGNED INDEX MEANS DO NOT
; WRITE MNEMONIC QUITE YET
	PUSH	SI
	MOV	SI,MNMTBL
	CALL	WMN
	POP	SI
	MOV	AL,9
	STOSB

; INVOKE HANDLER TO DECODE
; OPERANDS
DISAS1:	SHR	BL,1
	MOV	BL,[BX+HDLTBL]
	JC	DISAS2
	SHR	BL,1
	SHR	BL,1
	SHR	BL,1
	SHR	BL,1
DISAS2:	AND	BL,0FH
	SHL	BL,1
	MOV	CX,1
	MOV	AL,[OPCODE]
	CALL	[BX+DHDL]
	MOV	[BINLEN],CX
	RET

; --------------------------------
; NO OPERANDS
IMPD:	DEC	DI
	RET

; --------------------------------
; RENDER INVALID OPCODE AS
; DATA DEFINITION
INVD:	PUSH	AX
	MOV	AX,4244H
	STOSW
	MOV	AL,9
	STOSB
	POP	AX
	JMP	WHAL

; --------------------------------
; REGISTER OPERAND
REGD:	MOV	BYTE [DI],52H
	INC	DI
	JMP	HALL

; --------------------------------
; 3-BIT IMMEDIATE ENCODED IN
; INSTRUCTION
INPD:	AND	AL,7
	ADD	AL,30H
	STOSB
	RET

; --------------------------------
; SILLY INTRAPAGE BRANCH
SBRD:	MOV	AH,[PC+1]
	MOV	AL,[IMM]
	INC	CX
	JMP	SHORT WHAX

; --------------------------------
; 16-BIT LITERAL
IMWD:	INC	CX
	INC	CX
	MOV	AX,[IMM]

; --------------------------------
; WRITE UNSIGNED WORD VALUE
WHAX:	PUSH	CX
	MOV	CL,0CH
	CALL	WSYMA
	POP	CX
	JNC	WHAX2
WHAX0:	CMP	AH,0A0H
	JB	WHAX1
	MOV	BYTE [DI],30H
	INC	DI
WHAX1:	PUSH	AX
	XCHG	AL,AH
	CALL	HALX
	POP	AX
	CALL	HALX
	MOV	AL,48H
	STOSB
WHAX2:	RET

; --------------------------------
; 8-BIT LITERAL
IMBD:	INC	CX
	MOV	AL,[IMM]

; --------------------------------
; WRITE SYMBOL OR UNSIGNED BYTE
WHAL:	PUSH	CX
	XOR	CL,CL
	CALL	WSYMA
	POP	CX
	JNC	WHAL2
WHAL0:	CMP	AL,0A0H
	JB	WHAL1
	MOV	BYTE [DI],30H
	INC	DI
WHAL1:	CALL	HALX
	MOV	AL,48H
	STOSB
WHAL2:	RET

; --------------------------------
; INSTRUCTION ASSEMBLY HANDLERS
IHDL:	DW	G0,G1,G2
	DW	G3,G4,G5

; --------------------------------
; DIRECTIVE HANDLERS
AHDL:	DW	SETEQU,SETDFB
	DW	SETDFS,SETORG
	DW	D4,D5,SETINC
	DW	SETEND,D8

; --------------------------------
; OPERAND DISASSEMBLY HANDLERS
DHDL:	DW	IMPD,IMBD,IMWD
	DW	REGD,INPD,SBRD
	DW	INVD

; --------------------------------
; OPERAND DECODER PER INSTRUCTION
; STORED AS NIBBLES
HDLTBL:	DB	03H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	55H,55H,55H,55H
	DB	05H,55H,55H,55H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	04H,44H,44H,44H
	DB	64H,44H,44H,44H
	DB	00H,00H,00H,00H
	DB	00H,00H,11H,01H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	22H,22H,00H,00H
	DB	02H,22H,00H,00H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	33H,33H,33H,33H
	DB	00H,00H,00H,00H
	DB	22H,22H,22H,02H

; --------------------------------
; MNEMONIC PER INSTRUCTION
BINTBL:	DB	19H,26H,26H,26H
	DB	26H,26H,26H,26H
	DB	26H,26H,26H,26H
	DB	26H,26H,26H,26H
	DB	1AH,1AH,1AH,1AH
	DB	1AH,1AH,1AH,1AH
	DB	1AH,1AH,1AH,1AH
	DB	1AH,1AH,1AH,1AH
	DB	15H,15H,15H,15H
	DB	15H,15H,15H,15H
	DB	15H,15H,15H,15H
	DB	15H,15H,15H,15H
	DB	12H,13H,14H,0AH
	DB	06H,07H,08H,09H
	DB	4AH,10H,11H,0FH
	DB	0BH,0CH,0DH,0EH
	DB	24H,24H,24H,24H
	DB	24H,24H,24H,24H
	DB	24H,24H,24H,24H
	DB	24H,24H,24H,24H
	DB	4FH,4FH,4FH,4FH
	DB	4FH,4FH,4FH,4FH
	DB	4FH,4FH,4FH,4FH
	DB	4FH,4FH,4FH,4FH
	DB	1CH,37H,37H,37H
	DB	37H,37H,37H,37H
	DB	80H,1BH,1BH,1BH
	DB	1BH,1BH,1BH,1BH
	DB	3AH,16H,28H,50H
	DB	00H,40H,49H,4CH
	DB	3EH,31H,3BH,44H
	DB	01H,41H,47H,4DH
	DB	18H,18H,18H,18H
	DB	18H,18H,18H,18H
	DB	18H,18H,18H,18H
	DB	18H,18H,18H,18H
	DB	17H,17H,17H,17H
	DB	17H,17H,17H,17H
	DB	17H,17H,17H,17H
	DB	17H,17H,17H,17H
	DB	39H,39H,39H,39H
	DB	39H,39H,39H,39H
	DB	39H,39H,39H,39H
	DB	39H,39H,39H,39H
	DB	38H,38H,38H,38H
	DB	38H,38H,38H,38H
	DB	38H,38H,38H,38H
	DB	38H,38H,38H,38H
	DB	21H,22H,23H,1DH
	DB	34H,2DH,2EH,2CH
	DB	2BH,1FH,20H,1EH
	DB	2AH,2FH,30H,29H
	DB	43H,43H,43H,43H
	DB	43H,43H,43H,43H
	DB	43H,43H,43H,43H
	DB	43H,43H,43H,43H
	DB	45H,45H,45H,45H
	DB	45H,45H,45H,45H
	DB	45H,45H,45H,45H
	DB	45H,45H,45H,45H
	DB	27H,35H,04H,51H
	DB	02H,3FH,48H,4BH
	DB	25H,36H,05H,52H
	DB	03H,42H,46H,4EH

; --------------------------------
; INSTRUCTION SET
MNMTBL:	DW	83
	DB	"ADC",0,74H,0
	DB	"ADCI",0,7CH,2
	DB	"ADD",0,0F4H,0
	DB	"ADI",0,0FCH,2
	DB	"AND",0,0F2H,0
	DB	"ANI",0,0FAH,2
	DB	"B1",0,34H,5
	DB	"B2",0,35H,5
	DB	"B3",0,36H,5
	DB	"B4",0,37H,5
	DB	"BDF",0,33H,5
	DB	"BN1",0,3CH,5
	DB	"BN2",0,3DH,5
	DB	"BN3",0,3EH,5
	DB	"BN4",0,3FH,5
	DB	"BNF",0,3BH,5
	DB	"BNQ",0,39H,5
	DB	"BNZ",0,3AH,5
	DB	"BR",0,30H,5
	DB	"BQ",0,31H,5
	DB	"BZ",0,32H,5
	DB	"DEC",0,20H,1
	DB	"DIS",0,71H,0
	DB	"GHI",0,90H,1
	DB	"GLO",0,80H,1
	DB	"IDL",0,00H,0
	DB	"INC",0,10H,1
	DB	"INP",0,68H,3
	DB	"IRX",0,60H,0
	DB	"LBDF",0,0C3H,4
	DB	"LBNF",0,0CBH,4
	DB	"LBNQ",0,0C9H,4
	DB	"LBNZ",0,0CAH,4
	DB	"LBR",0,0C0H,4
	DB	"LBQ",0,0C1H,4
	DB	"LBZ",0,0C2H,4
	DB	"LDA",0,40H,1
	DB	"LDI",0,0F8H,2
	DB	"LDN",0,00H,1
	DB	"LDX",0,0F0H,0
	DB	"LDXA",0,72H,0
	DB	"LSDF",0,0CFH,0
	DB	"LSIE",0,0CCH,0
	DB	"LSKP",0,0C8H,0
	DB	"LSNF",0,0C7H,0
	DB	"LSNQ",0,0C5H,0
	DB	"LSNZ",0,0C6H,0
	DB	"LSQ",0,0CDH,0
	DB	"LSZ",0,0CEH,0
	DB	"MARK",0,79H,0
	DB	"NBR",0,38H,0
	DB	"NLBR",0,0C8H,0
	DB	"NOP",0,0C4H,0
	DB	"OR",0,0F1H,0
	DB	"ORI",0,0F9H,2
	DB	"OUT",0,60H,3
	DB	"PHI",0,0B0H,1
	DB	"PLO",0,0A0H,1
	DB	"RET",0,70H,0
	DB	"REQ",0,7AH,0
	DB	"RSHL",0,7EH,0
	DB	"RSHR",0,76H,0
	DB	"SAV",0,78H,0
	DB	"SD",0,0F5H,0
	DB	"SDB",0,75H,0
	DB	"SDBI",0,7DH,2
	DB	"SDI",0,0FDH,2
	DB	"SEP",0,0D0H,1
	DB	"SEQ",0,7BH,0
	DB	"SEX",0,0E0H,1
	DB	"SHL",0,0FEH,0
	DB	"SHLC",0,7EH,0
	DB	"SHR",0,0F6H,0
	DB	"SHRC",0,76H,0
	DB	"SKP",0,38H,0
	DB	"SM",0,0F7H,0
	DB	"SMB",0,77H,0
	DB	"SMBI",0,7FH,2
	DB	"SMI",0,0FFH,2
	DB	"STR",0,50H,1
	DB	"STXD",0,73H,0
	DB	"XOR",0,0F3H,0
	DB	"XRI",0,0FBH,2

; --------------------------------
; ASSEMBLER DIRECTIVES
DIRTBL:	DW	13
	DB	"DB",0,1,1
	DB	"DS",0,0,2
	DB	"DW",0,2,1
	DB	"END",0,0FFH,7
	DB	"EQU",0,0,0
	DB	"EVEN",0,0,4
	DB	"HIGH",0,13H,5
	DB	"INCBIN",0,0FDH,6
	DB	"INCLUDE",0,0FEH,6
	DB	"LOW",0,12H,5
	DB	"ORG",0,0,3
	DB	"PAGE",0,0FAH,8
	DB	"TITLE",0,0FBH,6

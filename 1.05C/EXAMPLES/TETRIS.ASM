; --------------------------------
; THANK YOU ALEXEY PAJITNOV FOR
; INVENTING THIS DIGITAL DRUG
HEIGHT:	EQU	20

; GET RANDOM NUMBER FROM
; SYSTEM TIMER
	XOR	AH,AH
	INT	1AH
	MOV	[RANDS],DX
	XOR	[RANDS],CX

; ENCLOSE THE PLAYING FIELD
	CLD
	MOV	DI,FIELD
	MOV	AX,0FFFFH
	STOSW
	MOV	CX,HEIGHT
	MOV	AX,0E007H
	REP STOSW
	MOV	AX,0FFFFH
	STOSW

; ZERO OUT COUNTERS
	INC	AX
	MOV	DI,SCORE
	MOV	CX,16
	REP STOSW
	MOV	BYTE [FLAGS],80H

; SAVE OLD SCREEN BUFFER
	PUSH	DS
	MOV	DS,[SEGM]
	XOR	SI,SI
	MOV	DI,SCNBUF
	MOV	CX,2000
	CLD
	REP MOVSW
	POP	DS

; CLEAR OUT SCREEN
	PUSH	ES
	MOV	ES,[SEGM]
	XOR	DI,DI
	MOV	CX,2000
	MOV	AX,720H
	REP STOSW
	POP	ES
	MOV	SI,STATUS
	MOV	DI,228
	CALL	TEXT
	CALL	SHUF
	CALL	ONOFF
	IN	AL,60H
	MOV	[KEY],AL

; --------------------------------
; MAIN GAME LOOP
MAIN:	CALL	NEWPC
	CALL	GETPC
	CALL	REACT
	CALL	NUMBER
MAIN1:	CALL	DRAW
	CALL	SCAN
	JNZ	QUIT
MAIN2:	CALL	CLRKBD
	MOV	DX,3DAH
VRET1:	IN	AL,DX
	AND	AL,8
	JNZ	VRET1
VRET2:	IN	AL,DX
	AND	AL,8
	JZ	VRET2
	IN	AL,60H
	CMP	AL,[KEY]
	JE	MAIN3
	MOV	[KEY],AL
	MOV	DI,KEYS
	MOV	CX,8;11
	CLD
	REPNE SCASB
	JNE	MAIN3

; HANDLE INPUT
	SUB	DI,KEYS+1
	SHL	DI,1
	MOV	BP,[COL]
	CALL	[DI+COMMS]
	JNZ	MAIN
	CMP	AL,15H
	JE	QUIT

; THIS IS A CRUDE WAY TO SET
; FALLING SPEED
MAIN3:	INC	BYTE [TICK]
	MOV	AL,[MAX]
	CMP	[TICK],AL
	JB	MAIN1
	XOR	AL,AL
	MOV	[TICK],AL
	CALL	FALL
	JZ	MAIN1
	JMP	SHORT MAIN

; SHOW GAME OVER TEXT AND
; WAIT FOR KEYPRESS
QUIT:	MOV	SI,GOVER
	MOV	DI,1622
	CALL	TEXT
	CALL	CLRKBD
QUITL:	IN	AL,60H
	CMP	AL,1
	JNE	QUITL

; RESTORE OLD SCREEN
	PUSH	ES
	MOV	ES,[SEGM]
	XOR	DI,DI
	MOV	SI,SCNBUF
	MOV	CX,2000
	CLD
	REP MOVSW
	POP	ES
	RET

; --------------------------------
; CHECK FOR FULL ROWS
REACT:	CLD
	XOR	DX,DX
	MOV	SI,FIELD+2
	MOV	CX,HEIGHT
REACTL:	MOV	DI,SI
	LODSW

; ALL ONES INCREMENTS TO 0
	INC	AX
	JNZ	REACTS

; INCREASE NUMBER OF REACTIONS
	INC	DX
	MOV	AX,0E007H
	STOSW
REACTS:	LOOP	REACTL

; ANY POINTS SCORED?
	OR	DX,DX
	JZ	LEVCAL

; STOLE THE NUMBERS
; FROM NES TETRIS
	ADD	[LINES],DX
	ADD	[COUNT],DL
	XOR	AX,AX
	XCHG	DX,AX

; FIRST, CALCULATE SCORE
	MOV	CX,40
	CMP	AL,2
	JB	YESSCR
	MOV	CX,100
	CMP	AL,3
	JB	YESSCR
	MOV	CX,300
	CMP	AL,4
	JB	YESSCR
	MOV	CX,1200
YESSCR:	MOV	AX,[LEVEL]
	INC	AX
	MUL	CX
	ADD	[SCORE],AX
	ADC	[SCORE+2],DX

; SETTLE DEBRIS
	STD
	MOV	CX,HEIGHT
	MOV	BX,2
	MOV	SI,FIELD+HEIGHT+HEIGHT
COMP:	PUSH	CX
	MOV	AX,0E007H
	MOV	CX,HEIGHT
	MOV	DI,FIELD+HEIGHT+HEIGHT
	REPNE SCASW
	JNE	LEVCAL
	LODSW
	CMP	DI,SI
	JB	COMPS
	XCHG	AX,[BX+DI]
	MOV	[BX+SI],AX
COMPS:	POP	CX
	LOOP	COMP

; CALCULATE LEVEL
; FROM CLEARED LINES
LEVCAL:	MOV	AL,[COUNT]
	CMP	AL,10
	JB	NOCOMP
	SUB	AL,10
	MOV	[COUNT],AL
	INC	WORD [LEVEL]
	MOV	AL,[MAX]
	SUB	AL,2
	JNS	ZERO
	XOR	AL,AL
ZERO:	MOV	[MAX],AL
NOCOMP:	RET

; PIECE MOVEMENTS
LEFT:	DEC	BYTE [COL]
	DEC	BYTE [COL]
RIGHT:	INC	BYTE [COL]
	CALL	GETPC
	JNZ	OLDRC
	RET

; --------------------------------
; DEBUG!!!!!!
;UP:	DEC	BYTE [ROW]
;	MOV	BYTE [TICK],0
;	CALL	GETPC
;	JZ	NOCOMP
;	INC	BYTE [ROW]
;	JMP	SHORT GETPC

; --------------------------------
; ROTATION
;ROTL:	DEC	BYTE [ROT]
;	DEC	BYTE [ROT]
ROTR:	INC	BYTE [ROT]
	TEST	BYTE [FLAGS],40H
	JZ	NOFREE
	MOV	BYTE [TICK],0
NOFREE:	CALL	GETPC
	JZ	NOCOMP
OLDRC:	MOV	[COL],BP

; --------------------------------
; DECOMPRESS ENCODED PIECE
GETPC:	MOV	AX,[ROT]
	AND	AX,703H
	SHL	AX,1
	SHL	AH,1
	SHL	AH,1
	ADD	AL,AH
	XOR	AH,AH
	MOV	BX,PIECE
	ADD	BX,AX
	MOV	AX,[BX]
	AND	AX,0F0F0H
	MOV	[CUR+1],AL
	MOV	[CUR+5],AH
	MOV	AX,[BX]
	MOV	CL,4
	SHL	AX,CL
	AND	AX,0F0F0H
	MOV	[CUR+3],AL
	MOV	[CUR+7],AH
	MOV	CL,[COL]
	MOV	BX,6
	MOV	SI,CUR
GETPCL:	MOV	[BX+SI],BH
	ROR	WORD [BX+SI],CL
	DEC	BX
	DEC	BX
	JNS	GETPCL

; SCAN FOR COLLISIONS
SCAN:	MOV	AL,[ROW]
	XOR	AH,AH
	SHL	AX,1
	MOV	BX,FIELD
	ADD	BX,AX
	MOV	SI,CUR
	MOV	CX,4
	CLD
GETPC1:	LODSW
	TEST	AX,[BX]
	JNZ	GETPC0
	INC	BX
	INC	BX
	LOOP	GETPC1
	XOR	AX,AX
GETPC0:	RET

; THE INEVITABLE DOWN MOVE
DOWN:	INC	BYTE [DROPD]
FALL:	INC	BYTE [ROW]
	CALL	SCAN
	JNZ	FIX
	RET
DROPPT:	INC	BYTE [DROPD]
DROP:	INC	BYTE [ROW]
	CALL	SCAN
	JZ	DROPPT
FIX:	DEC	BYTE [ROW]
	MOV	AL,[ROW]
	XOR	AH,AH
	SHL	AL,1
	ADD	AX,FIELD
	MOV	DI,AX
	MOV	SI,CUR
	MOV	CX,4
	CLD
FIXL:	LODSW
	OR	AX,[DI]
	STOSW
	LOOP	FIXL
	OR	AL,1
	RET

; --------------------------------
; BAMBOOZLE KEYBOARD BUFFER
CLRKBD:	PUSH	DS
	MOV	AX,40H
	MOV	DS,AX
	MOV	AX,[1AH]
	MOV	[1CH],AX
	POP	DS
	RET

; --------------------------------
; TOGGLE HINT
HINT:	XOR	BYTE [FLAGS],80H
	CALL	SHUF0
	JMP	SHORT ONOFF

; --------------------------------
; TOGGLE FREE ROTATION
FREE:	XOR	BYTE [FLAGS],40H

; --------------------------------
; WRITE PERTINENT ON/OFF TEXT
ONOFF:	MOV	DI,2828
	TEST	BYTE [FLAGS],40H
	CALL	ONOFFW
	MOV	DI,3130
	TEST	BYTE [FLAGS],80H	
ONOFFW:	MOV	SI,ONTXT
	JNZ	ISON
	MOV	SI,OFFTXT
ISON:	JMP	SHORT TEXT

; --------------------------------
; DISPLAY SCORE AND LEVEL
NUMBER:	MOV	AX,[SCORE]
	MOV	DX,[SCORE+2]
	STD
	MOV	DI,SCRN+10
	MOV	SI,DI
	MOV	BX,DX
	MOV	CX,0AH
WDWOR1:	CMP	DX,CX
	JB	WDWOR2
	XOR	DX,DX
	XCHG	AX,BX
	DIV	CX
	XCHG	AX,BX
	DIV	CX
	XCHG	AX,DX
	OR	AL,30H
	STOSB
	MOV	AX,BX
	XCHG	AX,DX
	JMP	SHORT WDWOR1
WDWOR2:	DIV	CX
	XCHG	AX,DX
	OR	AL,30H
	STOSB
	XOR	AX,AX
	XCHG	AX,DX
	TEST	AX,AX
	JNZ	WDWOR2
	MOV	AX,[LINES]
	MOV	DI,LINTXT+4
	MOV	CX,4
	MOV	BX,10
NUML:	XOR	DX,DX
	DIV	BX
	ADD	DL,30H
	MOV	[DI],DL
	DEC	DI
	LOOP	NUML
	MOV	AX,[LEVEL]
	AAM
	OR	AX,3030H
	XCHG	AL,AH
	MOV	[LVLTXT+1],AX
	MOV	SI,LINTXT
	MOV	DI,1526
	CALL	TEXT
	MOV	SI,LVLTXT
	MOV	DI,1508
	CALL	TEXT
	MOV	SI,SCRN
	MOV	DI,1028

; --------------------------------
; DISPLAY ARBITRARY TEXT
; AT ARBITRARY POSITION
TEXT:	PUSH	ES
	MOV	ES,[SEGM]
	CLD
	LODSB
	MOV	CL,AL
	XOR	CH,CH
	MOV	AH,7
	MOV	BP,DI
TEXTL:	LODSB
	CMP	AL,13
	JE	TEXTNL
	CMP	AL,10
	JE	TEXTCH
	STOSW
TEXTCH:	LOOP	TEXTL
	JMP	SHORT TEXT0
TEXTNL:	ADD	BP,160
	MOV	DI,BP
	LOOP	TEXTL
TEXT0:	POP	ES
	XOR	AX,AX
	RET

; --------------------------------
; SET UP NEW PIECE
NEWPC:	MOV	AL,[DROPD]
	XOR	AH,AH
	ADD	[SCORE],AX
	ADC	WORD [SCORE+2],0
	XOR	AL,AL
	MOV	[ROT],AL
	MOV	[DROPD],AL
	INC	AX
	MOV	[ROW],AL
	MOV	AL,6
	MOV	[COL],AL
	MOV	AL,[NEXT]
	MOV	[PCE],AL

; --------------------------------
; SHUFFLE THE DECK AND
; GET NEXT PIECE
SHUF:	MOV	AX,7
	CALL	RAND
	INC	AX
	MOV	[NEXT],AL
SHUF0:	MOV	AL,[NEXT]
	TEST	BYTE [FLAGS],80H
	JNZ	SHUF1
	XOR	AL,AL

; DRAW NEXT PIECE
SHUF1:	SHL	AX,1
	SHL	AX,1
	SHL	AX,1
	MOV	DI,388
	MOV	BX,PIECE
	ADD	BX,AX
	MOV	DH,[BX]
	PUSH	ES
	MOV	ES,[SEGM]
	MOV	AH,7
	MOV	CX,2
SHUF2:	PUSH	CX
	MOV	CX,4
	CALL	DRAWL
	ADD	DI,144
	POP	CX
	LOOP	SHUF2
	POP	ES
	RET

; --------------------------------
; GET RANDOM NUMBER BETWEEN
; 0 AND AX
RAND:	PUSH	CX
	PUSH	DX
	PUSH	AX
	MOV	AX,[RANDS]
	MOV	DX,AX
	MOV	CL,7
	SHL	DX,CL
	XOR	AX,DX
	MOV	DX,AX
	ADD	CL,2
	SHR	DX,CL
	XOR	AX,DX
	MOV	DX,AX
	DEC	CL
	SHL	DX,CL
	XOR	AX,DX
	XOR	DX,DX
	MOV	[RANDS],AX
	POP	CX
	OR	CX,CX
	JZ	RAND0
	DIV	CX
RAND0:	MOV	AX,DX
	POP	DX
	POP	CX
	RET

; --------------------------------
; PAUSE GAME, OBVIOUSLY
PAUSE:	MOV	SI,PAUSED
	MOV	DI,1622
	CALL	TEXT
	CALL	CLRKBD
PAUSEL:	IN	AL,60H
	CMP	AL,[KEY]
	JE	PAUSEL
	MOV	[KEY],AL
	CMP	AL,80H
	JNB	PAUSEL
	XOR	AH,AH
	RET

; --------------------------------
; REDRAW THE FIELD+PIECE
DRAW:	PUSH	ES
	MOV	ES,[SEGM]
	MOV	CX,HEIGHT+2
	XOR	DI,DI
	MOV	SI,FIELD
	CLD
DRAWVL:	PUSH	CX
	LODSW
	MOV	DX,AX
	MOV	AH,7
	MOV	BX,HEIGHT+2
	SUB	BX,CX
	SUB	BL,[ROW]
	JB	DRAWH
	CMP	BL,4
	JNB	DRAWH
	SHL	BL,1
	OR	DX,[BX+CUR]
DRAWH:	MOV	CX,16
	CALL	DRAWL
	ADD	DI,96
	POP	CX
	LOOP	DRAWVL
	POP	ES
	RET

; --------------------------------
; DRAW ONE LINE OF BLOCKS
DRAWL:	SHL	DX,1
	CMC
	SBB	AL,AL
	AND	AL,91H
	XOR	AL,0B1H
	STOSW
	STOSW
	LOOP	DRAWL
	RET

; ACTUAL BITMAPS OF ALL 8
; PIECES AT ALL 4 ROTATIONS
PIECE:	DB	0,0,0,0,0,0,0,0
;I
	DB	0F0H,00H,44H,44H
	DB	0F0H,00H,44H,44H
;O
	DB	66H,00H,66H,00H
	DB	66H,00H,66H,00H
;T
	DB	0E4H,00H,4CH,40H
	DB	4EH,00H,46H,40H
;J
	DB	2EH,00H,44H,60H
	DB	0E8H,00H,0C4H,40H
;L
	DB	8EH,00H,64H,40H
	DB	0E2H,00H,44H,0C0H
;S
	DB	6CH,00H,8CH,40H
	DB	6CH,00H,8CH,40H
;Z
	DB	0C6H,00H,4CH,80H
	DB	0C6H,00H,4CH,80H

; VALID CONTROLS
KEYS:	DB	4BH,50H,4DH,48H
	DB	01H,1CH,21H,23H
;	DB	0FH,0EH,39H

; WHAT THEY MAP TO
COMMS:	DW	LEFT,DOWN,RIGHT
	DW	ROTR,PAUSE,DROP
	DW	FREE,HINT
;	DW	UP,SHUF,ROTL

; THE REST, AS THEY SAY,
; IS HISTORY
SEGM:	DW	0B800H
MAX:	DB	64
STATUS:	DB	117
	DB	"NEXT",13,13,13,13
	DB	"SCORE",13,13,13
	DB	"LEVEL    LINES",13,13,13
	DB	32,24,"   TURN",13
	DB	27,197,26,"  MOVE",13
	DB	32,25,"   DOWN",13,13
	DB	27,217,"   DROP",13,13
	DB	"F    FREE ROTATION:",13,13
	DB	"H    HINT:",13,13
	DB	"ESC  QUIT"
PAUSED:	DB	11,"QUIT? (Y/N)"
GOVER:	DB	23," GAME OVER ",13
	DB	" PRESS ESC "
ONTXT:	DB	3,"ON "
OFFTXT:	DB	3,"OFF"
SCRN:	DB	10
	DB	48,48,48,48,48
	DB	48,48,48,48,48
LINTXT:	DB	4,48,48,48,48
LVLTXT:	DB	2,48,48
RANDS:	DW	?
SCORE:	DW	?,?
LINES:	DW	?
LEVEL:	DW	?
COUNT:	DB	?
FLAGS:	DB	?
TICK:	DB	?
DROPD:	DB	?
KEY:	DB	?
ROW:	DB	?
COL:	DB	?
ROT:	DB	?
PCE:	DB	?
NEXT:	DB	?
CUR:	DS	8
FIELD:	DS	44
SCNBUF:

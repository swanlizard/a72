; --------------------------------
; 6502-SPECIFIC LINE ASSEMBLER
ASMCMD:	CMP	BX,3
	JNZ	ASCMEN

; 6502 MNEMONICS ARE ALL
; 3 CHARACTERS LONG
	XOR	DX,DX
	DEC	BX
CM1:	MOV	CX,5
	MOV	AL,[BX+SI]
	SUB	AL,40H

; SQUEEZE IT DOWN TO 5 BITS PER
; CHARACTER
CM2:	ROR	AL,1
	RCR	DX,1
	LOOP	CM2
	DEC	BX
	JNS	CM1

; CHECK FOR DIRECTIVE
	MOV	BX,8
RMDIR:	DEC	BX
	JS	RMNEM
	CMP	DL,[DIRMR+BX]
	JNZ	RMDIR
	CMP	DH,[DIRML+BX]
	JNZ	RMDIR
	MOV	[OPCODE],BL
	ADD	SI,3
	SHL	BX,1
	CALL	[BX+AHDL]
	CMP	AL,AL
	RET


; 64 ENTRIES IN THE MNEMONIC TABLE
RMNEM:	MOV	BX,64
RM:	DEC	BX
	JS	ASCMEN
	CMP	DL,[MNEMR+BX]
	JNZ	RM
	CMP	DH,[MNEML+BX]
	JNZ	RM
	ADD	SI,3

; READ ADDRESSING MODE
	PUSH	DX
	CALL	RA
	POP	DX
	MOV	CL,BL

; GET OPCODE VIA ADDRESSING MODE
; AND INDEX
	CALL	SCAN

; ADDRESSING MODE FLAGS ALSO
; ENCODE LENGTH
	MOV	AL,[FLAGS]
	AND	AX,3
	MOV	[BINLEN],AX
	ADD	[PC],AX
	MOV	DI,BINBUF
	CLD
	MOV	AL,[OPCODE]
	STOSB
	MOV	AX,[IMM]
	STOSW
	CMP	AL,AL
ASCMEN:	RET
ASCMER:	MOV	AL,1
	JMP	FAIL

; --------------------------------
; DETERMINE OPCODE VIA BRUTE FORCE
SCAN:	XOR	AL,AL
	MOV	[OPCODE],AL
SCAN1:	MOV	AL,[OPCODE]

; EVERY ------11 OPCODE IS BAD,
; SO GO AHEAD AND SKIP
	AND	AL,3
	CMP	AL,3
	JZ	SCAN3

; IT GOES THROUGH ALL OPCODES ONE
; BY ONE AND DECODING THEM WITH
; MNEM TO DETERMINE WHETHER THEY
; FIT THE SPECIFIED MNEMONIC INDEX
; AND ADDRESSING MODE
	MOV	AL,[OPCODE]
	CALL	MNEM

; MNEMONIC MATCHES?
	CMP	DL,[BX+MNEMR]
	JNZ	SCAN3
	CMP	DH,[BX+MNEML]
	JNZ	SCAN3

; ADDRESSING MODE MATCHES?
	CMP	AL,CL
	JZ	SCAN6

; ADDRESS SPECIAL CASES
	CMP	AH,4CH
	JZ	SCAN4
	CMP	AH,20H
	JZ	SCAN4
	CMP	AL,09H
	JZ	SCAN7
	CMP	AL,0AH
	JZ	SCAN2
	CMP	AL,0CH
	JZ	SCAN8
	CMP	CL,0DH
	JNZ	SCAN3
	CMP	AL,06H
	JZ	SCAN5
SCAN2:	CMP	CL,08H
	JZ	SCAN6
SCAN3:	INC	BYTE [OPCODE]
	JNZ	SCAN1

; INVALID ADDRESSING MODE ERROR
ERR2:	MOV	AL,2
	JMP	FAIL

; SUPPOSE A CALL OR JUMP GOT AN
; ADDRESS THAT WAS INTERPRETED
; AS A BYTE SIZE VALUE
SCAN4:	CMP	CL,1
	JNZ	SCAN3

; Y INDEXED DIRECT MUST BE WORD
; SIZED
SCAN5:	MOV	AL,3
	MOV	[FLAGS],AL
SCAN6:	RET

; INVALID ADDRESSING MODE ADDED
; FOR SINGLE BYTE DFBS FOR DEBUG
; PURPOSES
SCAN7:	CMP	CL,1
	JNZ	ERR2

; THE OPERAND IS NOW THE OPCODE
	MOV	BYTE [FLAGS],1
	MOV	AL,[IMM]
	MOV	[OPCODE],AL
	RET

; RELATIVE BRANCHES HAVE THEIR
; OWN LITTLE SPECIAL HANDLER
SCAN8:	MOV	AX,[IMM]
	SUB	AX,[PC]
	SUB	AX,2
	MOV	[IMM],AX
	MOV	BYTE [FLAGS],2
	CALL	AA
	JZ	SCAN6

; RELATIVE JUMP OUT OF RANGE ERROR
ERR5:	MOV	AL,5
	JMP	FAIL

; --------------------------------
; DIRECTIVES ARE HANDLED
; DIFFERENTLY, SO OPCODE MUST
; BE MANUALLY SET
D5:	MOV	AL,0FFH
	JMP	FAIL
D6:	MOV	AL,4
	SUB	AL,[OPCODE]
	MOV	[OPCODE],AL
	JMP	SETINC

; --------------------------------
; READ ARGUMENTS AND DETERMINE
; ADDRESSING MODE
RA:	MOV	BYTE [FLAGS],1
	MOV	DI,5
RALFT:	CALL	CC
	JZ	RAADJ

; ANYTHING OVER ONE CHARACTER IS
; FOR SURE NOT APPLICABLE
	CMP	BX,1
	JNZ	RAVAL
	CALL	RDCHR

; ONLY THREE DIFFERENT CHARACTERS
; ARE APPLICABLE BEFORE A CONSTANT
	CMP	DI,3
	JNB	RALFT

; ADD SIZE OF THE OPERAND
RAVAL:	INC	BYTE [FLAGS]
	CALL	RE
	MOV	DI,2

; ADJUST SIZE OF OPERAND IF WORD
	TEST	CL,13H
	JNZ	RAWORD
	TEST	AH,AH
	JZ	RARGT
RAWORD:	INC	BYTE [FLAGS]

; READ THE REST OF APPLICABLE
; CHARACTERS
RARGT:	CALL	CC
	JZ	RAADJ
	CMP	BX,1
	JNZ	RAERR
	CALL	RDCHR
	JNS	RARGT

; SOME VALUES ARE FLAGGED AS
; WORD SIZED AND END UP CAUSING
; WORD SIZE ADJUSTMENT ON FLAGS;
; DOUBLE CHECK THOSE VALUES
RAADJ:	MOV	AL,[FLAGS]
	CMP	AL,3BH
	JZ	RASIZT
	CMP	AL,2FH
	JZ	RASIZT
	CMP	AL,43H
	JZ	RASIZT

; ON THE OTHER HAND, CALLS OR
; JUMPS MAY END UP WITH A VALUE
; FLAGGED AS BYTE-SIZED--ADJUST
; ACCORDINGLY
	CMP	AL,2AH
	JNZ	RAFLAG
	INC	AX
	JMP	SHORT RAFLAG

; ONLY BOTHER CHECKING VALUE
; SIZE IF MODE 2 ACTIVE
RASIZT:	MOV	AL,[FUNC]
	AND	AL,2
	JZ	RABYTE
	MOV	AX,[IMM]
	TEST	AH,AH
	JZ	RABYTE
	CALL	AA
	JZ	RABYTE

; CONSTANT TOO LARGE ERROR
	MOV	AL,7
	JMP	FAIL
RABYTE:	MOV	AL,[FLAGS]
	AND	AL,0FEH
RAFLAG:	MOV	[FLAGS],AL

; FIND MODE INDEX OR DIE TRYING
	MOV	BX,13
RACHK:	CMP	AL,[BX+MODE]
	JZ	RAEND
	DEC	BX
	JNS	RACHK

; INVALID ADDRESSING MODE ERROR
	MOV	AL,2
	JMP	FAIL
RAEND:	RET

; SYNTAX ERROR
RAERR:	MOV	AL,1
	JMP	FAIL

; --------------------------------
; SCAN FOR APPLICABLE ADDRESSING
; MODE CHARACTERS
RDCHR:	MOV	DX,SI

; CHECK FIRST CHARACTER AND
; ADVANCE PAST
	CMP	AL,[DI+CHAR1]
	JNZ	RDCHR4
	INC	SI

; CHECK IF SECOND CHARACTER
; OPTIONAL
	MOV	AL,[DI+CHAR2]
	TEST	AL,AL
	JZ	RDCHR2
	CALL	CC
	JNZ	RDCHR1

; MISSING OPERAND ERROR
	MOV	AL,8
	JMP	FAIL

; CHECK SECOND CHARACTER AND
; ADVANCE PAST
RDCHR1:	CMP	AL,[DI+CHAR2]
	JNZ	RDCHR4
	INC	SI

; SAVE NEW POSITION
RDCHR2:	MOV	DX,SI
	PUSH	DI

; ROTATE FLAG INTO POSITION
; AND APPLY
	MOV	AL,2
RDCHR3:	SHL	AL,1
	DEC	DI
	JNS	RDCHR3
	POP	DI
	OR	[FLAGS],AL
RDCHR4:	MOV	SI,DX
	DEC	DI
	RET

; --------------------------------
; READ NUMERIC CONSTANT
RNC:	PUSH	CX

; DEFAULT TO DECIMAL
	MOV	CL,5

; CHECK NUMBER BASE SIGIL
	CMP	AL,24H
	JZ	RNC16
	CMP	AL,25H
	JZ	RNC2
	CMP	AL,30H
	JC	RNC0
	CMP	AL,3AH
	JC	RNC10
	CMP	AL,40H
	JZ	RNC8
RNC0:	POP	CX
	STC
	RET

; ROTATION COUNT SLIDE
RNC2:	DEC	CX
RNC4:	DEC	CX
RNC8:	DEC	CX
RNC16:	DEC	CX

; SKIP PAST SIGIL
	INC	SI
	CALL	CC
	JZ	RNM8
RNC10:	PUSH	AX
	PUSH	BX
	PUSH	SI
	CALL	RN
	POP	SI
	POP	BX
	POP	AX
	JNZ	RNC0
	POP	CX

; SKIP PAST CONSTANT
	ADD	SI,BX
	CLC
	RET

; MISSING OPERAND ERROR
RNM8:	MOV	AL,8
	JMP	FAIL

; --------------------------------
; SCAN FOR LOW/HIGH BYTE OVERRIDE
RNM:	MOV	AH,4
	CMP	AL,3CH
	JZ	RNM1
	MOV	AH,8
	CMP	AL,3EH
	JZ	RNM1
	MOV	AH,10H
	CMP	AL,21H
	JZ	RNM1
	RET
RNM1:	OR	CL,AH
	INC	SI
	CALL	CC
	JZ	RNM8
	CMP	AL,AL
	RET

; --------------------------------
; DISASSEMBLE ONE INSTRUCTION
DISASM:	CALL	LDDAT

; WRITE DATA BYTE AS DFB
	MOV	BX,10H
	MOV	AL,9
	JNC	WMN

; IF NOT DATA, DISASSEMBLE
	LODSW
	MOV	[IMM],AX

; GET MNEMONIC INDEX IN BX AND
; ADDRESSING MODE IN AL
	MOV	AL,[OPCODE]
	CALL	MNEM

; DECODE 5-BIT STORED MNEMONIC
WMN:	PUSH	AX
	MOV	DL,[MNEMR+BX]
	MOV	DH,[MNEML+BX]
	MOV	BX,3
WMN1:	MOV	CX,5
WMN2:	ROL	DX,1
	RCL	AL,1
	LOOP	WMN2
	AND	AL,1FH
	ADD	AL,40H
	STOSB
	DEC	BX
	JNZ	WMN1
	POP	BX

; RESTORE DATA FIELD, OPCODE, AND
; ADDRESSING MODE
	MOV	CH,BH
	XOR	BH,BH

; GET ADDRESSING MODE FLAGS AND
; WRITE OUT INSTRUCTION OPERAND
	MOV	CL,[BX+MODE]
	CMP	CL,1
	JZ	UNRAE
	MOV	AL,9
	STOSB
	CMP	CL,55H
	JZ	INVD
	CMP	CL,0AAH
	JZ	RELD
	MOV	BL,5
	MOV	CH,CL
	AND	CL,3

; OPPOSITE OF RA
UNRAA:	SHL	CH,1
	JNC	UNRAB
	MOV	AL,[CHAR1+BX]
	STOSB
	MOV	AL,[CHAR2+BX]
	TEST	AL,AL
	JZ	UNRAB
	STOSB
UNRAB:	CMP	BL,3
	JNE	UNRAD
	CMP	CL,2
	JB	UNRAD
	MOV	AX,[IMM]
	CMP	CL,3
	JB	UNRAC
	PUSH	CX
	PUSH	BX
	CALL	RELD0
	POP	BX
	POP	CX
	JMP	SHORT UNRAD
UNRAC:	PUSH	CX
	PUSH	BX
	XOR	CL,CL
	CALL	WSYMA
	POP	BX
	POP	CX
	JNC	UNRAD
	CALL	INVD0
UNRAD:	DEC	BX
	JNS	UNRAA
UNRAE:	XOR	CH,CH
	MOV	[BINLEN],CX
	RET

; ILLEGAL OPCODES JUST WRITE OUT
; THEIR OPCODE AS A DFB
INVD:	MOV	WORD [BINLEN],1
	MOV	AL,[OPCODE]
INVD0:	PUSH	AX
	MOV	AL,24H
	STOSB
	POP	AX
	JMP	HALX

; RELATIVE BRANCHES ARE A SPECIAL
; CASE SCENARIO
RELD:	MOV	WORD [BINLEN],2
	MOV	AL,[IMM]
	CBW
	ADD	AX,2
	ADD	AX,[PC]
RELD0:	MOV	CL,0CH
	CALL	WSYMA
	JC	RELD1
	RET
RELD1:	PUSH	AX
	MOV	AL,24H
	STOSB
	MOV	AL,AH
	CALL	HALX
	POP	AX
	JMP	HALX

; --------------------------------
; EXTRACT INSTRUCTION PARAMETERS
; FROM OPCODE
MNEM:	XOR	BH,BH
	MOV	AH,AL

; ------10 IS POTENTIALLY A BIT
; SHIFT OPERATION
	SHR	AL,1
	JNC	ASLD

; ------11 IS ILLEGAL
	RCR	AL,1
	JC	INVI

; CANNOT STA IMMEDIATE
	CMP	AL,0A2H
	JZ	INVI

; EVERYTHING ------01 OTHER THAN
; STA IS FULLY REGULAR AND FOLLOWS
; A SET PATTERN
	AND	AL,87H

; GET ADDRESSING MODE INDEX FROM
; TABLE.  ONLY 128 INSTRUCTIONS
; NEED BE ENCODED: EVERY OTHER
; INSTRUCTION IS EITHER ILLEGAL
; ('11) OR REGULAR ENOUGH THAT IT
; NEEDS NO DECODING ('01)
ASLD:	SHR	AL,1
	MOV	BL,AL
	MOV	AL,[DGRP+BX]

; TABLE IS STORED AS NIBBLES, AND
; ODD INDICES MUST BE SHIFTED INTO
; POSITION
	JC	ODDD
	SHR	AL,1
	SHR	AL,1
	SHR	AL,1
	SHR	AL,1
ODDD:	AND	AL,0FH
	CMP	AL,9
	JNZ	GMNM

; ILLEGAL INSTRUCTIONS JUST GET
; DFB DIRECTIVE
INVI:	MOV	AL,9
	MOV	BL,10H
	RET

; CALCULATE MNEMONIC INDEX
GMNM:	PUSH	AX
	MOV	AL,AH
	MOV	BL,3

; TXA GROUP HAS A SPECIFIC PATTERN
	AND	AH,8FH
	CMP	AH,8AH
	JZ	TXAD

; LOOPBACK FOR '100 GROUP
DFBD:	SHR	AL,1
	JNC	TXAD

; FALL THROUGH TO REGULAR '01
	SHR	AL,1

; LOOPBACK FOR '000 GROUP
BRKD:	SHR	AL,1
	OR	AL,20H
	DEC	BX
	JNZ	BRKD
	INC	BX
TXAD:	DEC	BX
	JNZ	DFBD
	MOV	BL,AL
	POP	AX
	RET

; --------------------------------
; DIRECTIVE HANDLERS
AHDL:	DW	SETDFS,SETDFB
	DW	SETDFB,SETEQU
	DW	SETORG,D5,D6,D6

; --------------------------------
; DIRECTIVE MNEMONICS
DIRML:	DB	21H,21H,21H,2CH
	DB	7CH,2BH,0CH,12H
DIRMR:	DB	0A6H,84H,0AEH,6AH
	DB	8EH,88H,20H,5CH

; --------------------------------
; ADDRESSING MODE CHARACTERS
CHAR1:	DB	2CH,29H,2CH
	DB	28H,23H,41H
CHAR2:	DB	59H,00H,58H
	DB	00H,00H,00H

; --------------------------------
; ADDRESSING MODE FLAGS
MODE:	DB	3AH,02H,42H,03H
	DB	2EH,12H,07H,13H
	DB	01H,55H,81H,2BH
	DB	0AAH,06H

; --------------------------------
; ADDRESSING MODE INDICES BY
; OPCODE, BARRING ILLEGAL '11 AND
; FULLY REGULAR '01 SETS
DGRP:	DB	89H,91H,8AH,93H
	DB	0C9H,95H,89H,97H
	DB	39H,11H,8AH,33H
	DB	0C9H,95H,89H,97H
	DB	89H,91H,8AH,33H
	DB	0C9H,95H,89H,97H
	DB	89H,91H,8AH,0B3H
	DB	0C9H,95H,89H,97H
	DB	99H,11H,88H,33H
	DB	0C9H,5DH,88H,99H
	DB	22H,11H,88H,33H
	DB	0C9H,5DH,88H,76H
	DB	29H,11H,88H,33H
	DB	0C9H,95H,89H,97H
	DB	29H,11H,88H,33H
	DB	0C9H,95H,89H,97H
	DB	01H,23H,45H,67H

; --------------------------------
; MNEMONICS ARRANGED BY GROUP
; 000, 100, 1010, 10, 01
MNEML:	DB	14H,82H,14H,1BH
	DB	54H,83H,13H,99H
	DB	95H,82H,15H,1BH
	DB	95H,83H,15H,99H
	DB	21H,21H,10H,0A6H
	DB	61H,0A0H,10H,1BH
	DB	1CH,4BH,13H,1BH
	DB	1CH,4BH,11H,99H
	DB	21H,12H,53H,53H
	DB	9DH,61H,1CH,1CH
	DB	0A6H,0A6H,0A0H,0A4H
	DB	21H,21H,73H,21H
	DB	0CH,93H,64H,93H
	DB	9DH,61H,21H,4BH
	DB	7CH,0BH,2BH,09H
	DB	9DH,61H,1BH,98H
MNEMR:	DB	96H,20H,18H,06H
	DB	0E4H,20H,52H,46H
	DB	12H,02H,86H,12H
	DB	26H,02H,0A6H,52H
	DB	84H,72H,0C6H,42H
	DB	32H,72H,0E6H,2CH
	DB	32H,0B2H,8AH,08H
	DB	30H,0B0H,62H,48H
	DB	84H,68H,60H,60H
	DB	32H,32H,32H,30H
	DB	02H,26H,70H,0F0H
	DB	70H,84H,0E0H,84H
	DB	0D8H,0D8H,0E4H,0E4H
	DB	30H,30H,46H,86H
	DB	82H,88H,0E4H,06H
	DB	02H,02H,60H,86H

; --------------------------------
; 8080-SPECIFIC LINE ASSEMBLER
ASMCMD:	MOV	DI,MNMTBL

; CHECK FOR MNEMONIC
	CALL	SL
	JZ	ASMCM1
	MOV	DI,DIRTBL

; CHECK FOR DIRECTIVE
	CALL	SL
	JZ	ASMCM2
	RET

; CALL MNEMONIC HANDLER AND
; WRITE BINARY TO OUTPUT
ASMCM1:	MOV	DI,IHDL
	CALL	ASMCM3
	MOV	[BINLEN],CX
	ADD	[PC],CX
	MOV	DI,BINBUF
	CLD
	MOV	AL,[OPCODE]
	STOSB
	MOV	AX,[IMM]
	STOSW
	CMP	AL,AL
	RET

; CALL DIRECTIVE HANDLER AND
; WRITE NO OUTPUT
ASMCM2:	MOV	DI,AHDL
	CALL	ASMCM3
	XOR	CX,CX
	RET

; CALL THE REQUISITE HANDLER
ASMCM3:	MOV	[OPCODE],AL
	XOR	AL,AL
	XCHG	AL,AH
	SHL	AX,1
	ADD	DI,AX
	PUSH	WORD [DI]
	RET

; --------------------------------
; SCAN AND FLAG RESERVED WORD
SW:	CMP	BX,2
	JB	SW3

; DON'T BOTHER SCANNING IF IT
; IS A NUMERIC
	CMP	AL,30H
	JB	SW1
	CMP	AL,3AH
	JB	SW3

; EVERY ONE OF THESE REGISTERS
; IS NEEDED FOR LATER PROCESSING
; AND SL DESTROYS THEM ALL
SW1:	PUSH	CX
	PUSH	DX
	PUSH	BX
	PUSH	SI
	MOV	DI,DIRTBL
	CALL	SL

; WE REALLY ONLY NEED THE ZERO
; FLAG FROM THIS OPERATION
	POP	SI
	POP	BX
	POP	DX
	POP	CX
	JNZ	SW2

; SET FLAG IF VALID USABLE
; KEYWORD
	CMP	AH,5
	JE	SW3
SW2:	MOV	AL,[SI]
SW3:	RET

; --------------------------------
; READ NUMERIC CONSTANT
RNC:	PUSH	AX
	PUSH	CX
	PUSH	SI

; DEFAULT TO DECIMAL
	MOV	CL,5
	CMP	AL,30H
	JB	RNC1
	CMP	AL,3AH
	JNB	RNC1

; SAVE END OF CONSTANT
; FOR LATER
	LEA	DI,[BX+SI]
	DEC	BX

; GET FINAL CHARACTER TO
; CHECK FOR SIGIL
	MOV	AL,[BX+SI]
	CMP	AL,42H
	JE	RNC2
	CMP	AL,48H
	JE	RNC16
	CMP	AL,4FH
	JE	RNC8
	CMP	AL,51H
	JE	RNC8
	INC	BX

; NUMERIC DIGIT MEANS DECIMAL
	CMP	AL,30H
	JB	RNC1
	CMP	AL,3AH
	JB	RNC10

; RESTORE OLD LOCATION
RNC1:	POP	SI
	POP	CX
	POP	AX
	STC
	RET

; ROTATION COUNT SLIDE
RNC2:	DEC	CX
RNC4:	DEC	CX
RNC8:	DEC	CX
RNC16:	DEC	CX
RNC10:	CALL	RN
	JNZ	RNC1
	POP	SI

; SKIP PAST CONSTANT
	MOV	SI,DI
	POP	CX
	POP	AX
	CLC
	RET

; --------------------------------
; SCAN FOR LOW/HIGH BYTE OVERRIDE
RNM:	CALL	SW
	JNZ	RNM2
	ADD	SI,BX

; PREPARE FOR OPERAND FLAG
	MOV	AH,10H
	CMP	AL,11H
	JZ	RNM1
	MOV	AH,8
	CMP	AL,12H
	JZ	RNM1
	MOV	AH,4
	CMP	AL,13H
	JZ	RNM1

; FALL-THROUGH KEYWORD ABUSE
; ERROR DOUBLES AS DIRECTIVE
; HANDLER
D5:	MOV	AL,0CH
	JMP	FAIL

; SHIFT BIT INTO POSITION AND
; SET OPERAND FLAG
RNM1:	OR	CL,AH
	CALL	CC
	JZ	RNMER8
	CMP	AL,AL
RNM2:	RET

; MISSING OPERAND ERROR
RNMER8:	MOV	AL,8
	JMP	FAIL

; --------------------------------
; RST INSTRUCTIONS
G6:	CALL	RE
	CMP	AX,8
	JC	G4S

; CONSTANT TOO LARGE ERROR
	MOV	AL,7
	JMP	FAIL

; --------------------------------
; LXI INSTRUCTIONS
G7:	CALL	G5
	CALL	COMMA

; --------------------------------
; LITERAL ADDRESS OPERATIONS
G3:	CALL	RE
	MOV	CX,3
	RET

; --------------------------------
; MOV INSTRUCTIONS
G8:	CALL	G4
	CALL	COMMA

; --------------------------------
; SINGLE REGISTER ALU OPERATIONS
G1:	CALL	RA
	JMP	SHORT G4E

; --------------------------------
; MVI INSTRUCTIONS
G9:	CALL	G4
	CALL	COMMA

; --------------------------------
; 8-BIT CONSTANT OPERATIONS
G2:	CALL	RE
	MOV	CX,2
	RET

; --------------------------------
; SINGLE REGISTER INCREMENTS
; AND DECREMENTS
G4:	CALL	RA
G4S:	SHL	AL,1
	SHL	AL,1
	SHL	AL,1
G4E:	OR	[OPCODE],AL

; --------------------------------
; INSTRUCTIONS WITHOUT OPERANDS
G0:	MOV	CX,1
	RET

; --------------------------------
; PROCESS SINGLE REGISTER
RA:	CALL	CC
	JZ	RA8
	DEC	BX
	JNZ	RA0
	INC	SI
RR:	MOV	DI,REGS+7
	MOV	CX,8
	STD
	REPNE SCASB
	JNZ	RA0
	XCHG	AX,CX
	RET

; --------------------------------
; CHECK FOR COMMA
COMMA:	CALL	CC
	JZ	RA8
	CMP	AL,2CH
	JNZ	RA1
	INC	SI
	RET

; --------------------------------
; PROCESS REGISTER PAIR OR
; SP/PSW
G5:	CALL	CC
	JZ	RA8
	MOV	CX,1
	INC	SI
	DEC	BX
	JZ	RT1
	DEC	BX
	JZ	RT2
	DEC	BX
	JZ	RT3
RA0:	MOV	AL,0
	JMP	FAIL
RA1:	MOV	AL,1
	JMP	FAIL
RA8:	MOV	AL,8
	JMP	FAIL

; CHECK FOR GENERAL PURPOSE
; REGISTER PAIR
RT1:	CALL	RR
	TEST	AL,1
	JNZ	RA0
	CMP	AL,6
	JNC	RA0
	JMP	SHORT G4S

; CHECK FOR SP
RT2:	CMP	AL,53H
	JNZ	RA0
	LODSB
	CMP	AL,50H
	JNZ	RA0
	MOV	AL,30H
	JMP	SHORT G4E

; CHECK FOR PSW
RT3:	CMP	AL,50H
	JNZ	RA0
	LODSW
	CMP	AX,5753H
	JNZ	RA0
	MOV	AL,30H
	JMP	SHORT G4E

; --------------------------------
; EVEN DIRECTIVE
D4:	MOV	AX,[PC]
	AND	AX,1
	JZ	D4X
	MOV	[BINLEN],AX
	MOV	DI,BINBUF
	MOV	AL,[OPCODE]
	STOSB
D4X:	RET

; --------------------------------
; PAGE DIRECTIVE
D8:	XOR	DX,DX
	CALL	CC
	JZ	D8X
	CALL	RE
	MOV	DX,AX
D8X:	JMP	SETEND

; --------------------------------
; WRITE ELEMENT FROM TABLE
; AT SI
WMN:	CLD
	XOR	CH,CH
	JZ	WMN2
WMN1:	LODSB
	CMP	AL,20H
	JNB	WMN1
WMN2:	LODSW
	DEC	CX
	JNS	WMN1
	JMP	WRM

; --------------------------------
; DISASSEMBLE ONE INSTRUCTION
DISASM:	MOV	BX,11

; WRITE DATA BYTE AS DB
	CALL	LDDAT
	JNC	DISAS2

; IF NOT DATA, DISASSEMBLE
	XOR	AH,AH
	MOV	AL,[OPCODE]
	MOV	BX,AX
	LODSW
	MOV	[IMM],AX

; GET MNEMONIC FOR OPCODE
	MOV	CL,[BINTBL+BX]
	TEST	CL,CL
	JS	DISAS1

; SIGNED INDEX MEANS DO NOT
; WRITE MNEMONIC QUITE YET
	PUSH	SI
	MOV	SI,MNMTBL
	CALL	WMN
	POP	SI
	MOV	AL,9
	STOSB

; INVOKE HANDLER TO DECODE
; OPERANDS
DISAS1:	SHR	BL,1
	MOV	BL,[BX+HDLTBL]
	JC	DISAS2
	SHR	BL,1
	SHR	BL,1
	SHR	BL,1
	SHR	BL,1
DISAS2:	AND	BL,0FH
	SHL	BL,1
	MOV	CX,1
	MOV	AL,[OPCODE]
	CALL	[BX+DHDL]
	MOV	[BINLEN],CX
	RET

; --------------------------------
; NO OPERANDS
IMPD:	DEC	DI
	RET

; --------------------------------
; RENDER INVALID OPCODE AS
; DATA DEFINITION
INVD:	PUSH	AX
	MOV	AX,4244H
	STOSW
	MOV	AL,9
	STOSB
	POP	AX
	JMP	WHAL

; --------------------------------
; MOV INSTRUCTIONS
RRMD:	PUSH	AX
	CALL	INCD
	MOV	AL,2CH
	STOSB
	POP	AX
	JMP	SHORT REGD

; --------------------------------
; REGISTER ENCODED SHIFTED
INCD:	SHR	AL,1
	SHR	AL,1
	SHR	AL,1

; --------------------------------
; REGISTER ENCODED UNSHIFTED
REGD:	AND	AL,7
	MOV	BX,REGS
	XLATB
	STOSB
	RET

; --------------------------------
; REGISTER PAIR OR SP
RGPD:	AND	AL,30H
	CMP	AL,30H
	JB	INCD

; ABOVE D IS ONLY SP
	MOV	AX,5053H
	STOSW
	RET

; --------------------------------
; RST HAS ITS IMMEDIATE ENCODED
RSTD:	SHR	AL,1
	SHR	AL,1
	SHR	AL,1
	AND	AL,7
	ADD	AL,30H
	STOSB
	RET

; --------------------------------
; PSW IS OPERAND
PSWD:	MOV	AX,5350H
	STOSW
	MOV	AL,57H
	STOSB
	RET

; --------------------------------
; REGPAIR PLUS 16-BIT LITERAL
RPID:	CALL	RGPD
	MOV	AL,2CH
	STOSB

; --------------------------------
; 16-BIT LITERAL
IMWD:	INC	CX
	INC	CX
	MOV	AX,[IMM]

; --------------------------------
; WRITE UNSIGNED WORD VALUE
WHAX:	PUSH	CX
	MOV	CL,0CH
	CALL	WSYMA
	POP	CX
	JNC	WHAX2
WHAX0:	CMP	AH,0A0H
	JB	WHAX1
	MOV	BYTE [DI],30H
	INC	DI
WHAX1:	PUSH	AX
	XCHG	AL,AH
	CALL	HALX
	POP	AX
	CALL	HALX
	MOV	AL,48H
	STOSB
WHAX2:	RET

; --------------------------------
; REGISTER PLUS 8-BIT LITERAL
RIMD:	CALL	INCD
	MOV	AL,2CH
	STOSB

; --------------------------------
; 8-BIT LITERAL
IMBD:	INC	CX
	MOV	AL,[IMM]

; --------------------------------
; WRITE SYMBOL OR UNSIGNED BYTE
WHAL:	PUSH	CX
	XOR	CL,CL
	CALL	WSYMA
	POP	CX
	JNC	WHAL2
WHAL0:	CMP	AL,0A0H
	JB	WHAL1
	MOV	BYTE [DI],30H
	INC	DI
WHAL1:	CALL	HALX
	MOV	AL,48H
	STOSB
WHAL2:	RET

; --------------------------------
; INSTRUCTION ASSEMBLY HANDLERS
IHDL:	DW	G0,G1,G2,G3
	DW	G4,G5,G6,G7
	DW	G8,G9

; --------------------------------
; DIRECTIVE HANDLERS
AHDL:	DW	SETEQU,SETDFB
	DW	SETDFS,SETORG
	DW	D4,D5,SETINC
	DW	SETEND,D8

; --------------------------------
; OPERAND DISASSEMBLY HANDLERS
DHDL:	DW	IMPD,REGD,IMBD
	DW	IMWD,INCD,RGPD
	DW	RSTD,RPID,RRMD
	DW	RIMD,PSWD,INVD

; --------------------------------
; OPERAND DECODER PER INSTRUCTION
; STORED AS NIBBLES
HDLTBL:	DB	07H,55H,44H,90H
	DB	0B5H,55H,44H,90H
	DB	0B7H,55H,44H,90H
	DB	0B5H,55H,44H,90H
	DB	0B7H,35H,44H,90H
	DB	0B5H,35H,44H,90H
	DB	0B7H,35H,44H,90H
	DB	0B5H,35H,44H,90H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,08H
	DB	88H,88H,88H,88H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	05H,33H,35H,26H
	DB	00H,3BH,33H,26H
	DB	05H,32H,35H,26H
	DB	0BH,32H,3BH,26H
	DB	05H,30H,35H,26H
	DB	00H,30H,3BH,26H
	DB	0AH,30H,3AH,26H
	DB	00H,30H,3BH,26H

; --------------------------------
; MNEMONIC PER INSTRUCTION
BINTBL:	DB	2CH,29H,46H,1CH
	DB	1BH,15H,2BH,37H
	DB	80H,14H,27H,16H
	DB	1BH,15H,2BH,3EH
	DB	80H,29H,46H,1CH
	DB	1BH,15H,2BH,33H
	DB	80H,14H,27H,16H
	DB	1BH,15H,2BH,34H
	DB	80H,29H,43H,1CH
	DB	1BH,15H,2BH,13H
	DB	80H,14H,28H,16H
	DB	1BH,15H,2BH,09H
	DB	80H,29H,45H,1CH
	DB	1BH,15H,2BH,47H
	DB	80H,14H,26H,16H
	DB	1BH,15H,2BH,0AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,19H,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	02H,02H,02H,02H
	DB	02H,02H,02H,02H
	DB	01H,01H,01H,01H
	DB	01H,01H,01H,01H
	DB	48H,48H,48H,48H
	DB	48H,48H,48H,48H
	DB	41H,41H,41H,41H
	DB	41H,41H,41H,41H
	DB	04H,04H,04H,04H
	DB	04H,04H,04H,04H
	DB	4BH,4BH,4BH,4BH
	DB	4BH,4BH,4BH,4BH
	DB	2DH,2DH,2DH,2DH
	DB	2DH,2DH,2DH,2DH
	DB	0BH,0BH,0BH,0BH
	DB	0BH,0BH,0BH,0BH
	DB	3AH,31H,21H,1FH
	DB	0DH,32H,03H,3FH
	DB	40H,36H,25H,80H
	DB	12H,06H,00H,3FH
	DB	39H,31H,20H,2FH
	DB	0CH,32H,49H,3FH
	DB	35H,80H,1DH,1AH
	DB	07H,80H,42H,3FH
	DB	3DH,31H,24H,4DH
	DB	11H,32H,05H,3FH
	DB	3CH,30H,23H,4AH
	DB	0FH,80H,4CH,3FH
	DB	3BH,31H,22H,17H
	DB	0EH,32H,2EH,3FH
	DB	38H,44H,1EH,18H
	DB	08H,80H,10H,3FH

; --------------------------------
; GEE WIZ I WONDER
REGS:	DB	"BCDEHLMA"

; --------------------------------
; INSTRUCTION SET
MNMTBL:	DW	78
	DB	"ACI",0,0CEH,2
	DB	"ADC",0,88H,1
	DB	"ADD",0,80H,1
	DB	"ADI",0,0C6H,2
	DB	"ANA",0,0A0H,1
	DB	"ANI",0,0E6H,2
	DB	"CALL",0,0CDH,3
	DB	"CC",0,0DCH,3
	DB	"CM",0,0FCH,3
	DB	"CMA",0,2FH,0
	DB	"CMC",0,3FH,0
	DB	"CMP",0,0B8H,1
	DB	"CNC",0,0D4H,3
	DB	"CNZ",0,0C4H,3
	DB	"CP",0,0F4H,3
	DB	"CPE",0,0ECH,3
	DB	"CPI",0,0FEH,2
	DB	"CPO",0,0E4H,3
	DB	"CZ",0,0CCH,3
	DB	"DAA",0,27H,0
	DB	"DAD",0,9,5
	DB	"DCR",0,5,4
	DB	"DCX",0,0BH,5
	DB	"DI",0,0F3H,0
	DB	"EI",0,0FBH,0
	DB	"HLT",0,76H,0
	DB	"IN",0,0DBH,2
	DB	"INR",0,4,4
	DB	"INX",0,3,5
	DB	"JC",0,0DAH,3
	DB	"JM",0,0FAH,3
	DB	"JMP",0,0C3H,3
	DB	"JNC",0,0D2H,3
	DB	"JNZ",0,0C2H,3
	DB	"JP",0,0F2H,3
	DB	"JPE",0,0EAH,3
	DB	"JPO",0,0E2H,3
	DB	"JZ",0,0CAH,3
	DB	"LDA",0,3AH,3
	DB	"LDAX",0,0AH,5
	DB	"LHLD",0,2AH,3
	DB	"LXI",0,1,7
	DB	"MOV",0,40H,8
	DB	"MVI",0,6,9
	DB	"NOP",0,0,0
	DB	"ORA",0,0B0H,1
	DB	"ORI",0,0F6H,2
	DB	"OUT",0,0D3H,2
	DB	"PCHL",0,0E9H,0
	DB	"POP",0,0C1H,5
	DB	"PUSH",0,0C5H,5
	DB	"RAL",0,17H,0
	DB	"RAR",0,1FH,0
	DB	"RC",0,0D8H,0
	DB	"RET",0,0C9H,0
	DB	"RLC",0,7,0
	DB	"RM",0,0F8H,0
	DB	"RNC",0,0D0H,0
	DB	"RNZ",0,0C0H,0
	DB	"RP",0,0F0H,0
	DB	"RPE",0,0E8H,0
	DB	"RPO",0,0E0H,0
	DB	"RRC",0,0FH,0
	DB	"RST",0,0C7H,6
	DB	"RZ",0,0C8H,0
	DB	"SBB",0,98H,1
	DB	"SBI",0,0DEH,2
	DB	"SHLD",0,22H,3
	DB	"SPHL",0,0F9H,0
	DB	"STA",0,32H,3
	DB	"STAX",0,2,5
	DB	"STC",0,37H,0
	DB	"SUB",0,90H,1
	DB	"SUI",0,0D6H,2
	DB	"XCHG",0,0EBH,0
	DB	"XRA",0,0A8H,1
	DB	"XRI",0,0EEH,2
	DB	"XTHL",0,0E3H,0

; --------------------------------
; ASSEMBLER DIRECTIVES
DIRTBL:	DW	13
	DB	"DB",0,1,1
	DB	"DS",0,0,2
	DB	"DW",0,2,1
	DB	"END",0,0FFH,7
	DB	"EQU",0,0,0
	DB	"EVEN",0,0,4
	DB	"HIGH",0,13H,5
	DB	"INCBIN",0,0FDH,6
	DB	"INCLUDE",0,0FEH,6
	DB	"LOW",0,12H,5
	DB	"ORG",0,0,3
	DB	"PAGE",0,0FAH,8
	DB	"TITLE",0,0FBH,6

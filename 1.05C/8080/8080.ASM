; --------------------------------
; 8080-SPECIFIC LINE ASSEMBLER
ASMCMD:	LXI	D,MNMTBL

; CHECK FOR MNEMONIC
	CALL	SL
	JZ	ASMCM1
	LXI	D,DIRTBL

; CHECK FOR DIRECTIVE
	CALL	SL
	JZ	ASMCM2
	RET

; CALL MNEMONIC HANDLER AND
; WRITE BINARY TO OUTPUT
ASMCM1:	LXI	D,IHDL
	CALL	ASMCM3
	PUSH	H
	MOV	A,C
	STA	BINLEN
	MVI	A,B
	STA	BINLEN+1
	LHLD	PC
	DAD	B
	SHLD	PC
	LXI	H,BINBUF
	LDA	OPCODE
	MOV	M,A
	INX	H
	LDA	IMM
	MOV	M,A
	INX	H
	LDA	IMM+1
	MOV	M,A
	INX	H
	POP	H
	CMP	A
	RET

; CALL DIRECTIVE HANDLER AND
; WRITE NO OUTPUT
ASMCM2:	LXI	D,AHDL
	CALL	ASMCM3
	CMP	A
	RET

; CALL THE REQUISITE HANDLER
ASMCM3:	MOV	A,C
	STA	OPCODE
	PUSH	H
	MOV	L,B
	MVI	H,0
	DAD	H
	DAD	D
	MOV	A,M
	INX	H
	MOV	E,A
	MOV	A,M
	POP	H
	MOV	D,A
	PUSH	D
	RET

; --------------------------------
; SCAN AND FLAG RESERVED WORD
SW:	MOV	B,A
	MOV	A,C
	CPI	2
	MOV	A,B
	RC

; DON'T BOTHER SCANNING IF IT
; IS A NUMERIC
	CPI	30H
	JC	SW1
	CPI	3AH
	RC

; EVERY ONE OF THESE REGISTERS
; IS NEEDED FOR LATER PROCESSING
; AND SL DESTROYS THEM ALL
SW1:	PUSH	B
	PUSH	H
	LXI	D,DIRTBL
	CALL	SL

; WE REALLY ONLY NEED THE ZERO
; FLAG FROM THIS OPERATION
	POP	H
	JNZ	SW2

; SET FLAG IF VALID USABLE
; KEYWORD
	MOV	A,B
	CPI	5
	MOV	A,C
	POP	B
	RZ
SW2:	MOV	A,M
	RET

; --------------------------------
; READ NUMERIC CONSTANT
RNC:	PUSH	PSW
	PUSH	B
	PUSH	H

; DEFAULT TO DECIMAL
	CPI	30H
	JC	RNC1
	CPI	3AH
	JNC	RNC1

; SAVE END OF CONSTANT
; FOR LATER
	PUSH	H
	DAD	B
	SHLD	TEMP
	DCX	H
	MOV	A,M
	POP	H

; GET FINAL CHARACTER TO
; CHECK FOR SIGIL
	MVI	E,5
	CPI	42H
	JZ	RNC2
	CPI	48H
	JZ	RNC16
	CPI	4FH
	JZ	RNC8
	CPI	51H
	JZ	RNC8

; NUMERIC DIGIT MEANS DECIMAL
	CPI	30H
	JC	RNC1
	CPI	3AH
	JC	RNC10

; RESTORE OLD LOCATION
RNC1:	POP	H
	POP	B
	POP	PSW
	STC
	RET

; ROTATION COUNT SLIDE
RNC2:	DCR	E
RNC4:	DCR	E
RNC8:	DCR	E
RNC16:	DCR	E
RNC10:	MOV	B,E
	CALL	RN
	JNZ	RNC1
	POP	H

; SKIP PAST CONSTANT
	LHLD	TEMP
	POP	B
	POP	PSW
	STC
	CMC
	RET

; --------------------------------
; SCAN FOR LOW/HIGH BYTE OVERRIDE
RNM:	CALL	SW
	RNZ
	DAD	B

; PREPARE FOR OPERAND FLAG
	MVI	E,10H
	CPI	11H
	JZ	RNM1
	MVI	E,8
	CPI	12H
	JZ	RNM1
	MVI	E,4
	CPI	13H
	JZ	RNM1

; FALL-THROUGH KEYWORD ABUSE
; ERROR DOUBLES AS DIRECTIVE
; HANDLER
D5:	MVI	A,0CH
	JMP	FAIL

; SHIFT BIT INTO POSITION AND
; SET OPERAND FLAG
RNM1:	LDA	SYMFLG
	ORA	E
	STA	SYMFLG
	CALL	CC
	JZ	RNMER8
	CMP	A
	RET

; MISSING OPERAND ERROR
RNMER8:	MVI	A,8
	JMP	FAIL

; --------------------------------
; RST INSTRUCTIONS
G6:	CALL	RE
	LDA	IMM+1
	CPI	0
	JNZ	G6F
	LDA	IMM
	CPI	8
	JC	G4S

; CONSTANT TOO LARGE ERROR
G6F:	MVI	A,7
	JMP	FAIL

; --------------------------------
; LXI INSTRUCTIONS
G7:	CALL	G5
	CALL	COMMA

; --------------------------------
; LITERAL ADDRESS OPERATIONS
G3:	CALL	RE
	LXI	B,3
	RET

; --------------------------------
; MOV INSTRUCTIONS
G8:	CALL	G4
	CALL	COMMA

; --------------------------------
; SINGLE REGISTER ALU OPERATIONS
G1:	CALL	RA
	JMP	G4E

; --------------------------------
; MVI INSTRUCTIONS
G9:	CALL	G4
	CALL	COMMA

; --------------------------------
; 8-BIT CONSTANT OPERATIONS
G2:	CALL	RE
	LXI	B,2
	RET

; --------------------------------
; SINGLE REGISTER INCREMENTS
; AND DECREMENTS
G4:	CALL	RA
G4S:	RLC
	RLC
	RLC
	ANI	0F8H
G4E:	MOV	C,A
	LDA	OPCODE
	ORA	C
	STA	OPCODE

; --------------------------------
; INSTRUCTIONS WITHOUT OPERANDS
G0:	LXI	B,1
	RET

; --------------------------------
; PROCESS SINGLE REGISTER
RA:	CALL	CC
	JZ	RA8
	DCR	C
	JNZ	RA0
	INX	H
RR:	PUSH	B
	LXI	D,REGS+7
	MOV	B,A
	MVI	C,7
RR1:	LDAX	D
	CMP	B
	JZ	RR2
	DCX	D
	DCR	C
	JP	RR1
	MVI	A,0
	JMP	FAIL
RR2:	MOV	A,C
	POP	B
	RET

; --------------------------------
; CHECK FOR COMMA
COMMA:	CALL	CC
	JZ	RA8
	CPI	2CH
	JNZ	RA1
	INX	H
	RET

; --------------------------------
; PROCESS REGISTER PAIR OR
; SP/PSW
G5:	CALL	CC
	JZ	RA8
	INX	H
	MOV	B,C
	MVI	C,1
	DCR	B
	JZ	RT1
	DCR	B
	JZ	RT2
	DCR	B
	JZ	RT3
RA0:	MVI	A,0
	JMP	FAIL
RA1:	MVI	A,1
	JMP	FAIL
RA8:	MVI	A,8
	JMP	FAIL

; CHECK FOR GENERAL PURPOSE
; REGISTER PAIR
RT1:	CALL	RR
	RAR
	JC	RA0
	RAL
	CPI	6
	JC	G4S
	MVI	A,0
	JMP	FAIL

; CHECK FOR SP
RT2:	CPI	53H
	JNZ	RA0
	MOV	A,M
	INX	H
	CPI	50H
	JNZ	RA0
	MVI	A,30H
	JMP	G4E

; CHECK FOR PSW
RT3:	CPI	50H
	JNZ	RA0
	MOV	A,M
	INX	H
	CPI	53H
	JNZ	RA0
	MOV	A,M
	INX	H
	CPI	57H
	JNZ	RA0
	MVI	A,30H
	JMP	G4E

; --------------------------------
; EVEN DIRECTIVE
D4:	LDA	PC
	ANI	1
	RZ
	STA	BINLEN
	LXI	D,BINBUF
	LDA	OPCODE
	STAX	D
	RET

; --------------------------------
; PAGE DIRECTIVE
D8:	LXI	D,0
	CALL	CC
	JZ	SETEND
	CALL	RE
	XCHG
	LHLD	IMM
	XCHG
	JMP	SETEND

; --------------------------------
; WRITE ELEMENT FROM TABLE
; AT HL
WMN:	INX	D
	INX	D
	DCR	A
	JM	WRM
	PUSH	PSW
WMN1:	LDAX	D
	INX	D
	CPI	20H
	JNC	WMN1
	POP	PSW
	JMP	WMN

; --------------------------------
; DISASSEMBLE ONE INSTRUCTION
DISASM:	CALL	LDDAT

; WRITE DATA BYTE AS DB
; DIRECTIVE
	LXI	B,22
	JZ	DISAS3

; IF NOT DATA, DISASSEMBLE
	CALL	RDBIN
	STA	IMM
	CALL	RDBIN
	STA	IMM+1
	LDA	OPCODE
	PUSH	H
	MVI	D,0
	MOV	E,A

; GET HANDLER INDEX
	LXI	H,HDLTBL
	DAD	D
	MVI	B,0
	MOV	C,M

; GET MNEMONIC FOR OPCODE
	LXI	H,BINTBL
	DAD	D
	MOV	A,M
	POP	H
	ORA	A
	JM	DISAS1

; SIGNED INDEX MEANS DO NOT
; WRITE MNEMONIC QUITE YET
	LXI	D,MNMTBL
	CALL	WMN
	MVI	M,9
	INX	H

; INVOKE HANDLER TO DECODE
; OPERANDS
DISAS1:	MOV	A,C
	RRC
	PUSH	H
	PUSH	PSW
	MOV	C,A
	LXI	H,HDLTBL
	DAD	B
	POP	PSW
	MOV	A,M
	POP	H
	JC	DISAS2
	RRC
	RRC
	RRC
	RRC
DISAS2:	ANI	0FH
	RLC
	MOV	C,A
DISAS3:	CALL	DISCMD
	MOV	A,C
	STA	BINLEN
	MOV	A,B
	STA	BINLEN+1
	RET

; STACK WRAPPER
DISCMD:	PUSH	H
	LXI	H,DHDL
	LDA	OPCODE
	MVI	B,0
	DAD	B
	MVI	C,1
	POP	D
	XCHG
	PUSH	D
	RET

; --------------------------------
; NO OPERANDS
IMPD:	DCX	H
	RET

; --------------------------------
; RENDER INVALID OPCODE AS
; DATA DEFINITION
INVD:	MVI	M,44H
	INX	H
	MVI	M,42H
	INX	H
	MVI	M,9
	INX	H
	STA	IMM
	JMP	WHAL

; --------------------------------
; MOV INSTRUCTIONS
RRMD:	PUSH	PSW
	CALL	INCD
	POP	PSW
	MVI	M,2CH
	INX	H
	JMP	REGD

; --------------------------------
; REGISTER ENCODED SHIFTED
INCD:	RRC
	RRC
	RRC

; --------------------------------
; REGISTER ENCODED UNSHIFTED
REGD:	LXI	D,REGS
	ANI	7
	ADD	E
	MOV	E,A
	MVI	A,0
	ADC	D
	MOV	D,A
	LDAX	D
	MOV	M,A
	INX	H
	RET

; --------------------------------
; REGISTER PAIR OR SP
RGPD:	ANI	30H
	CPI	30H
	JC	INCD

; ABOVE D IS ONLY SP
	MVI	M,53H
	INX	H
	MVI	M,50H
	INX	H
	RET

; --------------------------------
; RST HAS ITS IMMEDIATE ENCODED
RSTD:	RRC
	RRC
	RRC
	ANI	7
	ADI	30H
	MOV	M,A
	INX	H
	RET

; --------------------------------
; PSW IS OPERAND
PSWD:	MVI	M,50H
	INX	H
	MVI	M,53H
	INX	H
	MVI	M,57H
	INX	H
	RET

; --------------------------------
; REGPAIR PLUS 16-BIT LITERAL
RPID:	CALL	RGPD
	MVI	M,2CH
	INX	H
	INX	B
	INX	B

; --------------------------------
; WRITE UNSIGNED WORD VALUE
WHAX:	MVI	A,0CH
	STA	SYMFLG
	CALL	WSYMA
	RNC
WHAX0:	LDA	IMM+1
	CPI	0A0H
	JC	WHAX1
	MVI	M,30H
	INX	H
WHAX1:	CALL	HALX
	LDA	IMM
	CALL	HALX
	MVI	M,48H
	INX	H
	RET

; --------------------------------
; REGISTER PLUS 8-BIT LITERAL
RIMD:	CALL	INCD
	MVI	M,2CH
	INX	H
	INX	B

; --------------------------------
; WRITE SYMBOL OR UNSIGNED BYTE
WHAL:	MVI	A,0
	STA	SYMFLG
	CALL	WSYMA
	RNC
WHAL0:	LDA	IMM
	CPI	0A0H
	JC	WHAL1
	MVI	M,30H
	INX	H
WHAL1:	CALL	HALX
	MVI	M,48H
	INX	H
	RET

; --------------------------------
; INSTRUCTION ASSEMBLY HANDLERS
IHDL:	DW	G0,G1,G2,G3
	DW	G4,G5,G6,G7
	DW	G8,G9

; --------------------------------
; DIRECTIVE HANDLERS
AHDL:	DW	SETEQU,SETDFB
	DW	SETDFS,SETORG
	DW	D4,D5,SETINC
	DW	SETEND,D8

; --------------------------------
; OPERAND DISASSEMBLY HANDLERS
DHDL:	DW	IMPD,REGD,IMBD
	DW	IMWD,INCD,RGPD
	DW	RSTD,RPID,RRMD
	DW	RIMD,PSWD,INVD

; --------------------------------
; OPERAND DECODER PER INSTRUCTION
; STORED AS NIBBLES
HDLTBL:	DB	07H,55H,44H,90H
	DB	0B5H,55H,44H,90H
	DB	0B7H,55H,44H,90H
	DB	0B5H,55H,44H,90H
	DB	0B7H,35H,44H,90H
	DB	0B5H,35H,44H,90H
	DB	0B7H,35H,44H,90H
	DB	0B5H,35H,44H,90H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,88H
	DB	88H,88H,88H,08H
	DB	88H,88H,88H,88H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	11H,11H,11H,11H
	DB	05H,33H,35H,26H
	DB	00H,3BH,33H,26H
	DB	05H,32H,35H,26H
	DB	0BH,32H,3BH,26H
	DB	05H,30H,35H,26H
	DB	00H,30H,3BH,26H
	DB	0AH,30H,3AH,26H
	DB	00H,30H,3BH,26H

; --------------------------------
; MNEMONIC PER INSTRUCTION
BINTBL:	DB	2CH,29H,46H,1CH
	DB	1BH,15H,2BH,37H
	DB	80H,14H,27H,16H
	DB	1BH,15H,2BH,3EH
	DB	80H,29H,46H,1CH
	DB	1BH,15H,2BH,33H
	DB	80H,14H,27H,16H
	DB	1BH,15H,2BH,34H
	DB	80H,29H,43H,1CH
	DB	1BH,15H,2BH,13H
	DB	80H,14H,28H,16H
	DB	1BH,15H,2BH,09H
	DB	80H,29H,45H,1CH
	DB	1BH,15H,2BH,47H
	DB	80H,14H,26H,16H
	DB	1BH,15H,2BH,0AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,19H,2AH
	DB	2AH,2AH,2AH,2AH
	DB	2AH,2AH,2AH,2AH
	DB	02H,02H,02H,02H
	DB	02H,02H,02H,02H
	DB	01H,01H,01H,01H
	DB	01H,01H,01H,01H
	DB	48H,48H,48H,48H
	DB	48H,48H,48H,48H
	DB	41H,41H,41H,41H
	DB	41H,41H,41H,41H
	DB	04H,04H,04H,04H
	DB	04H,04H,04H,04H
	DB	4BH,4BH,4BH,4BH
	DB	4BH,4BH,4BH,4BH
	DB	2DH,2DH,2DH,2DH
	DB	2DH,2DH,2DH,2DH
	DB	0BH,0BH,0BH,0BH
	DB	0BH,0BH,0BH,0BH
	DB	3AH,31H,21H,1FH
	DB	0DH,32H,03H,3FH
	DB	40H,36H,25H,80H
	DB	12H,06H,00H,3FH
	DB	39H,31H,20H,2FH
	DB	0CH,32H,49H,3FH
	DB	35H,80H,1DH,1AH
	DB	07H,80H,42H,3FH
	DB	3DH,31H,24H,4DH
	DB	11H,32H,05H,3FH
	DB	3CH,30H,23H,4AH
	DB	0FH,80H,4CH,3FH
	DB	3BH,31H,22H,17H
	DB	0EH,32H,2EH,3FH
	DB	38H,44H,1EH,18H
	DB	08H,80H,10H,3FH

; --------------------------------
; GEE WIZ I WONDER
REGS:	DB	"BCDEHLMA"

; --------------------------------
; INSTRUCTION SET
MNMTBL:	DW	78
	DB	"ACI",0,0CEH,2
	DB	"ADC",0,88H,1
	DB	"ADD",0,80H,1
	DB	"ADI",0,0C6H,2
	DB	"ANA",0,0A0H,1
	DB	"ANI",0,0E6H,2
	DB	"CALL",0,0CDH,3
	DB	"CC",0,0DCH,3
	DB	"CM",0,0FCH,3
	DB	"CMA",0,2FH,0
	DB	"CMC",0,3FH,0
	DB	"CMP",0,0B8H,1
	DB	"CNC",0,0D4H,3
	DB	"CNZ",0,0C4H,3
	DB	"CP",0,0F4H,3
	DB	"CPE",0,0ECH,3
	DB	"CPI",0,0FEH,2
	DB	"CPO",0,0E4H,3
	DB	"CZ",0,0CCH,3
	DB	"DAA",0,27H,0
	DB	"DAD",0,9,5
	DB	"DCR",0,5,4
	DB	"DCX",0,0BH,5
	DB	"DI",0,0F3H,0
	DB	"EI",0,0FBH,0
	DB	"HLT",0,76H,0
	DB	"IN",0,0DBH,2
	DB	"INR",0,4,4
	DB	"INX",0,3,5
	DB	"JC",0,0DAH,3
	DB	"JM",0,0FAH,3
	DB	"JMP",0,0C3H,3
	DB	"JNC",0,0D2H,3
	DB	"JNZ",0,0C2H,3
	DB	"JP",0,0F2H,3
	DB	"JPE",0,0EAH,3
	DB	"JPO",0,0E2H,3
	DB	"JZ",0,0CAH,3
	DB	"LDA",0,3AH,3
	DB	"LDAX",0,0AH,5
	DB	"LHLD",0,2AH,3
	DB	"LXI",0,1,7
	DB	"MOV",0,40H,8
	DB	"MVI",0,6,9
	DB	"NOP",0,0,0
	DB	"ORA",0,0B0H,1
	DB	"ORI",0,0F6H,2
	DB	"OUT",0,0D3H,2
	DB	"PCHL",0,0E9H,0
	DB	"POP",0,0C1H,5
	DB	"PUSH",0,0C5H,5
	DB	"RAL",0,17H,0
	DB	"RAR",0,1FH,0
	DB	"RC",0,0D8H,0
	DB	"RET",0,0C9H,0
	DB	"RLC",0,7,0
	DB	"RM",0,0F8H,0
	DB	"RNC",0,0D0H,0
	DB	"RNZ",0,0C0H,0
	DB	"RP",0,0F0H,0
	DB	"RPE",0,0E8H,0
	DB	"RPO",0,0E0H,0
	DB	"RRC",0,0FH,0
	DB	"RST",0,0C7H,6
	DB	"RZ",0,0C8H,0
	DB	"SBB",0,98H,1
	DB	"SBI",0,0DEH,2
	DB	"SHLD",0,22H,3
	DB	"SPHL",0,0F9H,0
	DB	"STA",0,32H,3
	DB	"STAX",0,2,5
	DB	"STC",0,37H,0
	DB	"SUB",0,90H,1
	DB	"SUI",0,0D6H,2
	DB	"XCHG",0,0EBH,0
	DB	"XRA",0,0A8H,1
	DB	"XRI",0,0EEH,2
	DB	"XTHL",0,0E3H,0

; --------------------------------
; ASSEMBLER DIRECTIVES
DIRTBL:	DW	13
	DB	"DB",0,1,1
	DB	"DS",0,0,2
	DB	"DW",0,2,1
	DB	"END",0,0FFH,7
	DB	"EQU",0,0,0
	DB	"EVEN",0,0,4
	DB	"HIGH",0,13H,5
	DB	"INCBIN",0,0FDH,6
	DB	"INCLUDE",0,0FEH,6
	DB	"LOW",0,12H,5
	DB	"ORG",0,0,3
	DB	"PAGE",0,0FAH,8
	DB	"TITLE",0,0FBH,6
